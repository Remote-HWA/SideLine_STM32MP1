
SideLine_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  00000000  00000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dac  10000000  10000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .startup_copro_fw.Reset_Handler 00000050  10002dac  10002dac  00022dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00001160  10002dfc  10002dfc  00022dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  10003f5c  10003f5c  0003044c  2**0
                  CONTENTS
  5 .ARM          00000000  10003f5c  10003f5c  0003044c  2**0
                  CONTENTS
  6 .preinit_array 00000000  10003f5c  10003f5c  0003044c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  10003f5c  10003f5c  00023f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  10003f64  10003f64  00023f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000044c  10020000  10003f68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 10 .resource_table 00000000  1002044c  1002044c  0003044c  2**0
                  CONTENTS
 11 .bss          00003f30  1002044c  100043b4  0003044c  2**2
                  ALLOC
 12 ._user_heap_stack 00008004  1002437c  100082e4  0003044c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0003044c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000152cd  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00002768  00000000  00000000  00045749  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00000868  00000000  00000000  00047eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000770  00000000  00000000  00048720  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038732  00000000  00000000  00048e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0000a0b6  00000000  00000000  000815c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0015a0ed  00000000  00000000  0008b678  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001e5765  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00002134  00000000  00000000  001e57e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10000000 <__do_global_dtors_aux>:
10000000:	b510      	push	{r4, lr}
10000002:	4c05      	ldr	r4, [pc, #20]	; (10000018 <__do_global_dtors_aux+0x18>)
10000004:	7823      	ldrb	r3, [r4, #0]
10000006:	b933      	cbnz	r3, 10000016 <__do_global_dtors_aux+0x16>
10000008:	4b04      	ldr	r3, [pc, #16]	; (1000001c <__do_global_dtors_aux+0x1c>)
1000000a:	b113      	cbz	r3, 10000012 <__do_global_dtors_aux+0x12>
1000000c:	4804      	ldr	r0, [pc, #16]	; (10000020 <__do_global_dtors_aux+0x20>)
1000000e:	f3af 8000 	nop.w
10000012:	2301      	movs	r3, #1
10000014:	7023      	strb	r3, [r4, #0]
10000016:	bd10      	pop	{r4, pc}
10000018:	1002044c 	.word	0x1002044c
1000001c:	00000000 	.word	0x00000000
10000020:	10002d94 	.word	0x10002d94

10000024 <frame_dummy>:
10000024:	b508      	push	{r3, lr}
10000026:	4b03      	ldr	r3, [pc, #12]	; (10000034 <frame_dummy+0x10>)
10000028:	b11b      	cbz	r3, 10000032 <frame_dummy+0xe>
1000002a:	4903      	ldr	r1, [pc, #12]	; (10000038 <frame_dummy+0x14>)
1000002c:	4803      	ldr	r0, [pc, #12]	; (1000003c <frame_dummy+0x18>)
1000002e:	f3af 8000 	nop.w
10000032:	bd08      	pop	{r3, pc}
10000034:	00000000 	.word	0x00000000
10000038:	10020450 	.word	0x10020450
1000003c:	10002d94 	.word	0x10002d94

10000040 <Periph_Lock>:
  *                     Semaphore id deduced from this peripheral.
  *         Timeout: timeout value in msecs
  * @retval Return Status
  */
LockResource_Status_t Periph_Lock(void* Peripheral, uint32_t Timeout)
{
10000040:	b580      	push	{r7, lr}
10000042:	b084      	sub	sp, #16
10000044:	af00      	add	r7, sp, #0
10000046:	6078      	str	r0, [r7, #4]
10000048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
1000004a:	2300      	movs	r3, #0
1000004c:	60bb      	str	r3, [r7, #8]
  LockResource_Status_t ret = LOCK_RESOURCE_STATUS_OK;
1000004e:	2300      	movs	r3, #0
10000050:	73fb      	strb	r3, [r7, #15]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
10000052:	f000 fd0b 	bl	10000a6c <HAL_GetTick>
10000056:	60b8      	str	r0, [r7, #8]

  /* Try to Take HSEM  assigned to the Peripheral */
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000058:	e00e      	b.n	10000078 <Periph_Lock+0x38>
  {

    if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
1000005a:	683b      	ldr	r3, [r7, #0]
1000005c:	2b00      	cmp	r3, #0
1000005e:	d007      	beq.n	10000070 <Periph_Lock+0x30>
10000060:	f000 fd04 	bl	10000a6c <HAL_GetTick>
10000064:	4602      	mov	r2, r0
10000066:	68bb      	ldr	r3, [r7, #8]
10000068:	1ad3      	subs	r3, r2, r3
1000006a:	683a      	ldr	r2, [r7, #0]
1000006c:	429a      	cmp	r2, r3
1000006e:	d203      	bcs.n	10000078 <Periph_Lock+0x38>
    {
       ret = LOCK_RESOURCE_STATUS_TIMEOUT;
10000070:	2302      	movs	r3, #2
10000072:	73fb      	strb	r3, [r7, #15]
       Error_Handler();
10000074:	f000 fb1a 	bl	100006ac <Error_Handler>
  while (HAL_HSEM_FastTake(GET_HSEM_SEM_INDEX(Peripheral)) != HAL_OK)
10000078:	687b      	ldr	r3, [r7, #4]
1000007a:	4a2c      	ldr	r2, [pc, #176]	; (1000012c <Periph_Lock+0xec>)
1000007c:	4293      	cmp	r3, r2
1000007e:	d049      	beq.n	10000114 <Periph_Lock+0xd4>
10000080:	687b      	ldr	r3, [r7, #4]
10000082:	4a2b      	ldr	r2, [pc, #172]	; (10000130 <Periph_Lock+0xf0>)
10000084:	4293      	cmp	r3, r2
10000086:	d043      	beq.n	10000110 <Periph_Lock+0xd0>
10000088:	687b      	ldr	r3, [r7, #4]
1000008a:	4a2a      	ldr	r2, [pc, #168]	; (10000134 <Periph_Lock+0xf4>)
1000008c:	4293      	cmp	r3, r2
1000008e:	d03d      	beq.n	1000010c <Periph_Lock+0xcc>
10000090:	687b      	ldr	r3, [r7, #4]
10000092:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000096:	d037      	beq.n	10000108 <Periph_Lock+0xc8>
10000098:	687b      	ldr	r3, [r7, #4]
1000009a:	4a27      	ldr	r2, [pc, #156]	; (10000138 <Periph_Lock+0xf8>)
1000009c:	4293      	cmp	r3, r2
1000009e:	d031      	beq.n	10000104 <Periph_Lock+0xc4>
100000a0:	687b      	ldr	r3, [r7, #4]
100000a2:	4a26      	ldr	r2, [pc, #152]	; (1000013c <Periph_Lock+0xfc>)
100000a4:	4293      	cmp	r3, r2
100000a6:	d02b      	beq.n	10000100 <Periph_Lock+0xc0>
100000a8:	687b      	ldr	r3, [r7, #4]
100000aa:	4a25      	ldr	r2, [pc, #148]	; (10000140 <Periph_Lock+0x100>)
100000ac:	4293      	cmp	r3, r2
100000ae:	d025      	beq.n	100000fc <Periph_Lock+0xbc>
100000b0:	687b      	ldr	r3, [r7, #4]
100000b2:	4a24      	ldr	r2, [pc, #144]	; (10000144 <Periph_Lock+0x104>)
100000b4:	4293      	cmp	r3, r2
100000b6:	d01f      	beq.n	100000f8 <Periph_Lock+0xb8>
100000b8:	687b      	ldr	r3, [r7, #4]
100000ba:	4a23      	ldr	r2, [pc, #140]	; (10000148 <Periph_Lock+0x108>)
100000bc:	4293      	cmp	r3, r2
100000be:	d019      	beq.n	100000f4 <Periph_Lock+0xb4>
100000c0:	687b      	ldr	r3, [r7, #4]
100000c2:	4a22      	ldr	r2, [pc, #136]	; (1000014c <Periph_Lock+0x10c>)
100000c4:	4293      	cmp	r3, r2
100000c6:	d013      	beq.n	100000f0 <Periph_Lock+0xb0>
100000c8:	687b      	ldr	r3, [r7, #4]
100000ca:	4a21      	ldr	r2, [pc, #132]	; (10000150 <Periph_Lock+0x110>)
100000cc:	4293      	cmp	r3, r2
100000ce:	d00d      	beq.n	100000ec <Periph_Lock+0xac>
100000d0:	687b      	ldr	r3, [r7, #4]
100000d2:	4a20      	ldr	r2, [pc, #128]	; (10000154 <Periph_Lock+0x114>)
100000d4:	4293      	cmp	r3, r2
100000d6:	d007      	beq.n	100000e8 <Periph_Lock+0xa8>
100000d8:	687b      	ldr	r3, [r7, #4]
100000da:	4a1f      	ldr	r2, [pc, #124]	; (10000158 <Periph_Lock+0x118>)
100000dc:	4293      	cmp	r3, r2
100000de:	d101      	bne.n	100000e4 <Periph_Lock+0xa4>
100000e0:	2301      	movs	r3, #1
100000e2:	e018      	b.n	10000116 <Periph_Lock+0xd6>
100000e4:	2320      	movs	r3, #32
100000e6:	e016      	b.n	10000116 <Periph_Lock+0xd6>
100000e8:	2300      	movs	r3, #0
100000ea:	e014      	b.n	10000116 <Periph_Lock+0xd6>
100000ec:	2300      	movs	r3, #0
100000ee:	e012      	b.n	10000116 <Periph_Lock+0xd6>
100000f0:	2300      	movs	r3, #0
100000f2:	e010      	b.n	10000116 <Periph_Lock+0xd6>
100000f4:	2300      	movs	r3, #0
100000f6:	e00e      	b.n	10000116 <Periph_Lock+0xd6>
100000f8:	2300      	movs	r3, #0
100000fa:	e00c      	b.n	10000116 <Periph_Lock+0xd6>
100000fc:	2300      	movs	r3, #0
100000fe:	e00a      	b.n	10000116 <Periph_Lock+0xd6>
10000100:	2300      	movs	r3, #0
10000102:	e008      	b.n	10000116 <Periph_Lock+0xd6>
10000104:	2300      	movs	r3, #0
10000106:	e006      	b.n	10000116 <Periph_Lock+0xd6>
10000108:	2300      	movs	r3, #0
1000010a:	e004      	b.n	10000116 <Periph_Lock+0xd6>
1000010c:	2300      	movs	r3, #0
1000010e:	e002      	b.n	10000116 <Periph_Lock+0xd6>
10000110:	2300      	movs	r3, #0
10000112:	e000      	b.n	10000116 <Periph_Lock+0xd6>
10000114:	2300      	movs	r3, #0
10000116:	4618      	mov	r0, r3
10000118:	f001 fca6 	bl	10001a68 <HAL_HSEM_FastTake>
1000011c:	4603      	mov	r3, r0
1000011e:	2b00      	cmp	r3, #0
10000120:	d19b      	bne.n	1000005a <Periph_Lock+0x1a>
    }
  }

  return ret;
10000122:	7bfb      	ldrb	r3, [r7, #15]
}
10000124:	4618      	mov	r0, r3
10000126:	3710      	adds	r7, #16
10000128:	46bd      	mov	sp, r7
1000012a:	bd80      	pop	{r7, pc}
1000012c:	50002000 	.word	0x50002000
10000130:	50003000 	.word	0x50003000
10000134:	50004000 	.word	0x50004000
10000138:	50006000 	.word	0x50006000
1000013c:	50007000 	.word	0x50007000
10000140:	50008000 	.word	0x50008000
10000144:	50009000 	.word	0x50009000
10000148:	5000a000 	.word	0x5000a000
1000014c:	5000b000 	.word	0x5000b000
10000150:	5000c000 	.word	0x5000c000
10000154:	54004000 	.word	0x54004000
10000158:	5000d000 	.word	0x5000d000

1000015c <Periph_Unlock>:
  * @brief  The Periph_Unlock released a previously-acquired semaphore which we want to unlock
  * @param  Peripheral: used to identify which peripheral and the related semaphore
  * @retval None
  */
void Periph_Unlock(void* Peripheral)
{
1000015c:	b580      	push	{r7, lr}
1000015e:	b082      	sub	sp, #8
10000160:	af00      	add	r7, sp, #0
10000162:	6078      	str	r0, [r7, #4]
  /* Release HSEM  */
  HAL_HSEM_Release(GET_HSEM_SEM_INDEX(Peripheral), 0);
10000164:	687b      	ldr	r3, [r7, #4]
10000166:	4a2b      	ldr	r2, [pc, #172]	; (10000214 <Periph_Unlock+0xb8>)
10000168:	4293      	cmp	r3, r2
1000016a:	d049      	beq.n	10000200 <Periph_Unlock+0xa4>
1000016c:	687b      	ldr	r3, [r7, #4]
1000016e:	4a2a      	ldr	r2, [pc, #168]	; (10000218 <Periph_Unlock+0xbc>)
10000170:	4293      	cmp	r3, r2
10000172:	d043      	beq.n	100001fc <Periph_Unlock+0xa0>
10000174:	687b      	ldr	r3, [r7, #4]
10000176:	4a29      	ldr	r2, [pc, #164]	; (1000021c <Periph_Unlock+0xc0>)
10000178:	4293      	cmp	r3, r2
1000017a:	d03d      	beq.n	100001f8 <Periph_Unlock+0x9c>
1000017c:	687b      	ldr	r3, [r7, #4]
1000017e:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10000182:	d037      	beq.n	100001f4 <Periph_Unlock+0x98>
10000184:	687b      	ldr	r3, [r7, #4]
10000186:	4a26      	ldr	r2, [pc, #152]	; (10000220 <Periph_Unlock+0xc4>)
10000188:	4293      	cmp	r3, r2
1000018a:	d031      	beq.n	100001f0 <Periph_Unlock+0x94>
1000018c:	687b      	ldr	r3, [r7, #4]
1000018e:	4a25      	ldr	r2, [pc, #148]	; (10000224 <Periph_Unlock+0xc8>)
10000190:	4293      	cmp	r3, r2
10000192:	d02b      	beq.n	100001ec <Periph_Unlock+0x90>
10000194:	687b      	ldr	r3, [r7, #4]
10000196:	4a24      	ldr	r2, [pc, #144]	; (10000228 <Periph_Unlock+0xcc>)
10000198:	4293      	cmp	r3, r2
1000019a:	d025      	beq.n	100001e8 <Periph_Unlock+0x8c>
1000019c:	687b      	ldr	r3, [r7, #4]
1000019e:	4a23      	ldr	r2, [pc, #140]	; (1000022c <Periph_Unlock+0xd0>)
100001a0:	4293      	cmp	r3, r2
100001a2:	d01f      	beq.n	100001e4 <Periph_Unlock+0x88>
100001a4:	687b      	ldr	r3, [r7, #4]
100001a6:	4a22      	ldr	r2, [pc, #136]	; (10000230 <Periph_Unlock+0xd4>)
100001a8:	4293      	cmp	r3, r2
100001aa:	d019      	beq.n	100001e0 <Periph_Unlock+0x84>
100001ac:	687b      	ldr	r3, [r7, #4]
100001ae:	4a21      	ldr	r2, [pc, #132]	; (10000234 <Periph_Unlock+0xd8>)
100001b0:	4293      	cmp	r3, r2
100001b2:	d013      	beq.n	100001dc <Periph_Unlock+0x80>
100001b4:	687b      	ldr	r3, [r7, #4]
100001b6:	4a20      	ldr	r2, [pc, #128]	; (10000238 <Periph_Unlock+0xdc>)
100001b8:	4293      	cmp	r3, r2
100001ba:	d00d      	beq.n	100001d8 <Periph_Unlock+0x7c>
100001bc:	687b      	ldr	r3, [r7, #4]
100001be:	4a1f      	ldr	r2, [pc, #124]	; (1000023c <Periph_Unlock+0xe0>)
100001c0:	4293      	cmp	r3, r2
100001c2:	d007      	beq.n	100001d4 <Periph_Unlock+0x78>
100001c4:	687b      	ldr	r3, [r7, #4]
100001c6:	4a1e      	ldr	r2, [pc, #120]	; (10000240 <Periph_Unlock+0xe4>)
100001c8:	4293      	cmp	r3, r2
100001ca:	d101      	bne.n	100001d0 <Periph_Unlock+0x74>
100001cc:	2301      	movs	r3, #1
100001ce:	e018      	b.n	10000202 <Periph_Unlock+0xa6>
100001d0:	2320      	movs	r3, #32
100001d2:	e016      	b.n	10000202 <Periph_Unlock+0xa6>
100001d4:	2300      	movs	r3, #0
100001d6:	e014      	b.n	10000202 <Periph_Unlock+0xa6>
100001d8:	2300      	movs	r3, #0
100001da:	e012      	b.n	10000202 <Periph_Unlock+0xa6>
100001dc:	2300      	movs	r3, #0
100001de:	e010      	b.n	10000202 <Periph_Unlock+0xa6>
100001e0:	2300      	movs	r3, #0
100001e2:	e00e      	b.n	10000202 <Periph_Unlock+0xa6>
100001e4:	2300      	movs	r3, #0
100001e6:	e00c      	b.n	10000202 <Periph_Unlock+0xa6>
100001e8:	2300      	movs	r3, #0
100001ea:	e00a      	b.n	10000202 <Periph_Unlock+0xa6>
100001ec:	2300      	movs	r3, #0
100001ee:	e008      	b.n	10000202 <Periph_Unlock+0xa6>
100001f0:	2300      	movs	r3, #0
100001f2:	e006      	b.n	10000202 <Periph_Unlock+0xa6>
100001f4:	2300      	movs	r3, #0
100001f6:	e004      	b.n	10000202 <Periph_Unlock+0xa6>
100001f8:	2300      	movs	r3, #0
100001fa:	e002      	b.n	10000202 <Periph_Unlock+0xa6>
100001fc:	2300      	movs	r3, #0
100001fe:	e000      	b.n	10000202 <Periph_Unlock+0xa6>
10000200:	2300      	movs	r3, #0
10000202:	2100      	movs	r1, #0
10000204:	4618      	mov	r0, r3
10000206:	f001 fc47 	bl	10001a98 <HAL_HSEM_Release>

}
1000020a:	bf00      	nop
1000020c:	3708      	adds	r7, #8
1000020e:	46bd      	mov	sp, r7
10000210:	bd80      	pop	{r7, pc}
10000212:	bf00      	nop
10000214:	50002000 	.word	0x50002000
10000218:	50003000 	.word	0x50003000
1000021c:	50004000 	.word	0x50004000
10000220:	50006000 	.word	0x50006000
10000224:	50007000 	.word	0x50007000
10000228:	50008000 	.word	0x50008000
1000022c:	50009000 	.word	0x50009000
10000230:	5000a000 	.word	0x5000a000
10000234:	5000b000 	.word	0x5000b000
10000238:	5000c000 	.word	0x5000c000
1000023c:	54004000 	.word	0x54004000
10000240:	5000d000 	.word	0x5000d000

10000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
10000244:	b580      	push	{r7, lr}
10000246:	b082      	sub	sp, #8
10000248:	af00      	add	r7, sp, #0
	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
1000024a:	f000 fbab 	bl	100009a4 <HAL_Init>

	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
1000024e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000252:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000256:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
1000025a:	f000 f82d 	bl	100002b8 <MX_GPIO_Init>
	BSP_LED_Init(LED7);
1000025e:	2002      	movs	r0, #2
10000260:	f000 fa92 	bl	10000788 <BSP_LED_Init>

	for(int i = 0 ; i < 50 ; i++)
10000264:	2300      	movs	r3, #0
10000266:	607b      	str	r3, [r7, #4]
10000268:	e008      	b.n	1000027c <main+0x38>
	{
		BSP_LED_Toggle(LED7); //to check if the program has been successfully launched by CA7
1000026a:	2002      	movs	r0, #2
1000026c:	f000 fb58 	bl	10000920 <BSP_LED_Toggle>
		HAL_Delay(40);
10000270:	2028      	movs	r0, #40	; 0x28
10000272:	f000 fc07 	bl	10000a84 <HAL_Delay>
	for(int i = 0 ; i < 50 ; i++)
10000276:	687b      	ldr	r3, [r7, #4]
10000278:	3301      	adds	r3, #1
1000027a:	607b      	str	r3, [r7, #4]
1000027c:	687b      	ldr	r3, [r7, #4]
1000027e:	2b31      	cmp	r3, #49	; 0x31
10000280:	ddf3      	ble.n	1000026a <main+0x26>
	}

	/* Init DMA for DLYB to memory data transfers */
	transferErrorDetected = 0;
10000282:	4b09      	ldr	r3, [pc, #36]	; (100002a8 <main+0x64>)
10000284:	2200      	movs	r2, #0
10000286:	601a      	str	r2, [r3, #0]
	MX_DMA_Init();
10000288:	f000 f82c 	bl	100002e4 <MX_DMA_Init>
	/* Select Callbacks functions called after Transfer complete and Transfer error */
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, TransferComplete);
1000028c:	4a07      	ldr	r2, [pc, #28]	; (100002ac <main+0x68>)
1000028e:	2100      	movs	r1, #0
10000290:	4807      	ldr	r0, [pc, #28]	; (100002b0 <main+0x6c>)
10000292:	f001 f85b 	bl	1000134c <HAL_DMA_RegisterCallback>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_ERROR_CB_ID, TransferError);
10000296:	4a07      	ldr	r2, [pc, #28]	; (100002b4 <main+0x70>)
10000298:	2104      	movs	r1, #4
1000029a:	4805      	ldr	r0, [pc, #20]	; (100002b0 <main+0x6c>)
1000029c:	f001 f856 	bl	1000134c <HAL_DMA_RegisterCallback>

	/* Start AES encryption app */
	Compute_AES();
100002a0:	f000 f890 	bl	100003c4 <Compute_AES>

	while(1){	}
100002a4:	e7fe      	b.n	100002a4 <main+0x60>
100002a6:	bf00      	nop
100002a8:	100242e8 	.word	0x100242e8
100002ac:	10000385 	.word	0x10000385
100002b0:	100242f0 	.word	0x100242f0
100002b4:	100003a5 	.word	0x100003a5

100002b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
100002b8:	b480      	push	{r7}
100002ba:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
100002bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002c0:	2204      	movs	r2, #4
100002c2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOH_CLK_ENABLE();
100002c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002ca:	2280      	movs	r2, #128	; 0x80
100002cc:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  __HAL_RCC_GPIOB_CLK_ENABLE();
100002d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002d4:	2202      	movs	r2, #2
100002d6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8

}
100002da:	bf00      	nop
100002dc:	46bd      	mov	sp, r7
100002de:	f85d 7b04 	ldr.w	r7, [sp], #4
100002e2:	4770      	bx	lr

100002e4 <MX_DMA_Init>:
  * @brief Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  * hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
100002e4:	b580      	push	{r7, lr}
100002e6:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
100002e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002ec:	2202      	movs	r2, #2
100002ee:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98
  __HAL_RCC_DMAMUX_CLK_ENABLE();
100002f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100002f6:	2204      	movs	r2, #4
100002f8:	f8c3 2a98 	str.w	r2, [r3, #2712]	; 0xa98

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
100002fc:	4b1f      	ldr	r3, [pc, #124]	; (1000037c <MX_DMA_Init+0x98>)
100002fe:	4a20      	ldr	r2, [pc, #128]	; (10000380 <MX_DMA_Init+0x9c>)
10000300:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Request = DMA_REQUEST_MEM2MEM;   /*DMA_REQUEST_GENERATOR0;*/
10000302:	4b1e      	ldr	r3, [pc, #120]	; (1000037c <MX_DMA_Init+0x98>)
10000304:	2200      	movs	r2, #0
10000306:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;  /*DMA_PERIPH_TO_MEMORY;*/
10000308:	4b1c      	ldr	r3, [pc, #112]	; (1000037c <MX_DMA_Init+0x98>)
1000030a:	2280      	movs	r2, #128	; 0x80
1000030c:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = /*DMA_PINC_ENABLE;*/ DMA_PINC_DISABLE;
1000030e:	4b1b      	ldr	r3, [pc, #108]	; (1000037c <MX_DMA_Init+0x98>)
10000310:	2200      	movs	r2, #0
10000312:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
10000314:	4b19      	ldr	r3, [pc, #100]	; (1000037c <MX_DMA_Init+0x98>)
10000316:	f44f 6280 	mov.w	r2, #1024	; 0x400
1000031a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
1000031c:	4b17      	ldr	r3, [pc, #92]	; (1000037c <MX_DMA_Init+0x98>)
1000031e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
10000322:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
10000324:	4b15      	ldr	r3, [pc, #84]	; (1000037c <MX_DMA_Init+0x98>)
10000326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
1000032a:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
1000032c:	4b13      	ldr	r3, [pc, #76]	; (1000037c <MX_DMA_Init+0x98>)
1000032e:	2200      	movs	r2, #0
10000330:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_VERY_HIGH; /*DMA_PRIORITY_LOW*/;
10000332:	4b12      	ldr	r3, [pc, #72]	; (1000037c <MX_DMA_Init+0x98>)
10000334:	f44f 3240 	mov.w	r2, #196608	; 0x30000
10000338:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
1000033a:	4b10      	ldr	r3, [pc, #64]	; (1000037c <MX_DMA_Init+0x98>)
1000033c:	2204      	movs	r2, #4
1000033e:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
10000340:	4b0e      	ldr	r3, [pc, #56]	; (1000037c <MX_DMA_Init+0x98>)
10000342:	2203      	movs	r2, #3
10000344:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_INC4;
10000346:	4b0d      	ldr	r3, [pc, #52]	; (1000037c <MX_DMA_Init+0x98>)
10000348:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
1000034c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_INC4;
1000034e:	4b0b      	ldr	r3, [pc, #44]	; (1000037c <MX_DMA_Init+0x98>)
10000350:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
10000354:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
10000356:	4809      	ldr	r0, [pc, #36]	; (1000037c <MX_DMA_Init+0x98>)
10000358:	f000 fcc8 	bl	10000cec <HAL_DMA_Init>
1000035c:	4603      	mov	r3, r0
1000035e:	2b00      	cmp	r3, #0
10000360:	d001      	beq.n	10000366 <MX_DMA_Init+0x82>
  {
    Error_Handler();
10000362:	f000 f9a3 	bl	100006ac <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, DEFAULT_IRQ_PRIO, 0);
10000366:	2200      	movs	r2, #0
10000368:	2101      	movs	r1, #1
1000036a:	2038      	movs	r0, #56	; 0x38
1000036c:	f000 fc87 	bl	10000c7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
10000370:	2038      	movs	r0, #56	; 0x38
10000372:	f000 fca0 	bl	10000cb6 <HAL_NVIC_EnableIRQ>

}
10000376:	bf00      	nop
10000378:	bd80      	pop	{r7, pc}
1000037a:	bf00      	nop
1000037c:	100242f0 	.word	0x100242f0
10000380:	48001010 	.word	0x48001010

10000384 <TransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
10000384:	b580      	push	{r7, lr}
10000386:	b082      	sub	sp, #8
10000388:	af00      	add	r7, sp, #0
1000038a:	6078      	str	r0, [r7, #4]
  /* Turn LED7 on: Transfer correct */
	transferComplete = 1;
1000038c:	4b04      	ldr	r3, [pc, #16]	; (100003a0 <TransferComplete+0x1c>)
1000038e:	2201      	movs	r2, #1
10000390:	601a      	str	r2, [r3, #0]
	BSP_LED_On(LED7);
10000392:	2002      	movs	r0, #2
10000394:	f000 fa54 	bl	10000840 <BSP_LED_On>
}
10000398:	bf00      	nop
1000039a:	3708      	adds	r7, #8
1000039c:	46bd      	mov	sp, r7
1000039e:	bd80      	pop	{r7, pc}
100003a0:	10024368 	.word	0x10024368

100003a4 <TransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void TransferError(DMA_HandleTypeDef *DmaHandle)
{
100003a4:	b580      	push	{r7, lr}
100003a6:	b082      	sub	sp, #8
100003a8:	af00      	add	r7, sp, #0
100003aa:	6078      	str	r0, [r7, #4]
	transferErrorDetected = 1;
100003ac:	4b04      	ldr	r3, [pc, #16]	; (100003c0 <TransferError+0x1c>)
100003ae:	2201      	movs	r2, #1
100003b0:	601a      	str	r2, [r3, #0]
	Error_Handler();
100003b2:	f000 f97b 	bl	100006ac <Error_Handler>
}
100003b6:	bf00      	nop
100003b8:	3708      	adds	r7, #8
100003ba:	46bd      	mov	sp, r7
100003bc:	bd80      	pop	{r7, pc}
100003be:	bf00      	nop
100003c0:	100242e8 	.word	0x100242e8

100003c4 <Compute_AES>:
  * @note   This function imports a CA7 plaintext from a shared memory space, it then
  *         computes AES and save the ciphertext inside the memory. It also handles DMA DLYB sampling
  * @retval None
 */
void Compute_AES(void)
{
100003c4:	b590      	push	{r4, r7, lr}
100003c6:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
100003ca:	af00      	add	r7, sp, #0
	AES_KEY_OSSL keydma;
	struct AES_ctx ctx;
	uint8_t ptArray[16];
	uint8_t ctArray[16];
	uint8_t exKeyArray[16] = {0x2d,0xcf,0x46,0x29,0x04,0xb4,0x78,0xd8,0x68,0xa7,0xff,0x3f,0x2b,0xf1,0xfc,0xd9};
100003cc:	1d3b      	adds	r3, r7, #4
100003ce:	4aac      	ldr	r2, [pc, #688]	; (10000680 <Compute_AES+0x2bc>)
100003d0:	461c      	mov	r4, r3
100003d2:	4613      	mov	r3, r2
100003d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
100003d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t temp32to8 = 0;
100003da:	2300      	movs	r3, #0
100003dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	uint32_t temp8to32 = 0;
100003e0:	2300      	movs	r3, #0
100003e2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t nSample = 0;
100003e6:	2300      	movs	r3, #0
100003e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

	//AES key expansion
	AES_init_ctx(&ctx, exKeyArray);
100003ec:	1d3a      	adds	r2, r7, #4
100003ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
100003f2:	4611      	mov	r1, r2
100003f4:	4618      	mov	r0, r3
100003f6:	f002 fa63 	bl	100028c0 <AES_init_ctx>
	AES_set_encrypt_key(exKeyArray,128,&keydma);
100003fa:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
100003fe:	1d3b      	adds	r3, r7, #4
10000400:	2180      	movs	r1, #128	; 0x80
10000402:	4618      	mov	r0, r3
10000404:	f001 fcb2 	bl	10001d6c <AES_set_encrypt_key>


	while(1)
	{
		while(Read_Register(DDR_BASE_ADDR) != 1){
10000408:	e00b      	b.n	10000422 <Compute_AES+0x5e>
			nSample = Read_Register(DDR_BASE_ADDR+0x30);
1000040a:	489e      	ldr	r0, [pc, #632]	; (10000684 <Compute_AES+0x2c0>)
1000040c:	f000 f968 	bl	100006e0 <Read_Register>
10000410:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
			selectCrypto = Read_Register(DDR_BASE_ADDR+0x34);
10000414:	489c      	ldr	r0, [pc, #624]	; (10000688 <Compute_AES+0x2c4>)
10000416:	f000 f963 	bl	100006e0 <Read_Register>
1000041a:	4603      	mov	r3, r0
1000041c:	b2da      	uxtb	r2, r3
1000041e:	4b9b      	ldr	r3, [pc, #620]	; (1000068c <Compute_AES+0x2c8>)
10000420:	701a      	strb	r2, [r3, #0]
		while(Read_Register(DDR_BASE_ADDR) != 1){
10000422:	489b      	ldr	r0, [pc, #620]	; (10000690 <Compute_AES+0x2cc>)
10000424:	f000 f95c 	bl	100006e0 <Read_Register>
10000428:	4603      	mov	r3, r0
1000042a:	2b01      	cmp	r3, #1
1000042c:	d1ed      	bne.n	1000040a <Compute_AES+0x46>
		} // Wait for CA7 *init*

		//import plaintext
		for(int u = 0 ; u < 4 ; u++)
1000042e:	2300      	movs	r3, #0
10000430:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
10000434:	e030      	b.n	10000498 <Compute_AES+0xd4>
		{
			temp32to8 = Read_Register(DDR_BASE_ADDR+0x4+u*4);
10000436:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
1000043a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
1000043e:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
10000442:	009b      	lsls	r3, r3, #2
10000444:	4618      	mov	r0, r3
10000446:	f000 f94b 	bl	100006e0 <Read_Register>
1000044a:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8

			for(int v = 0 ; v < 4 ; v++)
1000044e:	2300      	movs	r3, #0
10000450:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
10000454:	e017      	b.n	10000486 <Compute_AES+0xc2>
			{
				ptArray[u*4+v] = (temp32to8 >> (24-v*8)) & 0xff;
10000456:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
1000045a:	f1c3 0303 	rsb	r3, r3, #3
1000045e:	00db      	lsls	r3, r3, #3
10000460:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
10000464:	fa22 f103 	lsr.w	r1, r2, r3
10000468:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
1000046c:	009a      	lsls	r2, r3, #2
1000046e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
10000472:	4413      	add	r3, r2
10000474:	b2c9      	uxtb	r1, r1
10000476:	f107 0224 	add.w	r2, r7, #36	; 0x24
1000047a:	54d1      	strb	r1, [r2, r3]
			for(int v = 0 ; v < 4 ; v++)
1000047c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
10000480:	3301      	adds	r3, #1
10000482:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
10000486:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
1000048a:	2b03      	cmp	r3, #3
1000048c:	dde3      	ble.n	10000456 <Compute_AES+0x92>
		for(int u = 0 ; u < 4 ; u++)
1000048e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
10000492:	3301      	adds	r3, #1
10000494:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
10000498:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
1000049c:	2b03      	cmp	r3, #3
1000049e:	ddca      	ble.n	10000436 <Compute_AES+0x72>
			}
		}

		Write_Register(DDR_BASE_ADDR,0x2); //send *ready* to CA7
100004a0:	2102      	movs	r1, #2
100004a2:	487b      	ldr	r0, [pc, #492]	; (10000690 <Compute_AES+0x2cc>)
100004a4:	f000 f90c 	bl	100006c0 <Write_Register>

		while(Read_Register(DDR_BASE_ADDR) != 3){} // Wait for CA7 *start*
100004a8:	bf00      	nop
100004aa:	4879      	ldr	r0, [pc, #484]	; (10000690 <Compute_AES+0x2cc>)
100004ac:	f000 f918 	bl	100006e0 <Read_Register>
100004b0:	4603      	mov	r3, r0
100004b2:	2b03      	cmp	r3, #3
100004b4:	d1f9      	bne.n	100004aa <Compute_AES+0xe6>

		/* STart DMA transaction */
		transferComplete = 0;
100004b6:	4b77      	ldr	r3, [pc, #476]	; (10000694 <Compute_AES+0x2d0>)
100004b8:	2200      	movs	r2, #0
100004ba:	601a      	str	r2, [r3, #0]

		// Launch DMA
		if (HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, DLYB_ADDR + 0x4, (uint32_t)&aDST_Buffer, nSample) != HAL_OK){Error_Handler();}
100004bc:	4a76      	ldr	r2, [pc, #472]	; (10000698 <Compute_AES+0x2d4>)
100004be:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
100004c2:	4976      	ldr	r1, [pc, #472]	; (1000069c <Compute_AES+0x2d8>)
100004c4:	4876      	ldr	r0, [pc, #472]	; (100006a0 <Compute_AES+0x2dc>)
100004c6:	f000 fd0d 	bl	10000ee4 <HAL_DMA_Start_IT>
100004ca:	4603      	mov	r3, r0
100004cc:	2b00      	cmp	r3, #0
100004ce:	d001      	beq.n	100004d4 <Compute_AES+0x110>
100004d0:	f000 f8ec 	bl	100006ac <Error_Handler>

		for(int i = 0 ; i < 30 ; i++); //delay for visualization
100004d4:	2300      	movs	r3, #0
100004d6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
100004da:	e004      	b.n	100004e6 <Compute_AES+0x122>
100004dc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
100004e0:	3301      	adds	r3, #1
100004e2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
100004e6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
100004ea:	2b1d      	cmp	r3, #29
100004ec:	ddf6      	ble.n	100004dc <Compute_AES+0x118>

		if(selectCrypto)
100004ee:	4b67      	ldr	r3, [pc, #412]	; (1000068c <Compute_AES+0x2c8>)
100004f0:	781b      	ldrb	r3, [r3, #0]
100004f2:	2b00      	cmp	r3, #0
100004f4:	d008      	beq.n	10000508 <Compute_AES+0x144>
		{
			AES_ECB_encrypt(&ctx,ptArray); //tiny AES
100004f6:	f107 0224 	add.w	r2, r7, #36	; 0x24
100004fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
100004fe:	4611      	mov	r1, r2
10000500:	4618      	mov	r0, r3
10000502:	f002 fb99 	bl	10002c38 <AES_ECB_encrypt>
10000506:	e008      	b.n	1000051a <Compute_AES+0x156>
		}
		else
		{
			AES_encrypt(ptArray,ctArray,&keydma); //openSSL AES
10000508:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
1000050c:	f107 0114 	add.w	r1, r7, #20
10000510:	f107 0324 	add.w	r3, r7, #36	; 0x24
10000514:	4618      	mov	r0, r3
10000516:	f001 fe99 	bl	1000224c <AES_encrypt>
		}

		for(int i = 0 ; i < 30 ; i++);
1000051a:	2300      	movs	r3, #0
1000051c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
10000520:	e004      	b.n	1000052c <Compute_AES+0x168>
10000522:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
10000526:	3301      	adds	r3, #1
10000528:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
1000052c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
10000530:	2b1d      	cmp	r3, #29
10000532:	ddf6      	ble.n	10000522 <Compute_AES+0x15e>

		//wait for DMA to end transfer
		while(transferComplete == 0){}
10000534:	bf00      	nop
10000536:	4b57      	ldr	r3, [pc, #348]	; (10000694 <Compute_AES+0x2d0>)
10000538:	681b      	ldr	r3, [r3, #0]
1000053a:	2b00      	cmp	r3, #0
1000053c:	d0fb      	beq.n	10000536 <Compute_AES+0x172>

		//export local DMA samples to DRAM memory for CA7 to pick up
		for(int i = 0 ; i < nSample ; i++)
1000053e:	2300      	movs	r3, #0
10000540:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
10000544:	e012      	b.n	1000056c <Compute_AES+0x1a8>
		{
			//printf("test");
			Write_Register(DDR_BASE_ADDR+0x40+i*4,aDST_Buffer[i]);
10000546:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
1000054a:	4b56      	ldr	r3, [pc, #344]	; (100006a4 <Compute_AES+0x2e0>)
1000054c:	4413      	add	r3, r2
1000054e:	009b      	lsls	r3, r3, #2
10000550:	4618      	mov	r0, r3
10000552:	4a51      	ldr	r2, [pc, #324]	; (10000698 <Compute_AES+0x2d4>)
10000554:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
10000558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000055c:	4619      	mov	r1, r3
1000055e:	f000 f8af 	bl	100006c0 <Write_Register>
		for(int i = 0 ; i < nSample ; i++)
10000562:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
10000566:	3301      	adds	r3, #1
10000568:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
1000056c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
10000570:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
10000574:	429a      	cmp	r2, r3
10000576:	d8e6      	bhi.n	10000546 <Compute_AES+0x182>
		}

		//export ciphertext
		if(selectCrypto)
10000578:	4b44      	ldr	r3, [pc, #272]	; (1000068c <Compute_AES+0x2c8>)
1000057a:	781b      	ldrb	r3, [r3, #0]
1000057c:	2b00      	cmp	r3, #0
1000057e:	d03d      	beq.n	100005fc <Compute_AES+0x238>
		{
			for(int u = 0 ; u < 4 ; u++)
10000580:	2300      	movs	r3, #0
10000582:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
10000586:	e034      	b.n	100005f2 <Compute_AES+0x22e>
			{
				temp8to32=0;
10000588:	2300      	movs	r3, #0
1000058a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				for(int v = 0 ; v < 4 ; v++){
1000058e:	2300      	movs	r3, #0
10000590:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
10000594:	e01a      	b.n	100005cc <Compute_AES+0x208>
					temp8to32 |= (uint32_t)(ptArray[u*4+v])<<(24-8*v);
10000596:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
1000059a:	009a      	lsls	r2, r3, #2
1000059c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
100005a0:	4413      	add	r3, r2
100005a2:	f107 0224 	add.w	r2, r7, #36	; 0x24
100005a6:	5cd3      	ldrb	r3, [r2, r3]
100005a8:	461a      	mov	r2, r3
100005aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
100005ae:	f1c3 0303 	rsb	r3, r3, #3
100005b2:	00db      	lsls	r3, r3, #3
100005b4:	fa02 f303 	lsl.w	r3, r2, r3
100005b8:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
100005bc:	4313      	orrs	r3, r2
100005be:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				for(int v = 0 ; v < 4 ; v++){
100005c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
100005c6:	3301      	adds	r3, #1
100005c8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
100005cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
100005d0:	2b03      	cmp	r3, #3
100005d2:	dde0      	ble.n	10000596 <Compute_AES+0x1d2>
				}
				Write_Register(DDR_BASE_ADDR+0x14+u*4,temp8to32);
100005d4:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
100005d8:	4b33      	ldr	r3, [pc, #204]	; (100006a8 <Compute_AES+0x2e4>)
100005da:	4413      	add	r3, r2
100005dc:	009b      	lsls	r3, r3, #2
100005de:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
100005e2:	4618      	mov	r0, r3
100005e4:	f000 f86c 	bl	100006c0 <Write_Register>
			for(int u = 0 ; u < 4 ; u++)
100005e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
100005ec:	3301      	adds	r3, #1
100005ee:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
100005f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
100005f6:	2b03      	cmp	r3, #3
100005f8:	ddc6      	ble.n	10000588 <Compute_AES+0x1c4>
100005fa:	e03c      	b.n	10000676 <Compute_AES+0x2b2>
			}
		}
		else
		{
			for(int u = 0 ; u < 4 ; u++)
100005fc:	2300      	movs	r3, #0
100005fe:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
10000602:	e034      	b.n	1000066e <Compute_AES+0x2aa>
			{
				temp8to32=0;
10000604:	2300      	movs	r3, #0
10000606:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				for(int v = 0 ; v < 4 ; v++){
1000060a:	2300      	movs	r3, #0
1000060c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
10000610:	e01a      	b.n	10000648 <Compute_AES+0x284>
					temp8to32 |= (uint32_t)(ctArray[u*4+v])<<(24-8*v);
10000612:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
10000616:	009a      	lsls	r2, r3, #2
10000618:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
1000061c:	4413      	add	r3, r2
1000061e:	f107 0214 	add.w	r2, r7, #20
10000622:	5cd3      	ldrb	r3, [r2, r3]
10000624:	461a      	mov	r2, r3
10000626:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
1000062a:	f1c3 0303 	rsb	r3, r3, #3
1000062e:	00db      	lsls	r3, r3, #3
10000630:	fa02 f303 	lsl.w	r3, r2, r3
10000634:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
10000638:	4313      	orrs	r3, r2
1000063a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
				for(int v = 0 ; v < 4 ; v++){
1000063e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
10000642:	3301      	adds	r3, #1
10000644:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
10000648:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
1000064c:	2b03      	cmp	r3, #3
1000064e:	dde0      	ble.n	10000612 <Compute_AES+0x24e>
				}
				Write_Register(DDR_BASE_ADDR+0x14+u*4,temp8to32);
10000650:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
10000654:	4b14      	ldr	r3, [pc, #80]	; (100006a8 <Compute_AES+0x2e4>)
10000656:	4413      	add	r3, r2
10000658:	009b      	lsls	r3, r3, #2
1000065a:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
1000065e:	4618      	mov	r0, r3
10000660:	f000 f82e 	bl	100006c0 <Write_Register>
			for(int u = 0 ; u < 4 ; u++)
10000664:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
10000668:	3301      	adds	r3, #1
1000066a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
1000066e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
10000672:	2b03      	cmp	r3, #3
10000674:	ddc6      	ble.n	10000604 <Compute_AES+0x240>
			}
		}
		Write_Register(DDR_BASE_ADDR,0x4); //send *end* to CA7
10000676:	2104      	movs	r1, #4
10000678:	4805      	ldr	r0, [pc, #20]	; (10000690 <Compute_AES+0x2cc>)
1000067a:	f000 f821 	bl	100006c0 <Write_Register>
		while(Read_Register(DDR_BASE_ADDR) != 1){
1000067e:	e6d0      	b.n	10000422 <Compute_AES+0x5e>
10000680:	10002dfc 	.word	0x10002dfc
10000684:	10040030 	.word	0x10040030
10000688:	10040034 	.word	0x10040034
1000068c:	100242ec 	.word	0x100242ec
10000690:	10040000 	.word	0x10040000
10000694:	10024368 	.word	0x10024368
10000698:	10020468 	.word	0x10020468
1000069c:	58008004 	.word	0x58008004
100006a0:	100242f0 	.word	0x100242f0
100006a4:	04010010 	.word	0x04010010
100006a8:	04010005 	.word	0x04010005

100006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
100006ac:	b580      	push	{r7, lr}
100006ae:	af00      	add	r7, sp, #0
	  BSP_LED_Toggle(LED7);
100006b0:	2002      	movs	r0, #2
100006b2:	f000 f935 	bl	10000920 <BSP_LED_Toggle>
	  HAL_Delay(100);
100006b6:	2064      	movs	r0, #100	; 0x64
100006b8:	f000 f9e4 	bl	10000a84 <HAL_Delay>
}
100006bc:	bf00      	nop
100006be:	bd80      	pop	{r7, pc}

100006c0 <Write_Register>:

/*
 *
 */
void Write_Register(uintptr_t Addr, uint32_t Value)
{
100006c0:	b480      	push	{r7}
100006c2:	b085      	sub	sp, #20
100006c4:	af00      	add	r7, sp, #0
100006c6:	6078      	str	r0, [r7, #4]
100006c8:	6039      	str	r1, [r7, #0]
    volatile uint32_t *LocalAddr = (volatile uint32_t *)Addr;
100006ca:	687b      	ldr	r3, [r7, #4]
100006cc:	60fb      	str	r3, [r7, #12]
    *LocalAddr = Value;
100006ce:	68fb      	ldr	r3, [r7, #12]
100006d0:	683a      	ldr	r2, [r7, #0]
100006d2:	601a      	str	r2, [r3, #0]
}
100006d4:	bf00      	nop
100006d6:	3714      	adds	r7, #20
100006d8:	46bd      	mov	sp, r7
100006da:	f85d 7b04 	ldr.w	r7, [sp], #4
100006de:	4770      	bx	lr

100006e0 <Read_Register>:

/*
 *
 */
uint32_t Read_Register(uintptr_t Addr)
{
100006e0:	b480      	push	{r7}
100006e2:	b083      	sub	sp, #12
100006e4:	af00      	add	r7, sp, #0
100006e6:	6078      	str	r0, [r7, #4]
	return *(volatile uint32_t *) Addr;
100006e8:	687b      	ldr	r3, [r7, #4]
100006ea:	681b      	ldr	r3, [r3, #0]
}
100006ec:	4618      	mov	r0, r3
100006ee:	370c      	adds	r7, #12
100006f0:	46bd      	mov	sp, r7
100006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
100006f6:	4770      	bx	lr

100006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
100006f8:	b480      	push	{r7}
100006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
100006fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10000700:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000704:	f8c3 2aa0 	str.w	r2, [r3, #2720]	; 0xaa0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
10000708:	bf00      	nop
1000070a:	46bd      	mov	sp, r7
1000070c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000710:	4770      	bx	lr

10000712 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
10000712:	b480      	push	{r7}
10000714:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
10000716:	bf00      	nop
10000718:	46bd      	mov	sp, r7
1000071a:	f85d 7b04 	ldr.w	r7, [sp], #4
1000071e:	4770      	bx	lr

10000720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
10000720:	b480      	push	{r7}
10000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
10000724:	e7fe      	b.n	10000724 <HardFault_Handler+0x4>

10000726 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
10000726:	b480      	push	{r7}
10000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
1000072a:	e7fe      	b.n	1000072a <MemManage_Handler+0x4>

1000072c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
1000072c:	b480      	push	{r7}
1000072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
10000730:	e7fe      	b.n	10000730 <BusFault_Handler+0x4>

10000732 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
10000732:	b480      	push	{r7}
10000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
10000736:	e7fe      	b.n	10000736 <UsageFault_Handler+0x4>

10000738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
10000738:	b480      	push	{r7}
1000073a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
1000073c:	bf00      	nop
1000073e:	46bd      	mov	sp, r7
10000740:	f85d 7b04 	ldr.w	r7, [sp], #4
10000744:	4770      	bx	lr

10000746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
10000746:	b480      	push	{r7}
10000748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
1000074a:	bf00      	nop
1000074c:	46bd      	mov	sp, r7
1000074e:	f85d 7b04 	ldr.w	r7, [sp], #4
10000752:	4770      	bx	lr

10000754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
10000754:	b480      	push	{r7}
10000756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
10000758:	bf00      	nop
1000075a:	46bd      	mov	sp, r7
1000075c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000760:	4770      	bx	lr

10000762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
10000762:	b580      	push	{r7, lr}
10000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
10000766:	f000 f96d 	bl	10000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
1000076a:	bf00      	nop
1000076c:	bd80      	pop	{r7, pc}
	...

10000770 <DMA2_Stream0_IRQHandler>:

/**
* @brief This function handles DMA2 stream0 global interrupt.
*/
void DMA2_Stream0_IRQHandler(void)
{
10000770:	b580      	push	{r7, lr}
10000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
10000774:	4802      	ldr	r0, [pc, #8]	; (10000780 <DMA2_Stream0_IRQHandler+0x10>)
10000776:	f000 fc3b 	bl	10000ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
1000077a:	bf00      	nop
1000077c:	bd80      	pop	{r7, pc}
1000077e:	bf00      	nop
10000780:	100242f0 	.word	0x100242f0

10000784 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
10000784:	e7fe      	b.n	10000784 <ADC1_IRQHandler>
	...

10000788 <BSP_LED_Init>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
10000788:	b580      	push	{r7, lr}
1000078a:	b088      	sub	sp, #32
1000078c:	af00      	add	r7, sp, #0
1000078e:	4603      	mov	r3, r0
10000790:	71fb      	strb	r3, [r7, #7]
int32_t  status = BSP_ERROR_NONE;
10000792:	2300      	movs	r3, #0
10000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if(Led == LED6)
10000796:	79fb      	ldrb	r3, [r7, #7]
10000798:	2b00      	cmp	r3, #0
1000079a:	d105      	bne.n	100007a8 <BSP_LED_Init+0x20>
  {
    LED6_GPIO_CLK_ENABLE();
1000079c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007a0:	2201      	movs	r2, #1
100007a2:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100007a6:	e019      	b.n	100007dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED5)
100007a8:	79fb      	ldrb	r3, [r7, #7]
100007aa:	2b01      	cmp	r3, #1
100007ac:	d105      	bne.n	100007ba <BSP_LED_Init+0x32>
  {
    LED5_GPIO_CLK_ENABLE();
100007ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007b2:	2201      	movs	r2, #1
100007b4:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100007b8:	e010      	b.n	100007dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED7)
100007ba:	79fb      	ldrb	r3, [r7, #7]
100007bc:	2b02      	cmp	r3, #2
100007be:	d105      	bne.n	100007cc <BSP_LED_Init+0x44>
  {
    LED7_GPIO_CLK_ENABLE();
100007c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007c4:	2280      	movs	r2, #128	; 0x80
100007c6:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
100007ca:	e007      	b.n	100007dc <BSP_LED_Init+0x54>
  }
  else if (Led == LED8)
100007cc:	79fb      	ldrb	r3, [r7, #7]
100007ce:	2b03      	cmp	r3, #3
100007d0:	d104      	bne.n	100007dc <BSP_LED_Init+0x54>
  {
    LED8_GPIO_CLK_ENABLE();
100007d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
100007d6:	2208      	movs	r2, #8
100007d8:	f8c3 2aa8 	str.w	r2, [r3, #2728]	; 0xaa8
  }

    /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
100007dc:	79fb      	ldrb	r3, [r7, #7]
100007de:	4a16      	ldr	r2, [pc, #88]	; (10000838 <BSP_LED_Init+0xb0>)
100007e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100007e4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
100007e6:	2301      	movs	r3, #1
100007e8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
100007ea:	2301      	movs	r3, #1
100007ec:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
100007ee:	2303      	movs	r3, #3
100007f0:	617b      	str	r3, [r7, #20]
  BSP_ENTER_CRITICAL_SECTION(LED_PORT[Led]);
100007f2:	79fb      	ldrb	r3, [r7, #7]
100007f4:	4a11      	ldr	r2, [pc, #68]	; (1000083c <BSP_LED_Init+0xb4>)
100007f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100007fa:	2164      	movs	r1, #100	; 0x64
100007fc:	4618      	mov	r0, r3
100007fe:	f7ff fc1f 	bl	10000040 <Periph_Lock>
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
10000802:	79fb      	ldrb	r3, [r7, #7]
10000804:	4a0d      	ldr	r2, [pc, #52]	; (1000083c <BSP_LED_Init+0xb4>)
10000806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000080a:	f107 0208 	add.w	r2, r7, #8
1000080e:	4611      	mov	r1, r2
10000810:	4618      	mov	r0, r3
10000812:	f000 ff4f 	bl	100016b4 <HAL_GPIO_Init>
  BSP_EXIT_CRITICAL_SECTION(LED_PORT[Led]);
10000816:	79fb      	ldrb	r3, [r7, #7]
10000818:	4a08      	ldr	r2, [pc, #32]	; (1000083c <BSP_LED_Init+0xb4>)
1000081a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000081e:	4618      	mov	r0, r3
10000820:	f7ff fc9c 	bl	1000015c <Periph_Unlock>
  
  /* By default, turn off LED */
  BSP_LED_Off(Led);
10000824:	79fb      	ldrb	r3, [r7, #7]
10000826:	4618      	mov	r0, r3
10000828:	f000 f842 	bl	100008b0 <BSP_LED_Off>

return status;
1000082c:	69fb      	ldr	r3, [r7, #28]
}
1000082e:	4618      	mov	r0, r3
10000830:	3720      	adds	r7, #32
10000832:	46bd      	mov	sp, r7
10000834:	bd80      	pop	{r7, pc}
10000836:	bf00      	nop
10000838:	10002e0c 	.word	0x10002e0c
1000083c:	10020000 	.word	0x10020000

10000840 <BSP_LED_On>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
10000840:	b580      	push	{r7, lr}
10000842:	b084      	sub	sp, #16
10000844:	af00      	add	r7, sp, #0
10000846:	4603      	mov	r3, r0
10000848:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000084a:	2300      	movs	r3, #0
1000084c:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
1000084e:	79fb      	ldrb	r3, [r7, #7]
10000850:	2b01      	cmp	r3, #1
10000852:	d002      	beq.n	1000085a <BSP_LED_On+0x1a>
10000854:	79fb      	ldrb	r3, [r7, #7]
10000856:	2b00      	cmp	r3, #0
10000858:	d10d      	bne.n	10000876 <BSP_LED_On+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
1000085a:	79fb      	ldrb	r3, [r7, #7]
1000085c:	4a12      	ldr	r2, [pc, #72]	; (100008a8 <BSP_LED_On+0x68>)
1000085e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10000862:	79fb      	ldrb	r3, [r7, #7]
10000864:	4a11      	ldr	r2, [pc, #68]	; (100008ac <BSP_LED_On+0x6c>)
10000866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000086a:	b29b      	uxth	r3, r3
1000086c:	2200      	movs	r2, #0
1000086e:	4619      	mov	r1, r3
10000870:	f001 f8c8 	bl	10001a04 <HAL_GPIO_WritePin>
10000874:	e012      	b.n	1000089c <BSP_LED_On+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
10000876:	79fb      	ldrb	r3, [r7, #7]
10000878:	2b02      	cmp	r3, #2
1000087a:	d002      	beq.n	10000882 <BSP_LED_On+0x42>
1000087c:	79fb      	ldrb	r3, [r7, #7]
1000087e:	2b03      	cmp	r3, #3
10000880:	d10c      	bne.n	1000089c <BSP_LED_On+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
10000882:	79fb      	ldrb	r3, [r7, #7]
10000884:	4a08      	ldr	r2, [pc, #32]	; (100008a8 <BSP_LED_On+0x68>)
10000886:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
1000088a:	79fb      	ldrb	r3, [r7, #7]
1000088c:	4a07      	ldr	r2, [pc, #28]	; (100008ac <BSP_LED_On+0x6c>)
1000088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000892:	b29b      	uxth	r3, r3
10000894:	2201      	movs	r2, #1
10000896:	4619      	mov	r1, r3
10000898:	f001 f8b4 	bl	10001a04 <HAL_GPIO_WritePin>
  }
  return status;
1000089c:	68fb      	ldr	r3, [r7, #12]
}
1000089e:	4618      	mov	r0, r3
100008a0:	3710      	adds	r7, #16
100008a2:	46bd      	mov	sp, r7
100008a4:	bd80      	pop	{r7, pc}
100008a6:	bf00      	nop
100008a8:	10020000 	.word	0x10020000
100008ac:	10002e0c 	.word	0x10002e0c

100008b0 <BSP_LED_Off>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
100008b0:	b580      	push	{r7, lr}
100008b2:	b084      	sub	sp, #16
100008b4:	af00      	add	r7, sp, #0
100008b6:	4603      	mov	r3, r0
100008b8:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
100008ba:	2300      	movs	r3, #0
100008bc:	60fb      	str	r3, [r7, #12]
  if((Led == LED5) || (Led == LED6))
100008be:	79fb      	ldrb	r3, [r7, #7]
100008c0:	2b01      	cmp	r3, #1
100008c2:	d002      	beq.n	100008ca <BSP_LED_Off+0x1a>
100008c4:	79fb      	ldrb	r3, [r7, #7]
100008c6:	2b00      	cmp	r3, #0
100008c8:	d10d      	bne.n	100008e6 <BSP_LED_Off+0x36>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
100008ca:	79fb      	ldrb	r3, [r7, #7]
100008cc:	4a12      	ldr	r2, [pc, #72]	; (10000918 <BSP_LED_Off+0x68>)
100008ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100008d2:	79fb      	ldrb	r3, [r7, #7]
100008d4:	4a11      	ldr	r2, [pc, #68]	; (1000091c <BSP_LED_Off+0x6c>)
100008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100008da:	b29b      	uxth	r3, r3
100008dc:	2201      	movs	r2, #1
100008de:	4619      	mov	r1, r3
100008e0:	f001 f890 	bl	10001a04 <HAL_GPIO_WritePin>
100008e4:	e012      	b.n	1000090c <BSP_LED_Off+0x5c>
  }
  else if ((Led == LED7) || (Led == LED8))
100008e6:	79fb      	ldrb	r3, [r7, #7]
100008e8:	2b02      	cmp	r3, #2
100008ea:	d002      	beq.n	100008f2 <BSP_LED_Off+0x42>
100008ec:	79fb      	ldrb	r3, [r7, #7]
100008ee:	2b03      	cmp	r3, #3
100008f0:	d10c      	bne.n	1000090c <BSP_LED_Off+0x5c>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
100008f2:	79fb      	ldrb	r3, [r7, #7]
100008f4:	4a08      	ldr	r2, [pc, #32]	; (10000918 <BSP_LED_Off+0x68>)
100008f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
100008fa:	79fb      	ldrb	r3, [r7, #7]
100008fc:	4a07      	ldr	r2, [pc, #28]	; (1000091c <BSP_LED_Off+0x6c>)
100008fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10000902:	b29b      	uxth	r3, r3
10000904:	2200      	movs	r2, #0
10000906:	4619      	mov	r1, r3
10000908:	f001 f87c 	bl	10001a04 <HAL_GPIO_WritePin>
  }

  return status;
1000090c:	68fb      	ldr	r3, [r7, #12]
}
1000090e:	4618      	mov	r0, r3
10000910:	3710      	adds	r7, #16
10000912:	46bd      	mov	sp, r7
10000914:	bd80      	pop	{r7, pc}
10000916:	bf00      	nop
10000918:	10020000 	.word	0x10020000
1000091c:	10002e0c 	.word	0x10002e0c

10000920 <BSP_LED_Toggle>:
  *            @arg  LED6
  *            @arg  LED7
  *            @arg  LED8
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
10000920:	b580      	push	{r7, lr}
10000922:	b084      	sub	sp, #16
10000924:	af00      	add	r7, sp, #0
10000926:	4603      	mov	r3, r0
10000928:	71fb      	strb	r3, [r7, #7]
  int32_t  status = BSP_ERROR_NONE;
1000092a:	2300      	movs	r3, #0
1000092c:	60fb      	str	r3, [r7, #12]
  /* Toggle GPIO Led Pin */
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
1000092e:	79fb      	ldrb	r3, [r7, #7]
10000930:	4a07      	ldr	r2, [pc, #28]	; (10000950 <BSP_LED_Toggle+0x30>)
10000932:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
10000936:	79fb      	ldrb	r3, [r7, #7]
10000938:	4a06      	ldr	r2, [pc, #24]	; (10000954 <BSP_LED_Toggle+0x34>)
1000093a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000093e:	b29b      	uxth	r3, r3
10000940:	4619      	mov	r1, r3
10000942:	f001 f878 	bl	10001a36 <HAL_GPIO_TogglePin>
  return status;
10000946:	68fb      	ldr	r3, [r7, #12]
}
10000948:	4618      	mov	r0, r3
1000094a:	3710      	adds	r7, #16
1000094c:	46bd      	mov	sp, r7
1000094e:	bd80      	pop	{r7, pc}
10000950:	10020000 	.word	0x10020000
10000954:	10002e0c 	.word	0x10002e0c

10000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
10000958:	b480      	push	{r7}
1000095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if defined (CORE_CM4)
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1000095c:	4b0f      	ldr	r3, [pc, #60]	; (1000099c <SystemInit+0x44>)
1000095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
10000962:	4a0e      	ldr	r2, [pc, #56]	; (1000099c <SystemInit+0x44>)
10000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
10000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (VECT_TAB_SRAM)
  SCB->VTOR = MCU_AHB_SRAM | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif
  /* Disable all interrupts and events */
  CLEAR_REG(EXTI_C2->IMR1);
1000096c:	4b0c      	ldr	r3, [pc, #48]	; (100009a0 <SystemInit+0x48>)
1000096e:	2200      	movs	r2, #0
10000970:	601a      	str	r2, [r3, #0]
  CLEAR_REG(EXTI_C2->IMR2);
10000972:	4b0b      	ldr	r3, [pc, #44]	; (100009a0 <SystemInit+0x48>)
10000974:	2200      	movs	r2, #0
10000976:	611a      	str	r2, [r3, #16]
  CLEAR_REG(EXTI_C2->IMR3);
10000978:	4b09      	ldr	r3, [pc, #36]	; (100009a0 <SystemInit+0x48>)
1000097a:	2200      	movs	r2, #0
1000097c:	621a      	str	r2, [r3, #32]
  CLEAR_REG(EXTI_C2->EMR1);
1000097e:	4b08      	ldr	r3, [pc, #32]	; (100009a0 <SystemInit+0x48>)
10000980:	2200      	movs	r2, #0
10000982:	605a      	str	r2, [r3, #4]
  CLEAR_REG(EXTI_C2->EMR2);
10000984:	4b06      	ldr	r3, [pc, #24]	; (100009a0 <SystemInit+0x48>)
10000986:	2200      	movs	r2, #0
10000988:	615a      	str	r2, [r3, #20]
  CLEAR_REG(EXTI_C2->EMR3);
1000098a:	4b05      	ldr	r3, [pc, #20]	; (100009a0 <SystemInit+0x48>)
1000098c:	2200      	movs	r2, #0
1000098e:	625a      	str	r2, [r3, #36]	; 0x24
#else
#error Please #define CORE_CM4
#endif	                         
}
10000990:	bf00      	nop
10000992:	46bd      	mov	sp, r7
10000994:	f85d 7b04 	ldr.w	r7, [sp], #4
10000998:	4770      	bx	lr
1000099a:	bf00      	nop
1000099c:	e000ed00 	.word	0xe000ed00
100009a0:	5000d0c0 	.word	0x5000d0c0

100009a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
100009a4:	b580      	push	{r7, lr}
100009a6:	af00      	add	r7, sp, #0
  /* Set Interrupt Group Priority */
#if defined (CORE_CM4)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
100009a8:	2003      	movs	r0, #3
100009aa:	f000 f95d 	bl	10000c68 <HAL_NVIC_SetPriorityGrouping>
#endif

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSystemCoreClockFreq();
100009ae:	f001 f99c 	bl	10001cea <HAL_RCC_GetSystemCoreClockFreq>
100009b2:	4602      	mov	r2, r0
100009b4:	4b07      	ldr	r3, [pc, #28]	; (100009d4 <HAL_Init+0x30>)
100009b6:	601a      	str	r2, [r3, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
100009b8:	2000      	movs	r0, #0
100009ba:	f000 f80d 	bl	100009d8 <HAL_InitTick>
100009be:	4603      	mov	r3, r0
100009c0:	2b00      	cmp	r3, #0
100009c2:	d001      	beq.n	100009c8 <HAL_Init+0x24>
  {
    return HAL_ERROR;
100009c4:	2301      	movs	r3, #1
100009c6:	e002      	b.n	100009ce <HAL_Init+0x2a>
  }

  /* Init the low level hardware */
  HAL_MspInit();
100009c8:	f7ff fe96 	bl	100006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
100009cc:	2300      	movs	r3, #0
}
100009ce:	4618      	mov	r0, r3
100009d0:	bd80      	pop	{r7, pc}
100009d2:	bf00      	nop
100009d4:	10020010 	.word	0x10020010

100009d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
100009d8:	b580      	push	{r7, lr}
100009da:	b082      	sub	sp, #8
100009dc:	af00      	add	r7, sp, #0
100009de:	6078      	str	r0, [r7, #4]

#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  if ((uint32_t)uwTickFreq == 0U)
100009e0:	4b15      	ldr	r3, [pc, #84]	; (10000a38 <HAL_InitTick+0x60>)
100009e2:	781b      	ldrb	r3, [r3, #0]
100009e4:	2b00      	cmp	r3, #0
100009e6:	d101      	bne.n	100009ec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
100009e8:	2301      	movs	r3, #1
100009ea:	e021      	b.n	10000a30 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock /(1000U / uwTickFreq)) > 0U)
100009ec:	4b13      	ldr	r3, [pc, #76]	; (10000a3c <HAL_InitTick+0x64>)
100009ee:	681a      	ldr	r2, [r3, #0]
100009f0:	4b11      	ldr	r3, [pc, #68]	; (10000a38 <HAL_InitTick+0x60>)
100009f2:	781b      	ldrb	r3, [r3, #0]
100009f4:	4619      	mov	r1, r3
100009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
100009fa:	fbb3 f3f1 	udiv	r3, r3, r1
100009fe:	fbb2 f3f3 	udiv	r3, r2, r3
10000a02:	4618      	mov	r0, r3
10000a04:	f000 f965 	bl	10000cd2 <HAL_SYSTICK_Config>
10000a08:	4603      	mov	r3, r0
10000a0a:	2b00      	cmp	r3, #0
10000a0c:	d001      	beq.n	10000a12 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
10000a0e:	2301      	movs	r3, #1
10000a10:	e00e      	b.n	10000a30 <HAL_InitTick+0x58>
  }
  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
10000a12:	687b      	ldr	r3, [r7, #4]
10000a14:	2b0f      	cmp	r3, #15
10000a16:	d80a      	bhi.n	10000a2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
10000a18:	2200      	movs	r2, #0
10000a1a:	6879      	ldr	r1, [r7, #4]
10000a1c:	f04f 30ff 	mov.w	r0, #4294967295
10000a20:	f000 f92d 	bl	10000c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
10000a24:	4a06      	ldr	r2, [pc, #24]	; (10000a40 <HAL_InitTick+0x68>)
10000a26:	687b      	ldr	r3, [r7, #4]
10000a28:	6013      	str	r3, [r2, #0]
#endif /* CORE_CM4 */



  /* Return function status */
  return HAL_OK;
10000a2a:	2300      	movs	r3, #0
10000a2c:	e000      	b.n	10000a30 <HAL_InitTick+0x58>
    return HAL_ERROR;
10000a2e:	2301      	movs	r3, #1
}
10000a30:	4618      	mov	r0, r3
10000a32:	3708      	adds	r7, #8
10000a34:	46bd      	mov	sp, r7
10000a36:	bd80      	pop	{r7, pc}
10000a38:	10020018 	.word	0x10020018
10000a3c:	10020010 	.word	0x10020010
10000a40:	10020014 	.word	0x10020014

10000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
10000a44:	b480      	push	{r7}
10000a46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
10000a48:	4b06      	ldr	r3, [pc, #24]	; (10000a64 <HAL_IncTick+0x20>)
10000a4a:	781b      	ldrb	r3, [r3, #0]
10000a4c:	461a      	mov	r2, r3
10000a4e:	4b06      	ldr	r3, [pc, #24]	; (10000a68 <HAL_IncTick+0x24>)
10000a50:	681b      	ldr	r3, [r3, #0]
10000a52:	4413      	add	r3, r2
10000a54:	4a04      	ldr	r2, [pc, #16]	; (10000a68 <HAL_IncTick+0x24>)
10000a56:	6013      	str	r3, [r2, #0]
}
10000a58:	bf00      	nop
10000a5a:	46bd      	mov	sp, r7
10000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a60:	4770      	bx	lr
10000a62:	bf00      	nop
10000a64:	10020018 	.word	0x10020018
10000a68:	1002436c 	.word	0x1002436c

10000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
10000a6c:	b480      	push	{r7}
10000a6e:	af00      	add	r7, sp, #0
#endif /* CORE_CA7 */


#if defined (CORE_CM4)
  /* tick is incremented in systick handler */
  return uwTick;
10000a70:	4b03      	ldr	r3, [pc, #12]	; (10000a80 <HAL_GetTick+0x14>)
10000a72:	681b      	ldr	r3, [r3, #0]
#endif /* CORE_CM4 */

}
10000a74:	4618      	mov	r0, r3
10000a76:	46bd      	mov	sp, r7
10000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
10000a7c:	4770      	bx	lr
10000a7e:	bf00      	nop
10000a80:	1002436c 	.word	0x1002436c

10000a84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
10000a84:	b580      	push	{r7, lr}
10000a86:	b084      	sub	sp, #16
10000a88:	af00      	add	r7, sp, #0
10000a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
10000a8c:	f7ff ffee 	bl	10000a6c <HAL_GetTick>
10000a90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
10000a92:	687b      	ldr	r3, [r7, #4]
10000a94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
10000a96:	68fb      	ldr	r3, [r7, #12]
10000a98:	f1b3 3fff 	cmp.w	r3, #4294967295
10000a9c:	d005      	beq.n	10000aaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
10000a9e:	4b09      	ldr	r3, [pc, #36]	; (10000ac4 <HAL_Delay+0x40>)
10000aa0:	781b      	ldrb	r3, [r3, #0]
10000aa2:	461a      	mov	r2, r3
10000aa4:	68fb      	ldr	r3, [r7, #12]
10000aa6:	4413      	add	r3, r2
10000aa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
10000aaa:	bf00      	nop
10000aac:	f7ff ffde 	bl	10000a6c <HAL_GetTick>
10000ab0:	4602      	mov	r2, r0
10000ab2:	68bb      	ldr	r3, [r7, #8]
10000ab4:	1ad3      	subs	r3, r2, r3
10000ab6:	68fa      	ldr	r2, [r7, #12]
10000ab8:	429a      	cmp	r2, r3
10000aba:	d8f7      	bhi.n	10000aac <HAL_Delay+0x28>
  {
  }
}
10000abc:	bf00      	nop
10000abe:	3710      	adds	r7, #16
10000ac0:	46bd      	mov	sp, r7
10000ac2:	bd80      	pop	{r7, pc}
10000ac4:	10020018 	.word	0x10020018

10000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000ac8:	b480      	push	{r7}
10000aca:	b085      	sub	sp, #20
10000acc:	af00      	add	r7, sp, #0
10000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
10000ad0:	687b      	ldr	r3, [r7, #4]
10000ad2:	f003 0307 	and.w	r3, r3, #7
10000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
10000ad8:	4b0c      	ldr	r3, [pc, #48]	; (10000b0c <__NVIC_SetPriorityGrouping+0x44>)
10000ada:	68db      	ldr	r3, [r3, #12]
10000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
10000ade:	68ba      	ldr	r2, [r7, #8]
10000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
10000ae4:	4013      	ands	r3, r2
10000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
10000ae8:	68fb      	ldr	r3, [r7, #12]
10000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
10000aec:	68bb      	ldr	r3, [r7, #8]
10000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
10000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
10000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
10000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
10000afa:	4a04      	ldr	r2, [pc, #16]	; (10000b0c <__NVIC_SetPriorityGrouping+0x44>)
10000afc:	68bb      	ldr	r3, [r7, #8]
10000afe:	60d3      	str	r3, [r2, #12]
}
10000b00:	bf00      	nop
10000b02:	3714      	adds	r7, #20
10000b04:	46bd      	mov	sp, r7
10000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b0a:	4770      	bx	lr
10000b0c:	e000ed00 	.word	0xe000ed00

10000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
10000b10:	b480      	push	{r7}
10000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
10000b14:	4b04      	ldr	r3, [pc, #16]	; (10000b28 <__NVIC_GetPriorityGrouping+0x18>)
10000b16:	68db      	ldr	r3, [r3, #12]
10000b18:	0a1b      	lsrs	r3, r3, #8
10000b1a:	f003 0307 	and.w	r3, r3, #7
}
10000b1e:	4618      	mov	r0, r3
10000b20:	46bd      	mov	sp, r7
10000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b26:	4770      	bx	lr
10000b28:	e000ed00 	.word	0xe000ed00

10000b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000b2c:	b480      	push	{r7}
10000b2e:	b083      	sub	sp, #12
10000b30:	af00      	add	r7, sp, #0
10000b32:	4603      	mov	r3, r0
10000b34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b3a:	2b00      	cmp	r3, #0
10000b3c:	db0b      	blt.n	10000b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
10000b3e:	88fb      	ldrh	r3, [r7, #6]
10000b40:	f003 021f 	and.w	r2, r3, #31
10000b44:	4907      	ldr	r1, [pc, #28]	; (10000b64 <__NVIC_EnableIRQ+0x38>)
10000b46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b4a:	095b      	lsrs	r3, r3, #5
10000b4c:	2001      	movs	r0, #1
10000b4e:	fa00 f202 	lsl.w	r2, r0, r2
10000b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
10000b56:	bf00      	nop
10000b58:	370c      	adds	r7, #12
10000b5a:	46bd      	mov	sp, r7
10000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000b60:	4770      	bx	lr
10000b62:	bf00      	nop
10000b64:	e000e100 	.word	0xe000e100

10000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
10000b68:	b480      	push	{r7}
10000b6a:	b083      	sub	sp, #12
10000b6c:	af00      	add	r7, sp, #0
10000b6e:	4603      	mov	r3, r0
10000b70:	6039      	str	r1, [r7, #0]
10000b72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
10000b74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b78:	2b00      	cmp	r3, #0
10000b7a:	db0a      	blt.n	10000b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000b7c:	683b      	ldr	r3, [r7, #0]
10000b7e:	b2da      	uxtb	r2, r3
10000b80:	490c      	ldr	r1, [pc, #48]	; (10000bb4 <__NVIC_SetPriority+0x4c>)
10000b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000b86:	0112      	lsls	r2, r2, #4
10000b88:	b2d2      	uxtb	r2, r2
10000b8a:	440b      	add	r3, r1
10000b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
10000b90:	e00a      	b.n	10000ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
10000b92:	683b      	ldr	r3, [r7, #0]
10000b94:	b2da      	uxtb	r2, r3
10000b96:	4908      	ldr	r1, [pc, #32]	; (10000bb8 <__NVIC_SetPriority+0x50>)
10000b98:	88fb      	ldrh	r3, [r7, #6]
10000b9a:	f003 030f 	and.w	r3, r3, #15
10000b9e:	3b04      	subs	r3, #4
10000ba0:	0112      	lsls	r2, r2, #4
10000ba2:	b2d2      	uxtb	r2, r2
10000ba4:	440b      	add	r3, r1
10000ba6:	761a      	strb	r2, [r3, #24]
}
10000ba8:	bf00      	nop
10000baa:	370c      	adds	r7, #12
10000bac:	46bd      	mov	sp, r7
10000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
10000bb2:	4770      	bx	lr
10000bb4:	e000e100 	.word	0xe000e100
10000bb8:	e000ed00 	.word	0xe000ed00

10000bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000bbc:	b480      	push	{r7}
10000bbe:	b089      	sub	sp, #36	; 0x24
10000bc0:	af00      	add	r7, sp, #0
10000bc2:	60f8      	str	r0, [r7, #12]
10000bc4:	60b9      	str	r1, [r7, #8]
10000bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
10000bc8:	68fb      	ldr	r3, [r7, #12]
10000bca:	f003 0307 	and.w	r3, r3, #7
10000bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
10000bd0:	69fb      	ldr	r3, [r7, #28]
10000bd2:	f1c3 0307 	rsb	r3, r3, #7
10000bd6:	2b04      	cmp	r3, #4
10000bd8:	bf28      	it	cs
10000bda:	2304      	movcs	r3, #4
10000bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
10000bde:	69fb      	ldr	r3, [r7, #28]
10000be0:	3304      	adds	r3, #4
10000be2:	2b06      	cmp	r3, #6
10000be4:	d902      	bls.n	10000bec <NVIC_EncodePriority+0x30>
10000be6:	69fb      	ldr	r3, [r7, #28]
10000be8:	3b03      	subs	r3, #3
10000bea:	e000      	b.n	10000bee <NVIC_EncodePriority+0x32>
10000bec:	2300      	movs	r3, #0
10000bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000bf0:	f04f 32ff 	mov.w	r2, #4294967295
10000bf4:	69bb      	ldr	r3, [r7, #24]
10000bf6:	fa02 f303 	lsl.w	r3, r2, r3
10000bfa:	43da      	mvns	r2, r3
10000bfc:	68bb      	ldr	r3, [r7, #8]
10000bfe:	401a      	ands	r2, r3
10000c00:	697b      	ldr	r3, [r7, #20]
10000c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
10000c04:	f04f 31ff 	mov.w	r1, #4294967295
10000c08:	697b      	ldr	r3, [r7, #20]
10000c0a:	fa01 f303 	lsl.w	r3, r1, r3
10000c0e:	43d9      	mvns	r1, r3
10000c10:	687b      	ldr	r3, [r7, #4]
10000c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
10000c14:	4313      	orrs	r3, r2
         );
}
10000c16:	4618      	mov	r0, r3
10000c18:	3724      	adds	r7, #36	; 0x24
10000c1a:	46bd      	mov	sp, r7
10000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
10000c20:	4770      	bx	lr
	...

10000c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
10000c24:	b580      	push	{r7, lr}
10000c26:	b082      	sub	sp, #8
10000c28:	af00      	add	r7, sp, #0
10000c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
10000c2c:	687b      	ldr	r3, [r7, #4]
10000c2e:	3b01      	subs	r3, #1
10000c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
10000c34:	d301      	bcc.n	10000c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
10000c36:	2301      	movs	r3, #1
10000c38:	e00f      	b.n	10000c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
10000c3a:	4a0a      	ldr	r2, [pc, #40]	; (10000c64 <SysTick_Config+0x40>)
10000c3c:	687b      	ldr	r3, [r7, #4]
10000c3e:	3b01      	subs	r3, #1
10000c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
10000c42:	210f      	movs	r1, #15
10000c44:	f04f 30ff 	mov.w	r0, #4294967295
10000c48:	f7ff ff8e 	bl	10000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
10000c4c:	4b05      	ldr	r3, [pc, #20]	; (10000c64 <SysTick_Config+0x40>)
10000c4e:	2200      	movs	r2, #0
10000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
10000c52:	4b04      	ldr	r3, [pc, #16]	; (10000c64 <SysTick_Config+0x40>)
10000c54:	2207      	movs	r2, #7
10000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
10000c58:	2300      	movs	r3, #0
}
10000c5a:	4618      	mov	r0, r3
10000c5c:	3708      	adds	r7, #8
10000c5e:	46bd      	mov	sp, r7
10000c60:	bd80      	pop	{r7, pc}
10000c62:	bf00      	nop
10000c64:	e000e010 	.word	0xe000e010

10000c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
10000c68:	b580      	push	{r7, lr}
10000c6a:	b082      	sub	sp, #8
10000c6c:	af00      	add	r7, sp, #0
10000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
10000c70:	6878      	ldr	r0, [r7, #4]
10000c72:	f7ff ff29 	bl	10000ac8 <__NVIC_SetPriorityGrouping>
}
10000c76:	bf00      	nop
10000c78:	3708      	adds	r7, #8
10000c7a:	46bd      	mov	sp, r7
10000c7c:	bd80      	pop	{r7, pc}

10000c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
10000c7e:	b580      	push	{r7, lr}
10000c80:	b086      	sub	sp, #24
10000c82:	af00      	add	r7, sp, #0
10000c84:	4603      	mov	r3, r0
10000c86:	60b9      	str	r1, [r7, #8]
10000c88:	607a      	str	r2, [r7, #4]
10000c8a:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup = 0x00;
10000c8c:	2300      	movs	r3, #0
10000c8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
10000c90:	f7ff ff3e 	bl	10000b10 <__NVIC_GetPriorityGrouping>
10000c94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
10000c96:	687a      	ldr	r2, [r7, #4]
10000c98:	68b9      	ldr	r1, [r7, #8]
10000c9a:	6978      	ldr	r0, [r7, #20]
10000c9c:	f7ff ff8e 	bl	10000bbc <NVIC_EncodePriority>
10000ca0:	4602      	mov	r2, r0
10000ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
10000ca6:	4611      	mov	r1, r2
10000ca8:	4618      	mov	r0, r3
10000caa:	f7ff ff5d 	bl	10000b68 <__NVIC_SetPriority>
}
10000cae:	bf00      	nop
10000cb0:	3718      	adds	r7, #24
10000cb2:	46bd      	mov	sp, r7
10000cb4:	bd80      	pop	{r7, pc}

10000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32mp1xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
10000cb6:	b580      	push	{r7, lr}
10000cb8:	b082      	sub	sp, #8
10000cba:	af00      	add	r7, sp, #0
10000cbc:	4603      	mov	r3, r0
10000cbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
10000cc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
10000cc4:	4618      	mov	r0, r3
10000cc6:	f7ff ff31 	bl	10000b2c <__NVIC_EnableIRQ>
}
10000cca:	bf00      	nop
10000ccc:	3708      	adds	r7, #8
10000cce:	46bd      	mov	sp, r7
10000cd0:	bd80      	pop	{r7, pc}

10000cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
10000cd2:	b580      	push	{r7, lr}
10000cd4:	b082      	sub	sp, #8
10000cd6:	af00      	add	r7, sp, #0
10000cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
10000cda:	6878      	ldr	r0, [r7, #4]
10000cdc:	f7ff ffa2 	bl	10000c24 <SysTick_Config>
10000ce0:	4603      	mov	r3, r0
}
10000ce2:	4618      	mov	r0, r3
10000ce4:	3708      	adds	r7, #8
10000ce6:	46bd      	mov	sp, r7
10000ce8:	bd80      	pop	{r7, pc}
	...

10000cec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
10000cec:	b580      	push	{r7, lr}
10000cee:	b086      	sub	sp, #24
10000cf0:	af00      	add	r7, sp, #0
10000cf2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
10000cf4:	f7ff feba 	bl	10000a6c <HAL_GetTick>
10000cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10000cfa:	687b      	ldr	r3, [r7, #4]
10000cfc:	2b00      	cmp	r3, #0
10000cfe:	d101      	bne.n	10000d04 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
10000d00:	2301      	movs	r3, #1
10000d02:	e0e5      	b.n	10000ed0 <HAL_DMA_Init+0x1e4>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));


  if (IS_DMA_INSTANCE(hdma) != RESET) /*DMA2/DMA1 stream */
10000d04:	687b      	ldr	r3, [r7, #4]
10000d06:	681b      	ldr	r3, [r3, #0]
10000d08:	461a      	mov	r2, r3
10000d0a:	4b73      	ldr	r3, [pc, #460]	; (10000ed8 <HAL_DMA_Init+0x1ec>)
10000d0c:	429a      	cmp	r2, r3
10000d0e:	d907      	bls.n	10000d20 <HAL_DMA_Init+0x34>
10000d10:	687b      	ldr	r3, [r7, #4]
10000d12:	681b      	ldr	r3, [r3, #0]
10000d14:	461a      	mov	r2, r3
10000d16:	4b71      	ldr	r3, [pc, #452]	; (10000edc <HAL_DMA_Init+0x1f0>)
10000d18:	429a      	cmp	r2, r3
10000d1a:	d801      	bhi.n	10000d20 <HAL_DMA_Init+0x34>
10000d1c:	2301      	movs	r3, #1
10000d1e:	e000      	b.n	10000d22 <HAL_DMA_Init+0x36>
10000d20:	2300      	movs	r3, #0
10000d22:	2b00      	cmp	r3, #0
10000d24:	f000 8097 	beq.w	10000e56 <HAL_DMA_Init+0x16a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
10000d28:	687b      	ldr	r3, [r7, #4]
10000d2a:	2200      	movs	r2, #0
10000d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
10000d30:	687b      	ldr	r3, [r7, #4]
10000d32:	2202      	movs	r2, #2
10000d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
10000d38:	687b      	ldr	r3, [r7, #4]
10000d3a:	681b      	ldr	r3, [r3, #0]
10000d3c:	681a      	ldr	r2, [r3, #0]
10000d3e:	687b      	ldr	r3, [r7, #4]
10000d40:	681b      	ldr	r3, [r3, #0]
10000d42:	f022 0201 	bic.w	r2, r2, #1
10000d46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10000d48:	e00f      	b.n	10000d6a <HAL_DMA_Init+0x7e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
10000d4a:	f7ff fe8f 	bl	10000a6c <HAL_GetTick>
10000d4e:	4602      	mov	r2, r0
10000d50:	693b      	ldr	r3, [r7, #16]
10000d52:	1ad3      	subs	r3, r2, r3
10000d54:	2b05      	cmp	r3, #5
10000d56:	d908      	bls.n	10000d6a <HAL_DMA_Init+0x7e>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
10000d58:	687b      	ldr	r3, [r7, #4]
10000d5a:	2220      	movs	r2, #32
10000d5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
10000d5e:	687b      	ldr	r3, [r7, #4]
10000d60:	2203      	movs	r2, #3
10000d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
10000d66:	2301      	movs	r3, #1
10000d68:	e0b2      	b.n	10000ed0 <HAL_DMA_Init+0x1e4>
    while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10000d6a:	687b      	ldr	r3, [r7, #4]
10000d6c:	681b      	ldr	r3, [r3, #0]
10000d6e:	681b      	ldr	r3, [r3, #0]
10000d70:	f003 0301 	and.w	r3, r3, #1
10000d74:	2b00      	cmp	r3, #0
10000d76:	d1e8      	bne.n	10000d4a <HAL_DMA_Init+0x5e>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->CR;
10000d78:	687b      	ldr	r3, [r7, #4]
10000d7a:	681b      	ldr	r3, [r3, #0]
10000d7c:	681b      	ldr	r3, [r3, #0]
10000d7e:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
10000d80:	697a      	ldr	r2, [r7, #20]
10000d82:	4b57      	ldr	r3, [pc, #348]	; (10000ee0 <HAL_DMA_Init+0x1f4>)
10000d84:	4013      	ands	r3, r2
10000d86:	617b      	str	r3, [r7, #20]
                                  DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                                  DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                                  DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
10000d88:	687b      	ldr	r3, [r7, #4]
10000d8a:	689a      	ldr	r2, [r3, #8]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10000d8c:	687b      	ldr	r3, [r7, #4]
10000d8e:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
10000d90:	431a      	orrs	r2, r3
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10000d92:	687b      	ldr	r3, [r7, #4]
10000d94:	691b      	ldr	r3, [r3, #16]
10000d96:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10000d98:	687b      	ldr	r3, [r7, #4]
10000d9a:	695b      	ldr	r3, [r3, #20]
                      hdma->Init.PeriphInc           | hdma->Init.MemInc           |
10000d9c:	431a      	orrs	r2, r3
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10000d9e:	687b      	ldr	r3, [r7, #4]
10000da0:	699b      	ldr	r3, [r3, #24]
10000da2:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
10000da4:	687b      	ldr	r3, [r7, #4]
10000da6:	69db      	ldr	r3, [r3, #28]
                      hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
10000da8:	431a      	orrs	r2, r3
                      hdma->Init.Mode                | hdma->Init.Priority;
10000daa:	687b      	ldr	r3, [r7, #4]
10000dac:	6a1b      	ldr	r3, [r3, #32]
10000dae:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
10000db0:	697a      	ldr	r2, [r7, #20]
10000db2:	4313      	orrs	r3, r2
10000db4:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10000db6:	687b      	ldr	r3, [r7, #4]
10000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000dba:	2b04      	cmp	r3, #4
10000dbc:	d107      	bne.n	10000dce <HAL_DMA_Init+0xe2>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
10000dbe:	687b      	ldr	r3, [r7, #4]
10000dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
10000dc2:	687b      	ldr	r3, [r7, #4]
10000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
10000dc6:	4313      	orrs	r3, r2
10000dc8:	697a      	ldr	r2, [r7, #20]
10000dca:	4313      	orrs	r3, r2
10000dcc:	617b      	str	r3, [r7, #20]
    }

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR = registerValue;
10000dce:	687b      	ldr	r3, [r7, #4]
10000dd0:	681b      	ldr	r3, [r3, #0]
10000dd2:	697a      	ldr	r2, [r7, #20]
10000dd4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef *)hdma->Instance)->FCR;
10000dd6:	687b      	ldr	r3, [r7, #4]
10000dd8:	681b      	ldr	r3, [r3, #0]
10000dda:	695b      	ldr	r3, [r3, #20]
10000ddc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
10000dde:	697b      	ldr	r3, [r7, #20]
10000de0:	f023 0307 	bic.w	r3, r3, #7
10000de4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
10000de6:	687b      	ldr	r3, [r7, #4]
10000de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000dea:	697a      	ldr	r2, [r7, #20]
10000dec:	4313      	orrs	r3, r2
10000dee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if (hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
10000df0:	687b      	ldr	r3, [r7, #4]
10000df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
10000df4:	2b04      	cmp	r3, #4
10000df6:	d117      	bne.n	10000e28 <HAL_DMA_Init+0x13c>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
10000df8:	687b      	ldr	r3, [r7, #4]
10000dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10000dfc:	697a      	ldr	r2, [r7, #20]
10000dfe:	4313      	orrs	r3, r2
10000e00:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
10000e02:	687b      	ldr	r3, [r7, #4]
10000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10000e06:	2b00      	cmp	r3, #0
10000e08:	d00e      	beq.n	10000e28 <HAL_DMA_Init+0x13c>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
10000e0a:	6878      	ldr	r0, [r7, #4]
10000e0c:	f000 fb74 	bl	100014f8 <DMA_CheckFifoParam>
10000e10:	4603      	mov	r3, r0
10000e12:	2b00      	cmp	r3, #0
10000e14:	d008      	beq.n	10000e28 <HAL_DMA_Init+0x13c>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
10000e16:	687b      	ldr	r3, [r7, #4]
10000e18:	2240      	movs	r2, #64	; 0x40
10000e1a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
10000e1c:	687b      	ldr	r3, [r7, #4]
10000e1e:	2201      	movs	r2, #1
10000e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
10000e24:	2301      	movs	r3, #1
10000e26:	e053      	b.n	10000ed0 <HAL_DMA_Init+0x1e4>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef *)hdma->Instance)->FCR = registerValue;
10000e28:	687b      	ldr	r3, [r7, #4]
10000e2a:	681b      	ldr	r3, [r3, #0]
10000e2c:	697a      	ldr	r2, [r7, #20]
10000e2e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
10000e30:	6878      	ldr	r0, [r7, #4]
10000e32:	f000 fb2b 	bl	1000148c <DMA_CalcBaseAndBitshift>
10000e36:	4603      	mov	r3, r0
10000e38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs->IFCR = 0x3FUL << hdma->StreamIndex;
10000e3a:	687b      	ldr	r3, [r7, #4]
10000e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10000e3e:	223f      	movs	r2, #63	; 0x3f
10000e40:	409a      	lsls	r2, r3
10000e42:	68fb      	ldr	r3, [r7, #12]
10000e44:	609a      	str	r2, [r3, #8]
  }

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
10000e46:	6878      	ldr	r0, [r7, #4]
10000e48:	f000 fbd2 	bl	100015f0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
10000e4c:	687b      	ldr	r3, [r7, #4]
10000e4e:	689b      	ldr	r3, [r3, #8]
10000e50:	2b80      	cmp	r3, #128	; 0x80
10000e52:	d10c      	bne.n	10000e6e <HAL_DMA_Init+0x182>
10000e54:	e008      	b.n	10000e68 <HAL_DMA_Init+0x17c>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
10000e56:	687b      	ldr	r3, [r7, #4]
10000e58:	2240      	movs	r2, #64	; 0x40
10000e5a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
10000e5c:	687b      	ldr	r3, [r7, #4]
10000e5e:	2203      	movs	r2, #3
10000e60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    return HAL_ERROR;
10000e64:	2301      	movs	r3, #1
10000e66:	e033      	b.n	10000ed0 <HAL_DMA_Init+0x1e4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
10000e68:	687b      	ldr	r3, [r7, #4]
10000e6a:	2200      	movs	r2, #0
10000e6c:	605a      	str	r2, [r3, #4]
  }


  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
10000e6e:	687b      	ldr	r3, [r7, #4]
10000e70:	685a      	ldr	r2, [r3, #4]
10000e72:	687b      	ldr	r3, [r7, #4]
10000e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10000e76:	b2d2      	uxtb	r2, r2
10000e78:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
10000e7a:	687b      	ldr	r3, [r7, #4]
10000e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10000e7e:	687a      	ldr	r2, [r7, #4]
10000e80:	6e92      	ldr	r2, [r2, #104]	; 0x68
10000e82:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX request generator :
     if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
  */

  if ((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
10000e84:	687b      	ldr	r3, [r7, #4]
10000e86:	685b      	ldr	r3, [r3, #4]
10000e88:	2b00      	cmp	r3, #0
10000e8a:	d010      	beq.n	10000eae <HAL_DMA_Init+0x1c2>
10000e8c:	687b      	ldr	r3, [r7, #4]
10000e8e:	685b      	ldr	r3, [r3, #4]
10000e90:	2b08      	cmp	r3, #8
10000e92:	d80c      	bhi.n	10000eae <HAL_DMA_Init+0x1c2>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
10000e94:	6878      	ldr	r0, [r7, #4]
10000e96:	f000 fbe5 	bl	10001664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
10000e9a:	687b      	ldr	r3, [r7, #4]
10000e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10000e9e:	2200      	movs	r2, #0
10000ea0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
10000ea2:	687b      	ldr	r3, [r7, #4]
10000ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
10000ea6:	687a      	ldr	r2, [r7, #4]
10000ea8:	6f52      	ldr	r2, [r2, #116]	; 0x74
10000eaa:	605a      	str	r2, [r3, #4]
10000eac:	e008      	b.n	10000ec0 <HAL_DMA_Init+0x1d4>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
10000eae:	687b      	ldr	r3, [r7, #4]
10000eb0:	2200      	movs	r2, #0
10000eb2:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
10000eb4:	687b      	ldr	r3, [r7, #4]
10000eb6:	2200      	movs	r2, #0
10000eb8:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
10000eba:	687b      	ldr	r3, [r7, #4]
10000ebc:	2200      	movs	r2, #0
10000ebe:	675a      	str	r2, [r3, #116]	; 0x74
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
10000ec0:	687b      	ldr	r3, [r7, #4]
10000ec2:	2200      	movs	r2, #0
10000ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
10000ec6:	687b      	ldr	r3, [r7, #4]
10000ec8:	2201      	movs	r2, #1
10000eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
10000ece:	2300      	movs	r3, #0
}
10000ed0:	4618      	mov	r0, r3
10000ed2:	3718      	adds	r7, #24
10000ed4:	46bd      	mov	sp, r7
10000ed6:	bd80      	pop	{r7, pc}
10000ed8:	4800000f 	.word	0x4800000f
10000edc:	480010b8 	.word	0x480010b8
10000ee0:	fe10803f 	.word	0xfe10803f

10000ee4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
10000ee4:	b580      	push	{r7, lr}
10000ee6:	b086      	sub	sp, #24
10000ee8:	af00      	add	r7, sp, #0
10000eea:	60f8      	str	r0, [r7, #12]
10000eec:	60b9      	str	r1, [r7, #8]
10000eee:	607a      	str	r2, [r7, #4]
10000ef0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
10000ef2:	2300      	movs	r3, #0
10000ef4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
10000ef6:	68fb      	ldr	r3, [r7, #12]
10000ef8:	2b00      	cmp	r3, #0
10000efa:	d101      	bne.n	10000f00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
10000efc:	2301      	movs	r3, #1
10000efe:	e072      	b.n	10000fe6 <HAL_DMA_Start_IT+0x102>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
10000f00:	68fb      	ldr	r3, [r7, #12]
10000f02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
10000f06:	2b01      	cmp	r3, #1
10000f08:	d101      	bne.n	10000f0e <HAL_DMA_Start_IT+0x2a>
10000f0a:	2302      	movs	r3, #2
10000f0c:	e06b      	b.n	10000fe6 <HAL_DMA_Start_IT+0x102>
10000f0e:	68fb      	ldr	r3, [r7, #12]
10000f10:	2201      	movs	r2, #1
10000f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (HAL_DMA_STATE_READY == hdma->State)
10000f16:	68fb      	ldr	r3, [r7, #12]
10000f18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
10000f1c:	b2db      	uxtb	r3, r3
10000f1e:	2b01      	cmp	r3, #1
10000f20:	d156      	bne.n	10000fd0 <HAL_DMA_Start_IT+0xec>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
10000f22:	68fb      	ldr	r3, [r7, #12]
10000f24:	2202      	movs	r2, #2
10000f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
10000f2a:	68fb      	ldr	r3, [r7, #12]
10000f2c:	2200      	movs	r2, #0
10000f2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
10000f30:	68fb      	ldr	r3, [r7, #12]
10000f32:	681b      	ldr	r3, [r3, #0]
10000f34:	681a      	ldr	r2, [r3, #0]
10000f36:	68fb      	ldr	r3, [r7, #12]
10000f38:	681b      	ldr	r3, [r3, #0]
10000f3a:	f022 0201 	bic.w	r2, r2, #1
10000f3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
10000f40:	683b      	ldr	r3, [r7, #0]
10000f42:	687a      	ldr	r2, [r7, #4]
10000f44:	68b9      	ldr	r1, [r7, #8]
10000f46:	68f8      	ldr	r0, [r7, #12]
10000f48:	f000 fa5a 	bl	10001400 <DMA_SetConfig>

    /* Enable Common interrupts*/
    MODIFY_REG(((DMA_Stream_TypeDef *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
10000f4c:	68fb      	ldr	r3, [r7, #12]
10000f4e:	681b      	ldr	r3, [r3, #0]
10000f50:	681b      	ldr	r3, [r3, #0]
10000f52:	f023 021e 	bic.w	r2, r3, #30
10000f56:	68fb      	ldr	r3, [r7, #12]
10000f58:	681b      	ldr	r3, [r3, #0]
10000f5a:	f042 0216 	orr.w	r2, r2, #22
10000f5e:	601a      	str	r2, [r3, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->FCR |= DMA_IT_FE;
10000f60:	68fb      	ldr	r3, [r7, #12]
10000f62:	681b      	ldr	r3, [r3, #0]
10000f64:	695a      	ldr	r2, [r3, #20]
10000f66:	68fb      	ldr	r3, [r7, #12]
10000f68:	681b      	ldr	r3, [r3, #0]
10000f6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
10000f6e:	615a      	str	r2, [r3, #20]

    if (hdma->XferHalfCpltCallback != NULL)
10000f70:	68fb      	ldr	r3, [r7, #12]
10000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10000f74:	2b00      	cmp	r3, #0
10000f76:	d007      	beq.n	10000f88 <HAL_DMA_Start_IT+0xa4>
    {
      /*Enable Half Transfer IT if corresponding Callback is set*/
      ((DMA_Stream_TypeDef *)hdma->Instance)->CR  |= DMA_IT_HT;
10000f78:	68fb      	ldr	r3, [r7, #12]
10000f7a:	681b      	ldr	r3, [r3, #0]
10000f7c:	681a      	ldr	r2, [r3, #0]
10000f7e:	68fb      	ldr	r3, [r7, #12]
10000f80:	681b      	ldr	r3, [r3, #0]
10000f82:	f042 0208 	orr.w	r2, r2, #8
10000f86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
10000f88:	68fb      	ldr	r3, [r7, #12]
10000f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10000f8c:	681b      	ldr	r3, [r3, #0]
10000f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10000f92:	2b00      	cmp	r3, #0
10000f94:	d007      	beq.n	10000fa6 <HAL_DMA_Start_IT+0xc2>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
10000f96:	68fb      	ldr	r3, [r7, #12]
10000f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10000f9a:	681a      	ldr	r2, [r3, #0]
10000f9c:	68fb      	ldr	r3, [r7, #12]
10000f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
10000fa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10000fa4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != NULL)
10000fa6:	68fb      	ldr	r3, [r7, #12]
10000fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10000faa:	2b00      	cmp	r3, #0
10000fac:	d007      	beq.n	10000fbe <HAL_DMA_Start_IT+0xda>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
10000fae:	68fb      	ldr	r3, [r7, #12]
10000fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10000fb2:	681a      	ldr	r2, [r3, #0]
10000fb4:	68fb      	ldr	r3, [r7, #12]
10000fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10000fb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
10000fbc:	601a      	str	r2, [r3, #0]

    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
10000fbe:	68fb      	ldr	r3, [r7, #12]
10000fc0:	681b      	ldr	r3, [r3, #0]
10000fc2:	681a      	ldr	r2, [r3, #0]
10000fc4:	68fb      	ldr	r3, [r7, #12]
10000fc6:	681b      	ldr	r3, [r3, #0]
10000fc8:	f042 0201 	orr.w	r2, r2, #1
10000fcc:	601a      	str	r2, [r3, #0]
10000fce:	e009      	b.n	10000fe4 <HAL_DMA_Start_IT+0x100>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
10000fd0:	68fb      	ldr	r3, [r7, #12]
10000fd2:	2200      	movs	r2, #0
10000fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
10000fd8:	68fb      	ldr	r3, [r7, #12]
10000fda:	f44f 6200 	mov.w	r2, #2048	; 0x800
10000fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
10000fe0:	2301      	movs	r3, #1
10000fe2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
10000fe4:	7dfb      	ldrb	r3, [r7, #23]
}
10000fe6:	4618      	mov	r0, r3
10000fe8:	3718      	adds	r7, #24
10000fea:	46bd      	mov	sp, r7
10000fec:	bd80      	pop	{r7, pc}
	...

10000ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
10000ff0:	b580      	push	{r7, lr}
10000ff2:	b086      	sub	sp, #24
10000ff4:	af00      	add	r7, sp, #0
10000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
10000ff8:	2300      	movs	r3, #0
10000ffa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
10000ffc:	4b98      	ldr	r3, [pc, #608]	; (10001260 <HAL_DMA_IRQHandler+0x270>)
10000ffe:	681b      	ldr	r3, [r3, #0]
10001000:	4a98      	ldr	r2, [pc, #608]	; (10001264 <HAL_DMA_IRQHandler+0x274>)
10001002:	fba2 2303 	umull	r2, r3, r2, r3
10001006:	0a9b      	lsrs	r3, r3, #10
10001008:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
1000100a:	687b      	ldr	r3, [r7, #4]
1000100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
1000100e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
10001010:	693b      	ldr	r3, [r7, #16]
10001012:	681b      	ldr	r3, [r3, #0]
10001014:	60fb      	str	r3, [r7, #12]

  if (IS_DMA_INSTANCE(hdma) != RESET) /*D2 domain DMA : DMA1 or DMA2*/
10001016:	687b      	ldr	r3, [r7, #4]
10001018:	681b      	ldr	r3, [r3, #0]
1000101a:	461a      	mov	r2, r3
1000101c:	4b92      	ldr	r3, [pc, #584]	; (10001268 <HAL_DMA_IRQHandler+0x278>)
1000101e:	429a      	cmp	r2, r3
10001020:	d907      	bls.n	10001032 <HAL_DMA_IRQHandler+0x42>
10001022:	687b      	ldr	r3, [r7, #4]
10001024:	681b      	ldr	r3, [r3, #0]
10001026:	461a      	mov	r2, r3
10001028:	4b90      	ldr	r3, [pc, #576]	; (1000126c <HAL_DMA_IRQHandler+0x27c>)
1000102a:	429a      	cmp	r2, r3
1000102c:	d801      	bhi.n	10001032 <HAL_DMA_IRQHandler+0x42>
1000102e:	2301      	movs	r3, #1
10001030:	e000      	b.n	10001034 <HAL_DMA_IRQHandler+0x44>
10001032:	2300      	movs	r3, #0
10001034:	2b00      	cmp	r3, #0
10001036:	f000 8186 	beq.w	10001346 <HAL_DMA_IRQHandler+0x356>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != 0U)
1000103a:	687b      	ldr	r3, [r7, #4]
1000103c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000103e:	2208      	movs	r2, #8
10001040:	409a      	lsls	r2, r3
10001042:	68fb      	ldr	r3, [r7, #12]
10001044:	4013      	ands	r3, r2
10001046:	2b00      	cmp	r3, #0
10001048:	d01a      	beq.n	10001080 <HAL_DMA_IRQHandler+0x90>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
1000104a:	687b      	ldr	r3, [r7, #4]
1000104c:	681b      	ldr	r3, [r3, #0]
1000104e:	681b      	ldr	r3, [r3, #0]
10001050:	f003 0304 	and.w	r3, r3, #4
10001054:	2b00      	cmp	r3, #0
10001056:	d013      	beq.n	10001080 <HAL_DMA_IRQHandler+0x90>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
10001058:	687b      	ldr	r3, [r7, #4]
1000105a:	681b      	ldr	r3, [r3, #0]
1000105c:	681a      	ldr	r2, [r3, #0]
1000105e:	687b      	ldr	r3, [r7, #4]
10001060:	681b      	ldr	r3, [r3, #0]
10001062:	f022 0204 	bic.w	r2, r2, #4
10001066:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
10001068:	687b      	ldr	r3, [r7, #4]
1000106a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000106c:	2208      	movs	r2, #8
1000106e:	409a      	lsls	r2, r3
10001070:	693b      	ldr	r3, [r7, #16]
10001072:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
10001074:	687b      	ldr	r3, [r7, #4]
10001076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
10001078:	f043 0201 	orr.w	r2, r3, #1
1000107c:	687b      	ldr	r3, [r7, #4]
1000107e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != 0U)
10001080:	687b      	ldr	r3, [r7, #4]
10001082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10001084:	68fa      	ldr	r2, [r7, #12]
10001086:	fa22 f303 	lsr.w	r3, r2, r3
1000108a:	f003 0301 	and.w	r3, r3, #1
1000108e:	2b00      	cmp	r3, #0
10001090:	d012      	beq.n	100010b8 <HAL_DMA_IRQHandler+0xc8>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
10001092:	687b      	ldr	r3, [r7, #4]
10001094:	681b      	ldr	r3, [r3, #0]
10001096:	695b      	ldr	r3, [r3, #20]
10001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
1000109c:	2b00      	cmp	r3, #0
1000109e:	d00b      	beq.n	100010b8 <HAL_DMA_IRQHandler+0xc8>
      {
        /* Clear the FIFO error flag */
        regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
100010a0:	687b      	ldr	r3, [r7, #4]
100010a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100010a4:	2201      	movs	r2, #1
100010a6:	409a      	lsls	r2, r3
100010a8:	693b      	ldr	r3, [r7, #16]
100010aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
100010ac:	687b      	ldr	r3, [r7, #4]
100010ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100010b0:	f043 0202 	orr.w	r2, r3, #2
100010b4:	687b      	ldr	r3, [r7, #4]
100010b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != 0U)
100010b8:	687b      	ldr	r3, [r7, #4]
100010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100010bc:	2204      	movs	r2, #4
100010be:	409a      	lsls	r2, r3
100010c0:	68fb      	ldr	r3, [r7, #12]
100010c2:	4013      	ands	r3, r2
100010c4:	2b00      	cmp	r3, #0
100010c6:	d012      	beq.n	100010ee <HAL_DMA_IRQHandler+0xfe>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
100010c8:	687b      	ldr	r3, [r7, #4]
100010ca:	681b      	ldr	r3, [r3, #0]
100010cc:	681b      	ldr	r3, [r3, #0]
100010ce:	f003 0302 	and.w	r3, r3, #2
100010d2:	2b00      	cmp	r3, #0
100010d4:	d00b      	beq.n	100010ee <HAL_DMA_IRQHandler+0xfe>
      {
        /* Clear the direct mode error flag */
        regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
100010d6:	687b      	ldr	r3, [r7, #4]
100010d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100010da:	2204      	movs	r2, #4
100010dc:	409a      	lsls	r2, r3
100010de:	693b      	ldr	r3, [r7, #16]
100010e0:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
100010e2:	687b      	ldr	r3, [r7, #4]
100010e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100010e6:	f043 0204 	orr.w	r2, r3, #4
100010ea:	687b      	ldr	r3, [r7, #4]
100010ec:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != 0U)
100010ee:	687b      	ldr	r3, [r7, #4]
100010f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100010f2:	2210      	movs	r2, #16
100010f4:	409a      	lsls	r2, r3
100010f6:	68fb      	ldr	r3, [r7, #12]
100010f8:	4013      	ands	r3, r2
100010fa:	2b00      	cmp	r3, #0
100010fc:	d043      	beq.n	10001186 <HAL_DMA_IRQHandler+0x196>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
100010fe:	687b      	ldr	r3, [r7, #4]
10001100:	681b      	ldr	r3, [r3, #0]
10001102:	681b      	ldr	r3, [r3, #0]
10001104:	f003 0308 	and.w	r3, r3, #8
10001108:	2b00      	cmp	r3, #0
1000110a:	d03c      	beq.n	10001186 <HAL_DMA_IRQHandler+0x196>
      {
        /* Clear the half transfer complete flag */
        regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
1000110c:	687b      	ldr	r3, [r7, #4]
1000110e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10001110:	2210      	movs	r2, #16
10001112:	409a      	lsls	r2, r3
10001114:	693b      	ldr	r3, [r7, #16]
10001116:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
10001118:	687b      	ldr	r3, [r7, #4]
1000111a:	681b      	ldr	r3, [r3, #0]
1000111c:	681b      	ldr	r3, [r3, #0]
1000111e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
10001122:	2b00      	cmp	r3, #0
10001124:	d018      	beq.n	10001158 <HAL_DMA_IRQHandler+0x168>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
10001126:	687b      	ldr	r3, [r7, #4]
10001128:	681b      	ldr	r3, [r3, #0]
1000112a:	681b      	ldr	r3, [r3, #0]
1000112c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
10001130:	2b00      	cmp	r3, #0
10001132:	d108      	bne.n	10001146 <HAL_DMA_IRQHandler+0x156>
          {
            if (hdma->XferHalfCpltCallback != NULL)
10001134:	687b      	ldr	r3, [r7, #4]
10001136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001138:	2b00      	cmp	r3, #0
1000113a:	d024      	beq.n	10001186 <HAL_DMA_IRQHandler+0x196>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
1000113c:	687b      	ldr	r3, [r7, #4]
1000113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001140:	6878      	ldr	r0, [r7, #4]
10001142:	4798      	blx	r3
10001144:	e01f      	b.n	10001186 <HAL_DMA_IRQHandler+0x196>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferM1HalfCpltCallback != NULL)
10001146:	687b      	ldr	r3, [r7, #4]
10001148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000114a:	2b00      	cmp	r3, #0
1000114c:	d01b      	beq.n	10001186 <HAL_DMA_IRQHandler+0x196>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
1000114e:	687b      	ldr	r3, [r7, #4]
10001150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001152:	6878      	ldr	r0, [r7, #4]
10001154:	4798      	blx	r3
10001156:	e016      	b.n	10001186 <HAL_DMA_IRQHandler+0x196>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
10001158:	687b      	ldr	r3, [r7, #4]
1000115a:	681b      	ldr	r3, [r3, #0]
1000115c:	681b      	ldr	r3, [r3, #0]
1000115e:	f403 7380 	and.w	r3, r3, #256	; 0x100
10001162:	2b00      	cmp	r3, #0
10001164:	d107      	bne.n	10001176 <HAL_DMA_IRQHandler+0x186>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
10001166:	687b      	ldr	r3, [r7, #4]
10001168:	681b      	ldr	r3, [r3, #0]
1000116a:	681a      	ldr	r2, [r3, #0]
1000116c:	687b      	ldr	r3, [r7, #4]
1000116e:	681b      	ldr	r3, [r3, #0]
10001170:	f022 0208 	bic.w	r2, r2, #8
10001174:	601a      	str	r2, [r3, #0]
          }

          if (hdma->XferHalfCpltCallback != NULL)
10001176:	687b      	ldr	r3, [r7, #4]
10001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
1000117a:	2b00      	cmp	r3, #0
1000117c:	d003      	beq.n	10001186 <HAL_DMA_IRQHandler+0x196>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
1000117e:	687b      	ldr	r3, [r7, #4]
10001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
10001182:	6878      	ldr	r0, [r7, #4]
10001184:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != 0U)
10001186:	687b      	ldr	r3, [r7, #4]
10001188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
1000118a:	2220      	movs	r2, #32
1000118c:	409a      	lsls	r2, r3
1000118e:	68fb      	ldr	r3, [r7, #12]
10001190:	4013      	ands	r3, r2
10001192:	2b00      	cmp	r3, #0
10001194:	f000 8094 	beq.w	100012c0 <HAL_DMA_IRQHandler+0x2d0>
    {
      if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
10001198:	687b      	ldr	r3, [r7, #4]
1000119a:	681b      	ldr	r3, [r3, #0]
1000119c:	681b      	ldr	r3, [r3, #0]
1000119e:	f003 0310 	and.w	r3, r3, #16
100011a2:	2b00      	cmp	r3, #0
100011a4:	f000 808c 	beq.w	100012c0 <HAL_DMA_IRQHandler+0x2d0>
      {
        /* Clear the transfer complete flag */
        regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
100011a8:	687b      	ldr	r3, [r7, #4]
100011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
100011ac:	2220      	movs	r2, #32
100011ae:	409a      	lsls	r2, r3
100011b0:	693b      	ldr	r3, [r7, #16]
100011b2:	609a      	str	r2, [r3, #8]

        if (HAL_DMA_STATE_ABORT == hdma->State)
100011b4:	687b      	ldr	r3, [r7, #4]
100011b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
100011ba:	b2db      	uxtb	r3, r3
100011bc:	2b04      	cmp	r3, #4
100011be:	d137      	bne.n	10001230 <HAL_DMA_IRQHandler+0x240>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
100011c0:	687b      	ldr	r3, [r7, #4]
100011c2:	681b      	ldr	r3, [r3, #0]
100011c4:	681a      	ldr	r2, [r3, #0]
100011c6:	687b      	ldr	r3, [r7, #4]
100011c8:	681b      	ldr	r3, [r3, #0]
100011ca:	f022 0216 	bic.w	r2, r2, #22
100011ce:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
100011d0:	687b      	ldr	r3, [r7, #4]
100011d2:	681b      	ldr	r3, [r3, #0]
100011d4:	695a      	ldr	r2, [r3, #20]
100011d6:	687b      	ldr	r3, [r7, #4]
100011d8:	681b      	ldr	r3, [r3, #0]
100011da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
100011de:	615a      	str	r2, [r3, #20]

          if ((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
100011e0:	687b      	ldr	r3, [r7, #4]
100011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
100011e4:	2b00      	cmp	r3, #0
100011e6:	d103      	bne.n	100011f0 <HAL_DMA_IRQHandler+0x200>
100011e8:	687b      	ldr	r3, [r7, #4]
100011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
100011ec:	2b00      	cmp	r3, #0
100011ee:	d007      	beq.n	10001200 <HAL_DMA_IRQHandler+0x210>
          {
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
100011f0:	687b      	ldr	r3, [r7, #4]
100011f2:	681b      	ldr	r3, [r3, #0]
100011f4:	681a      	ldr	r2, [r3, #0]
100011f6:	687b      	ldr	r3, [r7, #4]
100011f8:	681b      	ldr	r3, [r3, #0]
100011fa:	f022 0208 	bic.w	r2, r2, #8
100011fe:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs->IFCR = 0x3FUL << hdma->StreamIndex;
10001200:	687b      	ldr	r3, [r7, #4]
10001202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10001204:	223f      	movs	r2, #63	; 0x3f
10001206:	409a      	lsls	r2, r3
10001208:	693b      	ldr	r3, [r7, #16]
1000120a:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
1000120c:	687b      	ldr	r3, [r7, #4]
1000120e:	2200      	movs	r2, #0
10001210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
10001214:	687b      	ldr	r3, [r7, #4]
10001216:	2201      	movs	r2, #1
10001218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if (hdma->XferAbortCallback != NULL)
1000121c:	687b      	ldr	r3, [r7, #4]
1000121e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
10001220:	2b00      	cmp	r3, #0
10001222:	f000 808f 	beq.w	10001344 <HAL_DMA_IRQHandler+0x354>
          {
            hdma->XferAbortCallback(hdma);
10001226:	687b      	ldr	r3, [r7, #4]
10001228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
1000122a:	6878      	ldr	r0, [r7, #4]
1000122c:	4798      	blx	r3
          }
          return;
1000122e:	e089      	b.n	10001344 <HAL_DMA_IRQHandler+0x354>
        }

        if (((((DMA_Stream_TypeDef *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
10001230:	687b      	ldr	r3, [r7, #4]
10001232:	681b      	ldr	r3, [r3, #0]
10001234:	681b      	ldr	r3, [r3, #0]
10001236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
1000123a:	2b00      	cmp	r3, #0
1000123c:	d021      	beq.n	10001282 <HAL_DMA_IRQHandler+0x292>
        {
          /* Current memory buffer used is Memory 0 */
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
1000123e:	687b      	ldr	r3, [r7, #4]
10001240:	681b      	ldr	r3, [r3, #0]
10001242:	681b      	ldr	r3, [r3, #0]
10001244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
10001248:	2b00      	cmp	r3, #0
1000124a:	d111      	bne.n	10001270 <HAL_DMA_IRQHandler+0x280>
          {
            if (hdma->XferM1CpltCallback != NULL)
1000124c:	687b      	ldr	r3, [r7, #4]
1000124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10001250:	2b00      	cmp	r3, #0
10001252:	d035      	beq.n	100012c0 <HAL_DMA_IRQHandler+0x2d0>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
10001254:	687b      	ldr	r3, [r7, #4]
10001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
10001258:	6878      	ldr	r0, [r7, #4]
1000125a:	4798      	blx	r3
1000125c:	e030      	b.n	100012c0 <HAL_DMA_IRQHandler+0x2d0>
1000125e:	bf00      	nop
10001260:	10020010 	.word	0x10020010
10001264:	1b4e81b5 	.word	0x1b4e81b5
10001268:	4800000f 	.word	0x4800000f
1000126c:	480010b8 	.word	0x480010b8
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if (hdma->XferCpltCallback != NULL)
10001270:	687b      	ldr	r3, [r7, #4]
10001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
10001274:	2b00      	cmp	r3, #0
10001276:	d023      	beq.n	100012c0 <HAL_DMA_IRQHandler+0x2d0>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
10001278:	687b      	ldr	r3, [r7, #4]
1000127a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
1000127c:	6878      	ldr	r0, [r7, #4]
1000127e:	4798      	blx	r3
10001280:	e01e      	b.n	100012c0 <HAL_DMA_IRQHandler+0x2d0>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
10001282:	687b      	ldr	r3, [r7, #4]
10001284:	681b      	ldr	r3, [r3, #0]
10001286:	681b      	ldr	r3, [r3, #0]
10001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
1000128c:	2b00      	cmp	r3, #0
1000128e:	d10f      	bne.n	100012b0 <HAL_DMA_IRQHandler+0x2c0>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
10001290:	687b      	ldr	r3, [r7, #4]
10001292:	681b      	ldr	r3, [r3, #0]
10001294:	681a      	ldr	r2, [r3, #0]
10001296:	687b      	ldr	r3, [r7, #4]
10001298:	681b      	ldr	r3, [r3, #0]
1000129a:	f022 0210 	bic.w	r2, r2, #16
1000129e:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
100012a0:	687b      	ldr	r3, [r7, #4]
100012a2:	2200      	movs	r2, #0
100012a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
100012a8:	687b      	ldr	r3, [r7, #4]
100012aa:	2201      	movs	r2, #1
100012ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if (hdma->XferCpltCallback != NULL)
100012b0:	687b      	ldr	r3, [r7, #4]
100012b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100012b4:	2b00      	cmp	r3, #0
100012b6:	d003      	beq.n	100012c0 <HAL_DMA_IRQHandler+0x2d0>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
100012b8:	687b      	ldr	r3, [r7, #4]
100012ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
100012bc:	6878      	ldr	r0, [r7, #4]
100012be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
100012c0:	687b      	ldr	r3, [r7, #4]
100012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100012c4:	2b00      	cmp	r3, #0
100012c6:	d03e      	beq.n	10001346 <HAL_DMA_IRQHandler+0x356>
    {
      if ((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
100012c8:	687b      	ldr	r3, [r7, #4]
100012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
100012cc:	f003 0301 	and.w	r3, r3, #1
100012d0:	2b00      	cmp	r3, #0
100012d2:	d02e      	beq.n	10001332 <HAL_DMA_IRQHandler+0x342>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
100012d4:	687b      	ldr	r3, [r7, #4]
100012d6:	2204      	movs	r2, #4
100012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
100012dc:	687b      	ldr	r3, [r7, #4]
100012de:	681b      	ldr	r3, [r3, #0]
100012e0:	681a      	ldr	r2, [r3, #0]
100012e2:	687b      	ldr	r3, [r7, #4]
100012e4:	681b      	ldr	r3, [r3, #0]
100012e6:	f022 0201 	bic.w	r2, r2, #1
100012ea:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
100012ec:	68bb      	ldr	r3, [r7, #8]
100012ee:	3301      	adds	r3, #1
100012f0:	60bb      	str	r3, [r7, #8]
100012f2:	697a      	ldr	r2, [r7, #20]
100012f4:	429a      	cmp	r2, r3
100012f6:	d307      	bcc.n	10001308 <HAL_DMA_IRQHandler+0x318>
          {
            break;
          }
        }
        while ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
100012f8:	687b      	ldr	r3, [r7, #4]
100012fa:	681b      	ldr	r3, [r3, #0]
100012fc:	681b      	ldr	r3, [r3, #0]
100012fe:	f003 0301 	and.w	r3, r3, #1
10001302:	2b00      	cmp	r3, #0
10001304:	d1f2      	bne.n	100012ec <HAL_DMA_IRQHandler+0x2fc>
10001306:	e000      	b.n	1000130a <HAL_DMA_IRQHandler+0x31a>
            break;
10001308:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
1000130a:	687b      	ldr	r3, [r7, #4]
1000130c:	2200      	movs	r2, #0
1000130e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if ((((DMA_Stream_TypeDef *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
10001312:	687b      	ldr	r3, [r7, #4]
10001314:	681b      	ldr	r3, [r3, #0]
10001316:	681b      	ldr	r3, [r3, #0]
10001318:	f003 0301 	and.w	r3, r3, #1
1000131c:	2b00      	cmp	r3, #0
1000131e:	d004      	beq.n	1000132a <HAL_DMA_IRQHandler+0x33a>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
10001320:	687b      	ldr	r3, [r7, #4]
10001322:	2203      	movs	r2, #3
10001324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
10001328:	e003      	b.n	10001332 <HAL_DMA_IRQHandler+0x342>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
1000132a:	687b      	ldr	r3, [r7, #4]
1000132c:	2201      	movs	r2, #1
1000132e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if (hdma->XferErrorCallback != NULL)
10001332:	687b      	ldr	r3, [r7, #4]
10001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
10001336:	2b00      	cmp	r3, #0
10001338:	d005      	beq.n	10001346 <HAL_DMA_IRQHandler+0x356>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
1000133a:	687b      	ldr	r3, [r7, #4]
1000133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
1000133e:	6878      	ldr	r0, [r7, #4]
10001340:	4798      	blx	r3
10001342:	e000      	b.n	10001346 <HAL_DMA_IRQHandler+0x356>
          return;
10001344:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
10001346:	3718      	adds	r7, #24
10001348:	46bd      	mov	sp, r7
1000134a:	bd80      	pop	{r7, pc}

1000134c <HAL_DMA_RegisterCallback>:
  * @param  pCallback:            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
1000134c:	b480      	push	{r7}
1000134e:	b087      	sub	sp, #28
10001350:	af00      	add	r7, sp, #0
10001352:	60f8      	str	r0, [r7, #12]
10001354:	460b      	mov	r3, r1
10001356:	607a      	str	r2, [r7, #4]
10001358:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
1000135a:	2300      	movs	r3, #0
1000135c:	75fb      	strb	r3, [r7, #23]

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
1000135e:	68fb      	ldr	r3, [r7, #12]
10001360:	2b00      	cmp	r3, #0
10001362:	d101      	bne.n	10001368 <HAL_DMA_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
10001364:	2301      	movs	r3, #1
10001366:	e044      	b.n	100013f2 <HAL_DMA_RegisterCallback+0xa6>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
10001368:	68fb      	ldr	r3, [r7, #12]
1000136a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
1000136e:	2b01      	cmp	r3, #1
10001370:	d101      	bne.n	10001376 <HAL_DMA_RegisterCallback+0x2a>
10001372:	2302      	movs	r3, #2
10001374:	e03d      	b.n	100013f2 <HAL_DMA_RegisterCallback+0xa6>
10001376:	68fb      	ldr	r3, [r7, #12]
10001378:	2201      	movs	r2, #1
1000137a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (HAL_DMA_STATE_READY == hdma->State)
1000137e:	68fb      	ldr	r3, [r7, #12]
10001380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
10001384:	b2db      	uxtb	r3, r3
10001386:	2b01      	cmp	r3, #1
10001388:	d12a      	bne.n	100013e0 <HAL_DMA_RegisterCallback+0x94>
  {
    switch (CallbackID)
1000138a:	7afb      	ldrb	r3, [r7, #11]
1000138c:	2b05      	cmp	r3, #5
1000138e:	d82a      	bhi.n	100013e6 <HAL_DMA_RegisterCallback+0x9a>
10001390:	a201      	add	r2, pc, #4	; (adr r2, 10001398 <HAL_DMA_RegisterCallback+0x4c>)
10001392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001396:	bf00      	nop
10001398:	100013b1 	.word	0x100013b1
1000139c:	100013b9 	.word	0x100013b9
100013a0:	100013c1 	.word	0x100013c1
100013a4:	100013c9 	.word	0x100013c9
100013a8:	100013d1 	.word	0x100013d1
100013ac:	100013d9 	.word	0x100013d9
    {
      case  HAL_DMA_XFER_CPLT_CB_ID:
        hdma->XferCpltCallback = pCallback;
100013b0:	68fb      	ldr	r3, [r7, #12]
100013b2:	687a      	ldr	r2, [r7, #4]
100013b4:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
100013b6:	e017      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>

      case  HAL_DMA_XFER_HALFCPLT_CB_ID:
        hdma->XferHalfCpltCallback = pCallback;
100013b8:	68fb      	ldr	r3, [r7, #12]
100013ba:	687a      	ldr	r2, [r7, #4]
100013bc:	641a      	str	r2, [r3, #64]	; 0x40
        break;
100013be:	e013      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>

      case  HAL_DMA_XFER_M1CPLT_CB_ID:
        hdma->XferM1CpltCallback = pCallback;
100013c0:	68fb      	ldr	r3, [r7, #12]
100013c2:	687a      	ldr	r2, [r7, #4]
100013c4:	645a      	str	r2, [r3, #68]	; 0x44
        break;
100013c6:	e00f      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>

      case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
        hdma->XferM1HalfCpltCallback = pCallback;
100013c8:	68fb      	ldr	r3, [r7, #12]
100013ca:	687a      	ldr	r2, [r7, #4]
100013cc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
100013ce:	e00b      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>

      case  HAL_DMA_XFER_ERROR_CB_ID:
        hdma->XferErrorCallback = pCallback;
100013d0:	68fb      	ldr	r3, [r7, #12]
100013d2:	687a      	ldr	r2, [r7, #4]
100013d4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
100013d6:	e007      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>

      case  HAL_DMA_XFER_ABORT_CB_ID:
        hdma->XferAbortCallback = pCallback;
100013d8:	68fb      	ldr	r3, [r7, #12]
100013da:	687a      	ldr	r2, [r7, #4]
100013dc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
100013de:	e003      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
100013e0:	2301      	movs	r3, #1
100013e2:	75fb      	strb	r3, [r7, #23]
100013e4:	e000      	b.n	100013e8 <HAL_DMA_RegisterCallback+0x9c>
        break;
100013e6:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
100013e8:	68fb      	ldr	r3, [r7, #12]
100013ea:	2200      	movs	r2, #0
100013ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
100013f0:	7dfb      	ldrb	r3, [r7, #23]
}
100013f2:	4618      	mov	r0, r3
100013f4:	371c      	adds	r7, #28
100013f6:	46bd      	mov	sp, r7
100013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
100013fc:	4770      	bx	lr
100013fe:	bf00      	nop

10001400 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
10001400:	b480      	push	{r7}
10001402:	b087      	sub	sp, #28
10001404:	af00      	add	r7, sp, #0
10001406:	60f8      	str	r0, [r7, #12]
10001408:	60b9      	str	r1, [r7, #8]
1000140a:	607a      	str	r2, [r7, #4]
1000140c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
1000140e:	68fb      	ldr	r3, [r7, #12]
10001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
10001412:	617b      	str	r3, [r7, #20]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
10001414:	68fb      	ldr	r3, [r7, #12]
10001416:	6e5b      	ldr	r3, [r3, #100]	; 0x64
10001418:	68fa      	ldr	r2, [r7, #12]
1000141a:	6e92      	ldr	r2, [r2, #104]	; 0x68
1000141c:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != NULL)
1000141e:	68fb      	ldr	r3, [r7, #12]
10001420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
10001422:	2b00      	cmp	r3, #0
10001424:	d004      	beq.n	10001430 <DMA_SetConfig+0x30>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
10001426:	68fb      	ldr	r3, [r7, #12]
10001428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
1000142a:	68fa      	ldr	r2, [r7, #12]
1000142c:	6f52      	ldr	r2, [r2, #116]	; 0x74
1000142e:	605a      	str	r2, [r3, #4]
  }
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FUL << hdma->StreamIndex;
10001430:	68fb      	ldr	r3, [r7, #12]
10001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
10001434:	223f      	movs	r2, #63	; 0x3f
10001436:	409a      	lsls	r2, r3
10001438:	697b      	ldr	r3, [r7, #20]
1000143a:	609a      	str	r2, [r3, #8]

  /* Clear DBM bit */
  ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
1000143c:	68fb      	ldr	r3, [r7, #12]
1000143e:	681b      	ldr	r3, [r3, #0]
10001440:	681a      	ldr	r2, [r3, #0]
10001442:	68fb      	ldr	r3, [r7, #12]
10001444:	681b      	ldr	r3, [r3, #0]
10001446:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
1000144a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
1000144c:	68fb      	ldr	r3, [r7, #12]
1000144e:	681b      	ldr	r3, [r3, #0]
10001450:	683a      	ldr	r2, [r7, #0]
10001452:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
10001454:	68fb      	ldr	r3, [r7, #12]
10001456:	689b      	ldr	r3, [r3, #8]
10001458:	2b40      	cmp	r3, #64	; 0x40
1000145a:	d108      	bne.n	1000146e <DMA_SetConfig+0x6e>
  {
    /* Configure DMA Stream destination address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
1000145c:	68fb      	ldr	r3, [r7, #12]
1000145e:	681b      	ldr	r3, [r3, #0]
10001460:	687a      	ldr	r2, [r7, #4]
10001462:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
10001464:	68fb      	ldr	r3, [r7, #12]
10001466:	681b      	ldr	r3, [r3, #0]
10001468:	68ba      	ldr	r2, [r7, #8]
1000146a:	60da      	str	r2, [r3, #12]
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
  }
}
1000146c:	e007      	b.n	1000147e <DMA_SetConfig+0x7e>
    ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
1000146e:	68fb      	ldr	r3, [r7, #12]
10001470:	681b      	ldr	r3, [r3, #0]
10001472:	68ba      	ldr	r2, [r7, #8]
10001474:	609a      	str	r2, [r3, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
10001476:	68fb      	ldr	r3, [r7, #12]
10001478:	681b      	ldr	r3, [r3, #0]
1000147a:	687a      	ldr	r2, [r7, #4]
1000147c:	60da      	str	r2, [r3, #12]
}
1000147e:	bf00      	nop
10001480:	371c      	adds	r7, #28
10001482:	46bd      	mov	sp, r7
10001484:	f85d 7b04 	ldr.w	r7, [sp], #4
10001488:	4770      	bx	lr
	...

1000148c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
1000148c:	b480      	push	{r7}
1000148e:	b085      	sub	sp, #20
10001490:	af00      	add	r7, sp, #0
10001492:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
10001494:	687b      	ldr	r3, [r7, #4]
10001496:	681b      	ldr	r3, [r3, #0]
10001498:	b2db      	uxtb	r3, r3
1000149a:	3b10      	subs	r3, #16
1000149c:	4a14      	ldr	r2, [pc, #80]	; (100014f0 <DMA_CalcBaseAndBitshift+0x64>)
1000149e:	fba2 2303 	umull	r2, r3, r2, r3
100014a2:	091b      	lsrs	r3, r3, #4
100014a4:	60fb      	str	r3, [r7, #12]

  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
100014a6:	68fb      	ldr	r3, [r7, #12]
100014a8:	f003 0307 	and.w	r3, r3, #7
100014ac:	4a11      	ldr	r2, [pc, #68]	; (100014f4 <DMA_CalcBaseAndBitshift+0x68>)
100014ae:	5cd3      	ldrb	r3, [r2, r3]
100014b0:	461a      	mov	r2, r3
100014b2:	687b      	ldr	r3, [r7, #4]
100014b4:	65da      	str	r2, [r3, #92]	; 0x5c

  if (stream_number > 3U)
100014b6:	68fb      	ldr	r3, [r7, #12]
100014b8:	2b03      	cmp	r3, #3
100014ba:	d909      	bls.n	100014d0 <DMA_CalcBaseAndBitshift+0x44>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
100014bc:	687b      	ldr	r3, [r7, #4]
100014be:	681b      	ldr	r3, [r3, #0]
100014c0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
100014c4:	f023 0303 	bic.w	r3, r3, #3
100014c8:	1d1a      	adds	r2, r3, #4
100014ca:	687b      	ldr	r3, [r7, #4]
100014cc:	659a      	str	r2, [r3, #88]	; 0x58
100014ce:	e007      	b.n	100014e0 <DMA_CalcBaseAndBitshift+0x54>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t *)hdma->Instance) & (uint32_t)(~0x3FFU));
100014d0:	687b      	ldr	r3, [r7, #4]
100014d2:	681b      	ldr	r3, [r3, #0]
100014d4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
100014d8:	f023 0303 	bic.w	r3, r3, #3
100014dc:	687a      	ldr	r2, [r7, #4]
100014de:	6593      	str	r3, [r2, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
100014e0:	687b      	ldr	r3, [r7, #4]
100014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
100014e4:	4618      	mov	r0, r3
100014e6:	3714      	adds	r7, #20
100014e8:	46bd      	mov	sp, r7
100014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
100014ee:	4770      	bx	lr
100014f0:	aaaaaaab 	.word	0xaaaaaaab
100014f4:	10002e1c 	.word	0x10002e1c

100014f8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
100014f8:	b480      	push	{r7}
100014fa:	b085      	sub	sp, #20
100014fc:	af00      	add	r7, sp, #0
100014fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
10001500:	2300      	movs	r3, #0
10001502:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
10001504:	687b      	ldr	r3, [r7, #4]
10001506:	699b      	ldr	r3, [r3, #24]
10001508:	2b00      	cmp	r3, #0
1000150a:	d120      	bne.n	1000154e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
1000150c:	687b      	ldr	r3, [r7, #4]
1000150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
10001510:	2b03      	cmp	r3, #3
10001512:	d858      	bhi.n	100015c6 <DMA_CheckFifoParam+0xce>
10001514:	a201      	add	r2, pc, #4	; (adr r2, 1000151c <DMA_CheckFifoParam+0x24>)
10001516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1000151a:	bf00      	nop
1000151c:	1000152d 	.word	0x1000152d
10001520:	1000153f 	.word	0x1000153f
10001524:	1000152d 	.word	0x1000152d
10001528:	100015c7 	.word	0x100015c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
1000152c:	687b      	ldr	r3, [r7, #4]
1000152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10001534:	2b00      	cmp	r3, #0
10001536:	d048      	beq.n	100015ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
10001538:	2301      	movs	r3, #1
1000153a:	73fb      	strb	r3, [r7, #15]
        }
        break;
1000153c:	e045      	b.n	100015ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
1000153e:	687b      	ldr	r3, [r7, #4]
10001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001542:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10001546:	d142      	bne.n	100015ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
10001548:	2301      	movs	r3, #1
1000154a:	73fb      	strb	r3, [r7, #15]
        }
        break;
1000154c:	e03f      	b.n	100015ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
1000154e:	687b      	ldr	r3, [r7, #4]
10001550:	699b      	ldr	r3, [r3, #24]
10001552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
10001556:	d123      	bne.n	100015a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
10001558:	687b      	ldr	r3, [r7, #4]
1000155a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
1000155c:	2b03      	cmp	r3, #3
1000155e:	d838      	bhi.n	100015d2 <DMA_CheckFifoParam+0xda>
10001560:	a201      	add	r2, pc, #4	; (adr r2, 10001568 <DMA_CheckFifoParam+0x70>)
10001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001566:	bf00      	nop
10001568:	10001579 	.word	0x10001579
1000156c:	1000157f 	.word	0x1000157f
10001570:	10001579 	.word	0x10001579
10001574:	10001591 	.word	0x10001591
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
10001578:	2301      	movs	r3, #1
1000157a:	73fb      	strb	r3, [r7, #15]
        break;
1000157c:	e030      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
1000157e:	687b      	ldr	r3, [r7, #4]
10001580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001582:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
10001586:	2b00      	cmp	r3, #0
10001588:	d025      	beq.n	100015d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
1000158a:	2301      	movs	r3, #1
1000158c:	73fb      	strb	r3, [r7, #15]
        }
        break;
1000158e:	e022      	b.n	100015d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
10001590:	687b      	ldr	r3, [r7, #4]
10001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10001594:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
10001598:	d11f      	bne.n	100015da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
1000159a:	2301      	movs	r3, #1
1000159c:	73fb      	strb	r3, [r7, #15]
        }
        break;
1000159e:	e01c      	b.n	100015da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
100015a0:	687b      	ldr	r3, [r7, #4]
100015a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
100015a4:	2b02      	cmp	r3, #2
100015a6:	d902      	bls.n	100015ae <DMA_CheckFifoParam+0xb6>
100015a8:	2b03      	cmp	r3, #3
100015aa:	d003      	beq.n	100015b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
        break;

      default:
        break;
100015ac:	e018      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
100015ae:	2301      	movs	r3, #1
100015b0:	73fb      	strb	r3, [r7, #15]
        break;
100015b2:	e015      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
100015b4:	687b      	ldr	r3, [r7, #4]
100015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
100015b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
100015bc:	2b00      	cmp	r3, #0
100015be:	d00e      	beq.n	100015de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
100015c0:	2301      	movs	r3, #1
100015c2:	73fb      	strb	r3, [r7, #15]
        break;
100015c4:	e00b      	b.n	100015de <DMA_CheckFifoParam+0xe6>
        break;
100015c6:	bf00      	nop
100015c8:	e00a      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015ca:	bf00      	nop
100015cc:	e008      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015ce:	bf00      	nop
100015d0:	e006      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015d2:	bf00      	nop
100015d4:	e004      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015d6:	bf00      	nop
100015d8:	e002      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015da:	bf00      	nop
100015dc:	e000      	b.n	100015e0 <DMA_CheckFifoParam+0xe8>
        break;
100015de:	bf00      	nop
    }
  }

  return status;
100015e0:	7bfb      	ldrb	r3, [r7, #15]
}
100015e2:	4618      	mov	r0, r3
100015e4:	3714      	adds	r7, #20
100015e6:	46bd      	mov	sp, r7
100015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
100015ec:	4770      	bx	lr
100015ee:	bf00      	nop

100015f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
100015f0:	b480      	push	{r7}
100015f2:	b085      	sub	sp, #20
100015f4:	af00      	add	r7, sp, #0
100015f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t *)hdma->Instance);
100015f8:	687b      	ldr	r3, [r7, #4]
100015fa:	681b      	ldr	r3, [r3, #0]
100015fc:	60bb      	str	r3, [r7, #8]
  /*DMA1/DMA2 Streams are connected to DMAMUX1 channels*/
  stream_number = (((uint32_t)((uint32_t *)hdma->Instance) & 0xFFU) - 16U) / 24U;
100015fe:	687b      	ldr	r3, [r7, #4]
10001600:	681b      	ldr	r3, [r3, #0]
10001602:	b2db      	uxtb	r3, r3
10001604:	3b10      	subs	r3, #16
10001606:	4a13      	ldr	r2, [pc, #76]	; (10001654 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>)
10001608:	fba2 2303 	umull	r2, r3, r2, r3
1000160c:	091b      	lsrs	r3, r3, #4
1000160e:	60fb      	str	r3, [r7, #12]

  if ((stream_baseaddress <= ((uint32_t)DMA2_Stream7)) && \
10001610:	68bb      	ldr	r3, [r7, #8]
10001612:	4a11      	ldr	r2, [pc, #68]	; (10001658 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
10001614:	4293      	cmp	r3, r2
10001616:	d806      	bhi.n	10001626 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
10001618:	68bb      	ldr	r3, [r7, #8]
1000161a:	4a10      	ldr	r2, [pc, #64]	; (1000165c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
1000161c:	4293      	cmp	r3, r2
1000161e:	d902      	bls.n	10001626 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
      (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
  {
    stream_number += 8U;
10001620:	68fb      	ldr	r3, [r7, #12]
10001622:	3308      	adds	r3, #8
10001624:	60fb      	str	r3, [r7, #12]
  }
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
10001626:	68fb      	ldr	r3, [r7, #12]
10001628:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
1000162c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
10001630:	009b      	lsls	r3, r3, #2
10001632:	461a      	mov	r2, r3
10001634:	687b      	ldr	r3, [r7, #4]
10001636:	661a      	str	r2, [r3, #96]	; 0x60
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
10001638:	687b      	ldr	r3, [r7, #4]
1000163a:	4a09      	ldr	r2, [pc, #36]	; (10001660 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
1000163c:	665a      	str	r2, [r3, #100]	; 0x64
  hdma->DMAmuxChannelStatusMask = 1UL << stream_number;
1000163e:	2201      	movs	r2, #1
10001640:	68fb      	ldr	r3, [r7, #12]
10001642:	409a      	lsls	r2, r3
10001644:	687b      	ldr	r3, [r7, #4]
10001646:	669a      	str	r2, [r3, #104]	; 0x68
}
10001648:	bf00      	nop
1000164a:	3714      	adds	r7, #20
1000164c:	46bd      	mov	sp, r7
1000164e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001652:	4770      	bx	lr
10001654:	aaaaaaab 	.word	0xaaaaaaab
10001658:	480010b8 	.word	0x480010b8
1000165c:	4800100f 	.word	0x4800100f
10001660:	48002080 	.word	0x48002080

10001664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
10001664:	b480      	push	{r7}
10001666:	b085      	sub	sp, #20
10001668:	af00      	add	r7, sp, #0
1000166a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
1000166c:	687b      	ldr	r3, [r7, #4]
1000166e:	685b      	ldr	r3, [r3, #4]
10001670:	b2db      	uxtb	r3, r3
10001672:	60fb      	str	r3, [r7, #12]

  if ((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
10001674:	68fb      	ldr	r3, [r7, #12]
10001676:	2b00      	cmp	r3, #0
10001678:	d014      	beq.n	100016a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
1000167a:	68fb      	ldr	r3, [r7, #12]
1000167c:	2b08      	cmp	r3, #8
1000167e:	d811      	bhi.n	100016a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>
  {

    /*DMA1 and DMA2 Streams use DMAMUX1 request generator blocks*/
    hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
10001680:	68fb      	ldr	r3, [r7, #12]
10001682:	f103 5390 	add.w	r3, r3, #301989888	; 0x12000000
10001686:	f603 033f 	addw	r3, r3, #2111	; 0x83f
1000168a:	009b      	lsls	r3, r3, #2
1000168c:	461a      	mov	r2, r3
1000168e:	687b      	ldr	r3, [r7, #4]
10001690:	66da      	str	r2, [r3, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
10001692:	687b      	ldr	r3, [r7, #4]
10001694:	4a06      	ldr	r2, [pc, #24]	; (100016b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4c>)
10001696:	671a      	str	r2, [r3, #112]	; 0x70
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
10001698:	68fb      	ldr	r3, [r7, #12]
1000169a:	3b01      	subs	r3, #1
1000169c:	2201      	movs	r2, #1
1000169e:	409a      	lsls	r2, r3
100016a0:	687b      	ldr	r3, [r7, #4]
100016a2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
100016a4:	bf00      	nop
100016a6:	3714      	adds	r7, #20
100016a8:	46bd      	mov	sp, r7
100016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100016ae:	4770      	bx	lr
100016b0:	48002140 	.word	0x48002140

100016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
100016b4:	b480      	push	{r7}
100016b6:	b089      	sub	sp, #36	; 0x24
100016b8:	af00      	add	r7, sp, #0
100016ba:	6078      	str	r0, [r7, #4]
100016bc:	6039      	str	r1, [r7, #0]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef * EXTI_CurrentCPU;

#if defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_C2; /* EXTI for CM4 CPU */
100016be:	4b8a      	ldr	r3, [pc, #552]	; (100018e8 <HAL_GPIO_Init+0x234>)
100016c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
100016c2:	2300      	movs	r3, #0
100016c4:	61fb      	str	r3, [r7, #28]
100016c6:	e191      	b.n	100019ec <HAL_GPIO_Init+0x338>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
100016c8:	2201      	movs	r2, #1
100016ca:	69fb      	ldr	r3, [r7, #28]
100016cc:	fa02 f303 	lsl.w	r3, r2, r3
100016d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
100016d2:	683b      	ldr	r3, [r7, #0]
100016d4:	681b      	ldr	r3, [r3, #0]
100016d6:	693a      	ldr	r2, [r7, #16]
100016d8:	4013      	ands	r3, r2
100016da:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
100016dc:	68fa      	ldr	r2, [r7, #12]
100016de:	693b      	ldr	r3, [r7, #16]
100016e0:	429a      	cmp	r2, r3
100016e2:	f040 8180 	bne.w	100019e6 <HAL_GPIO_Init+0x332>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
100016e6:	683b      	ldr	r3, [r7, #0]
100016e8:	685b      	ldr	r3, [r3, #4]
100016ea:	2b02      	cmp	r3, #2
100016ec:	d003      	beq.n	100016f6 <HAL_GPIO_Init+0x42>
100016ee:	683b      	ldr	r3, [r7, #0]
100016f0:	685b      	ldr	r3, [r3, #4]
100016f2:	2b12      	cmp	r3, #18
100016f4:	d123      	bne.n	1000173e <HAL_GPIO_Init+0x8a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
100016f6:	69fb      	ldr	r3, [r7, #28]
100016f8:	08da      	lsrs	r2, r3, #3
100016fa:	687b      	ldr	r3, [r7, #4]
100016fc:	3208      	adds	r2, #8
100016fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
10001702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
10001704:	69fb      	ldr	r3, [r7, #28]
10001706:	f003 0307 	and.w	r3, r3, #7
1000170a:	009b      	lsls	r3, r3, #2
1000170c:	220f      	movs	r2, #15
1000170e:	fa02 f303 	lsl.w	r3, r2, r3
10001712:	43db      	mvns	r3, r3
10001714:	69ba      	ldr	r2, [r7, #24]
10001716:	4013      	ands	r3, r2
10001718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
1000171a:	683b      	ldr	r3, [r7, #0]
1000171c:	691a      	ldr	r2, [r3, #16]
1000171e:	69fb      	ldr	r3, [r7, #28]
10001720:	f003 0307 	and.w	r3, r3, #7
10001724:	009b      	lsls	r3, r3, #2
10001726:	fa02 f303 	lsl.w	r3, r2, r3
1000172a:	69ba      	ldr	r2, [r7, #24]
1000172c:	4313      	orrs	r3, r2
1000172e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
10001730:	69fb      	ldr	r3, [r7, #28]
10001732:	08da      	lsrs	r2, r3, #3
10001734:	687b      	ldr	r3, [r7, #4]
10001736:	3208      	adds	r2, #8
10001738:	69b9      	ldr	r1, [r7, #24]
1000173a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
1000173e:	687b      	ldr	r3, [r7, #4]
10001740:	681b      	ldr	r3, [r3, #0]
10001742:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
10001744:	69fb      	ldr	r3, [r7, #28]
10001746:	005b      	lsls	r3, r3, #1
10001748:	2203      	movs	r2, #3
1000174a:	fa02 f303 	lsl.w	r3, r2, r3
1000174e:	43db      	mvns	r3, r3
10001750:	69ba      	ldr	r2, [r7, #24]
10001752:	4013      	ands	r3, r2
10001754:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
10001756:	683b      	ldr	r3, [r7, #0]
10001758:	685b      	ldr	r3, [r3, #4]
1000175a:	f003 0203 	and.w	r2, r3, #3
1000175e:	69fb      	ldr	r3, [r7, #28]
10001760:	005b      	lsls	r3, r3, #1
10001762:	fa02 f303 	lsl.w	r3, r2, r3
10001766:	69ba      	ldr	r2, [r7, #24]
10001768:	4313      	orrs	r3, r2
1000176a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
1000176c:	687b      	ldr	r3, [r7, #4]
1000176e:	69ba      	ldr	r2, [r7, #24]
10001770:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001772:	683b      	ldr	r3, [r7, #0]
10001774:	685b      	ldr	r3, [r3, #4]
10001776:	2b01      	cmp	r3, #1
10001778:	d00b      	beq.n	10001792 <HAL_GPIO_Init+0xde>
1000177a:	683b      	ldr	r3, [r7, #0]
1000177c:	685b      	ldr	r3, [r3, #4]
1000177e:	2b02      	cmp	r3, #2
10001780:	d007      	beq.n	10001792 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
10001782:	683b      	ldr	r3, [r7, #0]
10001784:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
10001786:	2b11      	cmp	r3, #17
10001788:	d003      	beq.n	10001792 <HAL_GPIO_Init+0xde>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
1000178a:	683b      	ldr	r3, [r7, #0]
1000178c:	685b      	ldr	r3, [r3, #4]
1000178e:	2b12      	cmp	r3, #18
10001790:	d130      	bne.n	100017f4 <HAL_GPIO_Init+0x140>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
10001792:	687b      	ldr	r3, [r7, #4]
10001794:	689b      	ldr	r3, [r3, #8]
10001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEEDR0 << (position * 2));
10001798:	69fb      	ldr	r3, [r7, #28]
1000179a:	005b      	lsls	r3, r3, #1
1000179c:	2203      	movs	r2, #3
1000179e:	fa02 f303 	lsl.w	r3, r2, r3
100017a2:	43db      	mvns	r3, r3
100017a4:	69ba      	ldr	r2, [r7, #24]
100017a6:	4013      	ands	r3, r2
100017a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
100017aa:	683b      	ldr	r3, [r7, #0]
100017ac:	68da      	ldr	r2, [r3, #12]
100017ae:	69fb      	ldr	r3, [r7, #28]
100017b0:	005b      	lsls	r3, r3, #1
100017b2:	fa02 f303 	lsl.w	r3, r2, r3
100017b6:	69ba      	ldr	r2, [r7, #24]
100017b8:	4313      	orrs	r3, r2
100017ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
100017bc:	687b      	ldr	r3, [r7, #4]
100017be:	69ba      	ldr	r2, [r7, #24]
100017c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
100017c2:	687b      	ldr	r3, [r7, #4]
100017c4:	685b      	ldr	r3, [r3, #4]
100017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
100017c8:	2201      	movs	r2, #1
100017ca:	69fb      	ldr	r3, [r7, #28]
100017cc:	fa02 f303 	lsl.w	r3, r2, r3
100017d0:	43db      	mvns	r3, r3
100017d2:	69ba      	ldr	r2, [r7, #24]
100017d4:	4013      	ands	r3, r2
100017d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
100017d8:	683b      	ldr	r3, [r7, #0]
100017da:	685b      	ldr	r3, [r3, #4]
100017dc:	091b      	lsrs	r3, r3, #4
100017de:	f003 0201 	and.w	r2, r3, #1
100017e2:	69fb      	ldr	r3, [r7, #28]
100017e4:	fa02 f303 	lsl.w	r3, r2, r3
100017e8:	69ba      	ldr	r2, [r7, #24]
100017ea:	4313      	orrs	r3, r2
100017ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
100017ee:	687b      	ldr	r3, [r7, #4]
100017f0:	69ba      	ldr	r2, [r7, #24]
100017f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
100017f4:	687b      	ldr	r3, [r7, #4]
100017f6:	68db      	ldr	r3, [r3, #12]
100017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
100017fa:	69fb      	ldr	r3, [r7, #28]
100017fc:	005b      	lsls	r3, r3, #1
100017fe:	2203      	movs	r2, #3
10001800:	fa02 f303 	lsl.w	r3, r2, r3
10001804:	43db      	mvns	r3, r3
10001806:	69ba      	ldr	r2, [r7, #24]
10001808:	4013      	ands	r3, r2
1000180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
1000180c:	683b      	ldr	r3, [r7, #0]
1000180e:	689a      	ldr	r2, [r3, #8]
10001810:	69fb      	ldr	r3, [r7, #28]
10001812:	005b      	lsls	r3, r3, #1
10001814:	fa02 f303 	lsl.w	r3, r2, r3
10001818:	69ba      	ldr	r2, [r7, #24]
1000181a:	4313      	orrs	r3, r2
1000181c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
1000181e:	687b      	ldr	r3, [r7, #4]
10001820:	69ba      	ldr	r2, [r7, #24]
10001822:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
10001824:	683b      	ldr	r3, [r7, #0]
10001826:	685b      	ldr	r3, [r3, #4]
10001828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
1000182c:	2b00      	cmp	r3, #0
1000182e:	f000 80da 	beq.w	100019e6 <HAL_GPIO_Init+0x332>
      {
        temp = EXTI->EXTICR[position >> 2U];
10001832:	4a2e      	ldr	r2, [pc, #184]	; (100018ec <HAL_GPIO_Init+0x238>)
10001834:	69fb      	ldr	r3, [r7, #28]
10001836:	089b      	lsrs	r3, r3, #2
10001838:	3318      	adds	r3, #24
1000183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFFU << (8U * (position & 0x03U)));
10001840:	69fb      	ldr	r3, [r7, #28]
10001842:	f003 0303 	and.w	r3, r3, #3
10001846:	00db      	lsls	r3, r3, #3
10001848:	22ff      	movs	r2, #255	; 0xff
1000184a:	fa02 f303 	lsl.w	r3, r2, r3
1000184e:	43db      	mvns	r3, r3
10001850:	69ba      	ldr	r2, [r7, #24]
10001852:	4013      	ands	r3, r2
10001854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
10001856:	687b      	ldr	r3, [r7, #4]
10001858:	4a25      	ldr	r2, [pc, #148]	; (100018f0 <HAL_GPIO_Init+0x23c>)
1000185a:	4293      	cmp	r3, r2
1000185c:	d05e      	beq.n	1000191c <HAL_GPIO_Init+0x268>
1000185e:	687b      	ldr	r3, [r7, #4]
10001860:	4a24      	ldr	r2, [pc, #144]	; (100018f4 <HAL_GPIO_Init+0x240>)
10001862:	4293      	cmp	r3, r2
10001864:	d03d      	beq.n	100018e2 <HAL_GPIO_Init+0x22e>
10001866:	687b      	ldr	r3, [r7, #4]
10001868:	4a23      	ldr	r2, [pc, #140]	; (100018f8 <HAL_GPIO_Init+0x244>)
1000186a:	4293      	cmp	r3, r2
1000186c:	d037      	beq.n	100018de <HAL_GPIO_Init+0x22a>
1000186e:	687b      	ldr	r3, [r7, #4]
10001870:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
10001874:	d031      	beq.n	100018da <HAL_GPIO_Init+0x226>
10001876:	687b      	ldr	r3, [r7, #4]
10001878:	4a20      	ldr	r2, [pc, #128]	; (100018fc <HAL_GPIO_Init+0x248>)
1000187a:	4293      	cmp	r3, r2
1000187c:	d02b      	beq.n	100018d6 <HAL_GPIO_Init+0x222>
1000187e:	687b      	ldr	r3, [r7, #4]
10001880:	4a1f      	ldr	r2, [pc, #124]	; (10001900 <HAL_GPIO_Init+0x24c>)
10001882:	4293      	cmp	r3, r2
10001884:	d025      	beq.n	100018d2 <HAL_GPIO_Init+0x21e>
10001886:	687b      	ldr	r3, [r7, #4]
10001888:	4a1e      	ldr	r2, [pc, #120]	; (10001904 <HAL_GPIO_Init+0x250>)
1000188a:	4293      	cmp	r3, r2
1000188c:	d01f      	beq.n	100018ce <HAL_GPIO_Init+0x21a>
1000188e:	687b      	ldr	r3, [r7, #4]
10001890:	4a1d      	ldr	r2, [pc, #116]	; (10001908 <HAL_GPIO_Init+0x254>)
10001892:	4293      	cmp	r3, r2
10001894:	d019      	beq.n	100018ca <HAL_GPIO_Init+0x216>
10001896:	687b      	ldr	r3, [r7, #4]
10001898:	4a1c      	ldr	r2, [pc, #112]	; (1000190c <HAL_GPIO_Init+0x258>)
1000189a:	4293      	cmp	r3, r2
1000189c:	d013      	beq.n	100018c6 <HAL_GPIO_Init+0x212>
1000189e:	687b      	ldr	r3, [r7, #4]
100018a0:	4a1b      	ldr	r2, [pc, #108]	; (10001910 <HAL_GPIO_Init+0x25c>)
100018a2:	4293      	cmp	r3, r2
100018a4:	d00d      	beq.n	100018c2 <HAL_GPIO_Init+0x20e>
100018a6:	687b      	ldr	r3, [r7, #4]
100018a8:	4a1a      	ldr	r2, [pc, #104]	; (10001914 <HAL_GPIO_Init+0x260>)
100018aa:	4293      	cmp	r3, r2
100018ac:	d007      	beq.n	100018be <HAL_GPIO_Init+0x20a>
100018ae:	687b      	ldr	r3, [r7, #4]
100018b0:	4a19      	ldr	r2, [pc, #100]	; (10001918 <HAL_GPIO_Init+0x264>)
100018b2:	4293      	cmp	r3, r2
100018b4:	d101      	bne.n	100018ba <HAL_GPIO_Init+0x206>
100018b6:	230b      	movs	r3, #11
100018b8:	e031      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018ba:	2319      	movs	r3, #25
100018bc:	e02f      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018be:	230a      	movs	r3, #10
100018c0:	e02d      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018c2:	2309      	movs	r3, #9
100018c4:	e02b      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018c6:	2308      	movs	r3, #8
100018c8:	e029      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018ca:	2307      	movs	r3, #7
100018cc:	e027      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018ce:	2306      	movs	r3, #6
100018d0:	e025      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018d2:	2305      	movs	r3, #5
100018d4:	e023      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018d6:	2304      	movs	r3, #4
100018d8:	e021      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018da:	2303      	movs	r3, #3
100018dc:	e01f      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018de:	2302      	movs	r3, #2
100018e0:	e01d      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018e2:	2301      	movs	r3, #1
100018e4:	e01b      	b.n	1000191e <HAL_GPIO_Init+0x26a>
100018e6:	bf00      	nop
100018e8:	5000d0c0 	.word	0x5000d0c0
100018ec:	5000d000 	.word	0x5000d000
100018f0:	50002000 	.word	0x50002000
100018f4:	50003000 	.word	0x50003000
100018f8:	50004000 	.word	0x50004000
100018fc:	50006000 	.word	0x50006000
10001900:	50007000 	.word	0x50007000
10001904:	50008000 	.word	0x50008000
10001908:	50009000 	.word	0x50009000
1000190c:	5000a000 	.word	0x5000a000
10001910:	5000b000 	.word	0x5000b000
10001914:	5000c000 	.word	0x5000c000
10001918:	54004000 	.word	0x54004000
1000191c:	2300      	movs	r3, #0
1000191e:	69fa      	ldr	r2, [r7, #28]
10001920:	f002 0203 	and.w	r2, r2, #3
10001924:	00d2      	lsls	r2, r2, #3
10001926:	4093      	lsls	r3, r2
10001928:	461a      	mov	r2, r3
1000192a:	69bb      	ldr	r3, [r7, #24]
1000192c:	4313      	orrs	r3, r2
1000192e:	61bb      	str	r3, [r7, #24]
        EXTI->EXTICR[position >> 2U] = temp;
10001930:	4933      	ldr	r1, [pc, #204]	; (10001a00 <HAL_GPIO_Init+0x34c>)
10001932:	69fb      	ldr	r3, [r7, #28]
10001934:	089b      	lsrs	r3, r3, #2
10001936:	3318      	adds	r3, #24
10001938:	69ba      	ldr	r2, [r7, #24]
1000193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
1000193e:	697b      	ldr	r3, [r7, #20]
10001940:	681b      	ldr	r3, [r3, #0]
10001942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001944:	68fb      	ldr	r3, [r7, #12]
10001946:	43db      	mvns	r3, r3
10001948:	69ba      	ldr	r2, [r7, #24]
1000194a:	4013      	ands	r3, r2
1000194c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
1000194e:	683b      	ldr	r3, [r7, #0]
10001950:	685b      	ldr	r3, [r3, #4]
10001952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
10001956:	2b00      	cmp	r3, #0
10001958:	d003      	beq.n	10001962 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
1000195a:	69ba      	ldr	r2, [r7, #24]
1000195c:	68fb      	ldr	r3, [r7, #12]
1000195e:	4313      	orrs	r3, r2
10001960:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
10001962:	697b      	ldr	r3, [r7, #20]
10001964:	69ba      	ldr	r2, [r7, #24]
10001966:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
10001968:	697b      	ldr	r3, [r7, #20]
1000196a:	685b      	ldr	r3, [r3, #4]
1000196c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
1000196e:	68fb      	ldr	r3, [r7, #12]
10001970:	43db      	mvns	r3, r3
10001972:	69ba      	ldr	r2, [r7, #24]
10001974:	4013      	ands	r3, r2
10001976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
10001978:	683b      	ldr	r3, [r7, #0]
1000197a:	685b      	ldr	r3, [r3, #4]
1000197c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
10001980:	2b00      	cmp	r3, #0
10001982:	d003      	beq.n	1000198c <HAL_GPIO_Init+0x2d8>
        {
          temp |= iocurrent;
10001984:	69ba      	ldr	r2, [r7, #24]
10001986:	68fb      	ldr	r3, [r7, #12]
10001988:	4313      	orrs	r3, r2
1000198a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
1000198c:	697b      	ldr	r3, [r7, #20]
1000198e:	69ba      	ldr	r2, [r7, #24]
10001990:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
10001992:	4b1b      	ldr	r3, [pc, #108]	; (10001a00 <HAL_GPIO_Init+0x34c>)
10001994:	681b      	ldr	r3, [r3, #0]
10001996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
10001998:	68fb      	ldr	r3, [r7, #12]
1000199a:	43db      	mvns	r3, r3
1000199c:	69ba      	ldr	r2, [r7, #24]
1000199e:	4013      	ands	r3, r2
100019a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
100019a2:	683b      	ldr	r3, [r7, #0]
100019a4:	685b      	ldr	r3, [r3, #4]
100019a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
100019aa:	2b00      	cmp	r3, #0
100019ac:	d003      	beq.n	100019b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
100019ae:	69ba      	ldr	r2, [r7, #24]
100019b0:	68fb      	ldr	r3, [r7, #12]
100019b2:	4313      	orrs	r3, r2
100019b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
100019b6:	4a12      	ldr	r2, [pc, #72]	; (10001a00 <HAL_GPIO_Init+0x34c>)
100019b8:	69bb      	ldr	r3, [r7, #24]
100019ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
100019bc:	4b10      	ldr	r3, [pc, #64]	; (10001a00 <HAL_GPIO_Init+0x34c>)
100019be:	685b      	ldr	r3, [r3, #4]
100019c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
100019c2:	68fb      	ldr	r3, [r7, #12]
100019c4:	43db      	mvns	r3, r3
100019c6:	69ba      	ldr	r2, [r7, #24]
100019c8:	4013      	ands	r3, r2
100019ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
100019cc:	683b      	ldr	r3, [r7, #0]
100019ce:	685b      	ldr	r3, [r3, #4]
100019d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
100019d4:	2b00      	cmp	r3, #0
100019d6:	d003      	beq.n	100019e0 <HAL_GPIO_Init+0x32c>
        {
          temp |= iocurrent;
100019d8:	69ba      	ldr	r2, [r7, #24]
100019da:	68fb      	ldr	r3, [r7, #12]
100019dc:	4313      	orrs	r3, r2
100019de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
100019e0:	4a07      	ldr	r2, [pc, #28]	; (10001a00 <HAL_GPIO_Init+0x34c>)
100019e2:	69bb      	ldr	r3, [r7, #24]
100019e4:	6053      	str	r3, [r2, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
100019e6:	69fb      	ldr	r3, [r7, #28]
100019e8:	3301      	adds	r3, #1
100019ea:	61fb      	str	r3, [r7, #28]
100019ec:	69fb      	ldr	r3, [r7, #28]
100019ee:	2b0f      	cmp	r3, #15
100019f0:	f67f ae6a 	bls.w	100016c8 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
100019f4:	bf00      	nop
100019f6:	3724      	adds	r7, #36	; 0x24
100019f8:	46bd      	mov	sp, r7
100019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
100019fe:	4770      	bx	lr
10001a00:	5000d000 	.word	0x5000d000

10001a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
10001a04:	b480      	push	{r7}
10001a06:	b083      	sub	sp, #12
10001a08:	af00      	add	r7, sp, #0
10001a0a:	6078      	str	r0, [r7, #4]
10001a0c:	460b      	mov	r3, r1
10001a0e:	807b      	strh	r3, [r7, #2]
10001a10:	4613      	mov	r3, r2
10001a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
10001a14:	787b      	ldrb	r3, [r7, #1]
10001a16:	2b00      	cmp	r3, #0
10001a18:	d003      	beq.n	10001a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
10001a1a:	887a      	ldrh	r2, [r7, #2]
10001a1c:	687b      	ldr	r3, [r7, #4]
10001a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
10001a20:	e003      	b.n	10001a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
10001a22:	887b      	ldrh	r3, [r7, #2]
10001a24:	041a      	lsls	r2, r3, #16
10001a26:	687b      	ldr	r3, [r7, #4]
10001a28:	619a      	str	r2, [r3, #24]
}
10001a2a:	bf00      	nop
10001a2c:	370c      	adds	r7, #12
10001a2e:	46bd      	mov	sp, r7
10001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a34:	4770      	bx	lr

10001a36 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
10001a36:	b480      	push	{r7}
10001a38:	b083      	sub	sp, #12
10001a3a:	af00      	add	r7, sp, #0
10001a3c:	6078      	str	r0, [r7, #4]
10001a3e:	460b      	mov	r3, r1
10001a40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
10001a42:	687b      	ldr	r3, [r7, #4]
10001a44:	695a      	ldr	r2, [r3, #20]
10001a46:	887b      	ldrh	r3, [r7, #2]
10001a48:	4013      	ands	r3, r2
10001a4a:	2b00      	cmp	r3, #0
10001a4c:	d003      	beq.n	10001a56 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
10001a4e:	887a      	ldrh	r2, [r7, #2]
10001a50:	687b      	ldr	r3, [r7, #4]
10001a52:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
10001a54:	e002      	b.n	10001a5c <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
10001a56:	887a      	ldrh	r2, [r7, #2]
10001a58:	687b      	ldr	r3, [r7, #4]
10001a5a:	619a      	str	r2, [r3, #24]
}
10001a5c:	bf00      	nop
10001a5e:	370c      	adds	r7, #12
10001a60:	46bd      	mov	sp, r7
10001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a66:	4770      	bx	lr

10001a68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
10001a68:	b480      	push	{r7}
10001a6a:	b083      	sub	sp, #12
10001a6c:	af00      	add	r7, sp, #0
10001a6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
10001a70:	f04f 4298 	mov.w	r2, #1275068416	; 0x4c000000
10001a74:	687b      	ldr	r3, [r7, #4]
10001a76:	3320      	adds	r3, #32
10001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10001a7c:	4a05      	ldr	r2, [pc, #20]	; (10001a94 <HAL_HSEM_FastTake+0x2c>)
10001a7e:	4293      	cmp	r3, r2
10001a80:	d101      	bne.n	10001a86 <HAL_HSEM_FastTake+0x1e>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
10001a82:	2300      	movs	r3, #0
10001a84:	e000      	b.n	10001a88 <HAL_HSEM_FastTake+0x20>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
10001a86:	2301      	movs	r3, #1
}
10001a88:	4618      	mov	r0, r3
10001a8a:	370c      	adds	r7, #12
10001a8c:	46bd      	mov	sp, r7
10001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001a92:	4770      	bx	lr
10001a94:	80000200 	.word	0x80000200

10001a98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
10001a98:	b480      	push	{r7}
10001a9a:	b083      	sub	sp, #12
10001a9c:	af00      	add	r7, sp, #0
10001a9e:	6078      	str	r0, [r7, #4]
10001aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
10001aa2:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
10001aa6:	683b      	ldr	r3, [r7, #0]
10001aa8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
10001aac:	687b      	ldr	r3, [r7, #4]
10001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
10001ab2:	bf00      	nop
10001ab4:	370c      	adds	r7, #12
10001ab6:	46bd      	mov	sp, r7
10001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
10001abc:	4770      	bx	lr
	...

10001ac0 <HAL_RCC_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
__weak void HAL_RCC_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
10001ac0:	b480      	push	{r7}
10001ac2:	b089      	sub	sp, #36	; 0x24
10001ac4:	af00      	add	r7, sp, #0
10001ac6:	6078      	str	r0, [r7, #4]
  uint32_t   pllsource = 0, pll3m = 1, pll3fracen = 0, hsivalue = 0;
10001ac8:	2300      	movs	r3, #0
10001aca:	61bb      	str	r3, [r7, #24]
10001acc:	2301      	movs	r3, #1
10001ace:	617b      	str	r3, [r7, #20]
10001ad0:	2300      	movs	r3, #0
10001ad2:	613b      	str	r3, [r7, #16]
10001ad4:	2300      	movs	r3, #0
10001ad6:	60fb      	str	r3, [r7, #12]
  float fracn1, pll3vco = 0;
10001ad8:	f04f 0300 	mov.w	r3, #0
10001adc:	61fb      	str	r3, [r7, #28]

  pllsource = __HAL_RCC_GET_PLL3_SOURCE();
10001ade:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001ae2:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
10001ae6:	f003 0303 	and.w	r3, r3, #3
10001aea:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVM3) >> RCC_PLL3CFGR1_DIVM3_Pos) + 1U;
10001aec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001af0:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001af4:	0c1b      	lsrs	r3, r3, #16
10001af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
10001afa:	3301      	adds	r3, #1
10001afc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLL3FRACR & RCC_PLL3FRACR_FRACLE) >> RCC_PLL3FRACR_FRACLE_Pos;
10001afe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b02:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001b06:	0c1b      	lsrs	r3, r3, #16
10001b08:	f003 0301 	and.w	r3, r3, #1
10001b0c:	613b      	str	r3, [r7, #16]
  fracn1 = (float)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACV) >> RCC_PLL3FRACR_FRACV_Pos));
10001b0e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b12:	f8d3 388c 	ldr.w	r3, [r3, #2188]	; 0x88c
10001b16:	08db      	lsrs	r3, r3, #3
10001b18:	f3c3 030c 	ubfx	r3, r3, #0, #13
10001b1c:	693a      	ldr	r2, [r7, #16]
10001b1e:	fb02 f303 	mul.w	r3, r2, r3
10001b22:	ee07 3a90 	vmov	s15, r3
10001b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001b2a:	edc7 7a02 	vstr	s15, [r7, #8]
  pll3vco = (float)((float)((RCC->PLL3CFGR1 & RCC_PLL3CFGR1_DIVN) + 1U) + (fracn1 / (float) 0x1FFF));  //Intermediary value
10001b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b32:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
10001b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
10001b3a:	3301      	adds	r3, #1
10001b3c:	ee07 3a90 	vmov	s15, r3
10001b40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001b44:	edd7 6a02 	vldr	s13, [r7, #8]
10001b48:	ed9f 6a56 	vldr	s12, [pc, #344]	; 10001ca4 <HAL_RCC_GetPLL3ClockFreq+0x1e4>
10001b4c:	eec6 7a86 	vdiv.f32	s15, s13, s12
10001b50:	ee77 7a27 	vadd.f32	s15, s14, s15
10001b54:	edc7 7a07 	vstr	s15, [r7, #28]
  switch (pllsource)
10001b58:	69bb      	ldr	r3, [r7, #24]
10001b5a:	2b03      	cmp	r3, #3
10001b5c:	d85b      	bhi.n	10001c16 <HAL_RCC_GetPLL3ClockFreq+0x156>
10001b5e:	a201      	add	r2, pc, #4	; (adr r2, 10001b64 <HAL_RCC_GetPLL3ClockFreq+0xa4>)
10001b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001b64:	10001b75 	.word	0x10001b75
10001b68:	10001bd3 	.word	0x10001bd3
10001b6c:	10001bf1 	.word	0x10001bf1
10001b70:	10001c0f 	.word	0x10001c0f
  {
    case RCC_PLL3SOURCE_HSI:  /* HSI used as PLL clock source */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVRDY) != 0U)
10001b74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b78:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
10001b7c:	f003 0304 	and.w	r3, r3, #4
10001b80:	2b04      	cmp	r3, #4
10001b82:	d117      	bne.n	10001bb4 <HAL_RCC_GetPLL3ClockFreq+0xf4>
      {
        hsivalue = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001b84:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001b88:	699b      	ldr	r3, [r3, #24]
10001b8a:	f003 0303 	and.w	r3, r3, #3
10001b8e:	4a46      	ldr	r2, [pc, #280]	; (10001ca8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001b90:	fa22 f303 	lsr.w	r3, r2, r3
10001b94:	60fb      	str	r3, [r7, #12]
        pll3vco *= (float)(hsivalue / pll3m);
10001b96:	68fa      	ldr	r2, [r7, #12]
10001b98:	697b      	ldr	r3, [r7, #20]
10001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
10001b9e:	ee07 3a90 	vmov	s15, r3
10001ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001ba6:	ed97 7a07 	vldr	s14, [r7, #28]
10001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco *= (float)(HSI_VALUE / pll3m);
      }
      break;
10001bb2:	e030      	b.n	10001c16 <HAL_RCC_GetPLL3ClockFreq+0x156>
        pll3vco *= (float)(HSI_VALUE / pll3m);
10001bb4:	4a3c      	ldr	r2, [pc, #240]	; (10001ca8 <HAL_RCC_GetPLL3ClockFreq+0x1e8>)
10001bb6:	697b      	ldr	r3, [r7, #20]
10001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
10001bbc:	ee07 3a90 	vmov	s15, r3
10001bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001bc4:	ed97 7a07 	vldr	s14, [r7, #28]
10001bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001bd0:	e021      	b.n	10001c16 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco *= (float)(HSE_VALUE / pll3m);
10001bd2:	4a36      	ldr	r2, [pc, #216]	; (10001cac <HAL_RCC_GetPLL3ClockFreq+0x1ec>)
10001bd4:	697b      	ldr	r3, [r7, #20]
10001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
10001bda:	ee07 3a90 	vmov	s15, r3
10001bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001be2:	ed97 7a07 	vldr	s14, [r7, #28]
10001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
10001bea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001bee:	e012      	b.n	10001c16 <HAL_RCC_GetPLL3ClockFreq+0x156>



    case RCC_PLL3SOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco *= (float)(CSI_VALUE / pll3m);
10001bf0:	4a2f      	ldr	r2, [pc, #188]	; (10001cb0 <HAL_RCC_GetPLL3ClockFreq+0x1f0>)
10001bf2:	697b      	ldr	r3, [r7, #20]
10001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
10001bf8:	ee07 3a90 	vmov	s15, r3
10001bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
10001c00:	ed97 7a07 	vldr	s14, [r7, #28]
10001c04:	ee67 7a27 	vmul.f32	s15, s14, s15
10001c08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
10001c0c:	e003      	b.n	10001c16 <HAL_RCC_GetPLL3ClockFreq+0x156>

    case RCC_PLL3SOURCE_OFF:  /* No clock source for PLL */
      pll3vco = 0;
10001c0e:	f04f 0300 	mov.w	r3, #0
10001c12:	61fb      	str	r3, [r7, #28]
      break;
10001c14:	bf00      	nop
  }

  PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVP) >> RCC_PLL3CFGR2_DIVP_Pos) + 1U)));
10001c16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c1a:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c22:	3301      	adds	r3, #1
10001c24:	ee07 3a90 	vmov	s15, r3
10001c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c2c:	edd7 6a07 	vldr	s13, [r7, #28]
10001c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c38:	ee17 2a90 	vmov	r2, s15
10001c3c:	687b      	ldr	r3, [r7, #4]
10001c3e:	601a      	str	r2, [r3, #0]
  PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVQ) >> RCC_PLL3CFGR2_DIVQ_Pos) + 1U)));
10001c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c44:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c48:	0a1b      	lsrs	r3, r3, #8
10001c4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c4e:	3301      	adds	r3, #1
10001c50:	ee07 3a90 	vmov	s15, r3
10001c54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c58:	edd7 6a07 	vldr	s13, [r7, #28]
10001c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c64:	ee17 2a90 	vmov	r2, s15
10001c68:	687b      	ldr	r3, [r7, #4]
10001c6a:	605a      	str	r2, [r3, #4]
  PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(pll3vco / ((float)(((RCC->PLL3CFGR2 & RCC_PLL3CFGR2_DIVR) >> RCC_PLL3CFGR2_DIVR_Pos) + 1U)));
10001c6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001c70:	f8d3 3888 	ldr.w	r3, [r3, #2184]	; 0x888
10001c74:	0c1b      	lsrs	r3, r3, #16
10001c76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
10001c7a:	3301      	adds	r3, #1
10001c7c:	ee07 3a90 	vmov	s15, r3
10001c80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
10001c84:	edd7 6a07 	vldr	s13, [r7, #28]
10001c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
10001c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
10001c90:	ee17 2a90 	vmov	r2, s15
10001c94:	687b      	ldr	r3, [r7, #4]
10001c96:	609a      	str	r2, [r3, #8]
}
10001c98:	bf00      	nop
10001c9a:	3724      	adds	r7, #36	; 0x24
10001c9c:	46bd      	mov	sp, r7
10001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
10001ca2:	4770      	bx	lr
10001ca4:	45fff800 	.word	0x45fff800
10001ca8:	03d09000 	.word	0x03d09000
10001cac:	016e3600 	.word	0x016e3600
10001cb0:	003d0900 	.word	0x003d0900

10001cb4 <HAL_RCC_GetMCUFreq>:
  * @note   Each time MCU changes, this function must be called to update the
  *         right MCU value. Otherwise, any configuration based on this function will be incorrect.
  * @retval MCU frequency
  */
uint32_t HAL_RCC_GetMCUFreq(void)
{
10001cb4:	b580      	push	{r7, lr}
10001cb6:	b082      	sub	sp, #8
10001cb8:	af00      	add	r7, sp, #0
  uint32_t mcudiv = 0;
10001cba:	2300      	movs	r3, #0
10001cbc:	607b      	str	r3, [r7, #4]

  /* Compute MCU frequency ---------------------------*/
  mcudiv = __HAL_RCC_GET_MCU_DIV();
10001cbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001cc2:	f8d3 3830 	ldr.w	r3, [r3, #2096]	; 0x830
10001cc6:	f003 030f 	and.w	r3, r3, #15
10001cca:	607b      	str	r3, [r7, #4]
  if (mcudiv > RCC_MCU_DIV512)
10001ccc:	687b      	ldr	r3, [r7, #4]
10001cce:	2b09      	cmp	r3, #9
10001cd0:	d901      	bls.n	10001cd6 <HAL_RCC_GetMCUFreq+0x22>
  {
    mcudiv = RCC_MCU_DIV512;
10001cd2:	2309      	movs	r3, #9
10001cd4:	607b      	str	r3, [r7, #4]
  }

  return HAL_RCC_GetMCUSSFreq() >> mcudiv;
10001cd6:	f000 f80f 	bl	10001cf8 <HAL_RCC_GetMCUSSFreq>
10001cda:	4602      	mov	r2, r0
10001cdc:	687b      	ldr	r3, [r7, #4]
10001cde:	fa22 f303 	lsr.w	r3, r2, r3
}
10001ce2:	4618      	mov	r0, r3
10001ce4:	3708      	adds	r7, #8
10001ce6:	46bd      	mov	sp, r7
10001ce8:	bd80      	pop	{r7, pc}

10001cea <HAL_RCC_GetSystemCoreClockFreq>:
  *         frequency in the chip. It is calculated based on the predefined
  *         constants and the selected clock source
  * @retval System Core frequency
  */
uint32_t HAL_RCC_GetSystemCoreClockFreq(void)
{
10001cea:	b580      	push	{r7, lr}
10001cec:	af00      	add	r7, sp, #0
#ifdef CORE_CA7
  return HAL_RCC_GetMPUSSFreq();
#else /* CORE_CM4 */
  return HAL_RCC_GetMCUFreq();
10001cee:	f7ff ffe1 	bl	10001cb4 <HAL_RCC_GetMCUFreq>
10001cf2:	4603      	mov	r3, r0
#endif
}
10001cf4:	4618      	mov	r0, r3
10001cf6:	bd80      	pop	{r7, pc}

10001cf8 <HAL_RCC_GetMCUSSFreq>:

  return axissfreq;
}

uint32_t HAL_RCC_GetMCUSSFreq()
{
10001cf8:	b580      	push	{r7, lr}
10001cfa:	b084      	sub	sp, #16
10001cfc:	af00      	add	r7, sp, #0
  uint32_t mcussfreq = 0;
10001cfe:	2300      	movs	r3, #0
10001d00:	60fb      	str	r3, [r7, #12]
  PLL3_ClocksTypeDef pll3_clocks;

  switch (__HAL_RCC_GET_MCU_SOURCE())
10001d02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10001d08:	f003 0303 	and.w	r3, r3, #3
10001d0c:	2b03      	cmp	r3, #3
10001d0e:	d822      	bhi.n	10001d56 <HAL_RCC_GetMCUSSFreq+0x5e>
10001d10:	a201      	add	r2, pc, #4	; (adr r2, 10001d18 <HAL_RCC_GetMCUSSFreq+0x20>)
10001d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
10001d16:	bf00      	nop
10001d18:	10001d37 	.word	0x10001d37
10001d1c:	10001d4b 	.word	0x10001d4b
10001d20:	10001d51 	.word	0x10001d51
10001d24:	10001d29 	.word	0x10001d29
  {
    case RCC_MCUSSOURCE_PLL3:
      HAL_RCC_GetPLL3ClockFreq(&pll3_clocks);
10001d28:	463b      	mov	r3, r7
10001d2a:	4618      	mov	r0, r3
10001d2c:	f7ff fec8 	bl	10001ac0 <HAL_RCC_GetPLL3ClockFreq>
      mcussfreq = pll3_clocks.PLL3_P_Frequency;
10001d30:	683b      	ldr	r3, [r7, #0]
10001d32:	60fb      	str	r3, [r7, #12]
      break;
10001d34:	e00f      	b.n	10001d56 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSI:
      mcussfreq = (HSI_VALUE >> __HAL_RCC_GET_HSI_DIV());
10001d36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
10001d3a:	699b      	ldr	r3, [r3, #24]
10001d3c:	f003 0303 	and.w	r3, r3, #3
10001d40:	4a07      	ldr	r2, [pc, #28]	; (10001d60 <HAL_RCC_GetMCUSSFreq+0x68>)
10001d42:	fa22 f303 	lsr.w	r3, r2, r3
10001d46:	60fb      	str	r3, [r7, #12]

      break;
10001d48:	e005      	b.n	10001d56 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_HSE:
      mcussfreq = HSE_VALUE;
10001d4a:	4b06      	ldr	r3, [pc, #24]	; (10001d64 <HAL_RCC_GetMCUSSFreq+0x6c>)
10001d4c:	60fb      	str	r3, [r7, #12]
      break;
10001d4e:	e002      	b.n	10001d56 <HAL_RCC_GetMCUSSFreq+0x5e>

    case RCC_MCUSSOURCE_CSI:
      mcussfreq = CSI_VALUE;
10001d50:	4b05      	ldr	r3, [pc, #20]	; (10001d68 <HAL_RCC_GetMCUSSFreq+0x70>)
10001d52:	60fb      	str	r3, [r7, #12]
      break;
10001d54:	bf00      	nop
  }

  return mcussfreq;
10001d56:	68fb      	ldr	r3, [r7, #12]
}
10001d58:	4618      	mov	r0, r3
10001d5a:	3710      	adds	r7, #16
10001d5c:	46bd      	mov	sp, r7
10001d5e:	bd80      	pop	{r7, pc}
10001d60:	03d09000 	.word	0x03d09000
10001d64:	016e3600 	.word	0x016e3600
10001d68:	003d0900 	.word	0x003d0900

10001d6c <AES_set_encrypt_key>:
/**
 * Expand the cipher key into the encryption key schedule.
 */
int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                        AES_KEY_OSSL *key)
{
10001d6c:	b480      	push	{r7}
10001d6e:	b089      	sub	sp, #36	; 0x24
10001d70:	af00      	add	r7, sp, #0
10001d72:	60f8      	str	r0, [r7, #12]
10001d74:	60b9      	str	r1, [r7, #8]
10001d76:	607a      	str	r2, [r7, #4]

    u32 *rk;
    int i = 0;
10001d78:	2300      	movs	r3, #0
10001d7a:	61bb      	str	r3, [r7, #24]
    u32 temp;

    if (!userKey || !key)
10001d7c:	68fb      	ldr	r3, [r7, #12]
10001d7e:	2b00      	cmp	r3, #0
10001d80:	d002      	beq.n	10001d88 <AES_set_encrypt_key+0x1c>
10001d82:	687b      	ldr	r3, [r7, #4]
10001d84:	2b00      	cmp	r3, #0
10001d86:	d102      	bne.n	10001d8e <AES_set_encrypt_key+0x22>
        return -1;
10001d88:	f04f 33ff 	mov.w	r3, #4294967295
10001d8c:	e24e      	b.n	1000222c <AES_set_encrypt_key+0x4c0>
    if (bits != 128 && bits != 192 && bits != 256)
10001d8e:	68bb      	ldr	r3, [r7, #8]
10001d90:	2b80      	cmp	r3, #128	; 0x80
10001d92:	d009      	beq.n	10001da8 <AES_set_encrypt_key+0x3c>
10001d94:	68bb      	ldr	r3, [r7, #8]
10001d96:	2bc0      	cmp	r3, #192	; 0xc0
10001d98:	d006      	beq.n	10001da8 <AES_set_encrypt_key+0x3c>
10001d9a:	68bb      	ldr	r3, [r7, #8]
10001d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
10001da0:	d002      	beq.n	10001da8 <AES_set_encrypt_key+0x3c>
        return -2;
10001da2:	f06f 0301 	mvn.w	r3, #1
10001da6:	e241      	b.n	1000222c <AES_set_encrypt_key+0x4c0>

    rk = key->rd_key;
10001da8:	687b      	ldr	r3, [r7, #4]
10001daa:	61fb      	str	r3, [r7, #28]

    if (bits == 128)
10001dac:	68bb      	ldr	r3, [r7, #8]
10001dae:	2b80      	cmp	r3, #128	; 0x80
10001db0:	d104      	bne.n	10001dbc <AES_set_encrypt_key+0x50>
        key->rounds = 10;
10001db2:	687b      	ldr	r3, [r7, #4]
10001db4:	220a      	movs	r2, #10
10001db6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
10001dba:	e00b      	b.n	10001dd4 <AES_set_encrypt_key+0x68>
    else if (bits == 192)
10001dbc:	68bb      	ldr	r3, [r7, #8]
10001dbe:	2bc0      	cmp	r3, #192	; 0xc0
10001dc0:	d104      	bne.n	10001dcc <AES_set_encrypt_key+0x60>
        key->rounds = 12;
10001dc2:	687b      	ldr	r3, [r7, #4]
10001dc4:	220c      	movs	r2, #12
10001dc6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
10001dca:	e003      	b.n	10001dd4 <AES_set_encrypt_key+0x68>
    else
        key->rounds = 14;
10001dcc:	687b      	ldr	r3, [r7, #4]
10001dce:	220e      	movs	r2, #14
10001dd0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

    rk[0] = GETU32(userKey     );
10001dd4:	68fb      	ldr	r3, [r7, #12]
10001dd6:	781b      	ldrb	r3, [r3, #0]
10001dd8:	061a      	lsls	r2, r3, #24
10001dda:	68fb      	ldr	r3, [r7, #12]
10001ddc:	3301      	adds	r3, #1
10001dde:	781b      	ldrb	r3, [r3, #0]
10001de0:	041b      	lsls	r3, r3, #16
10001de2:	405a      	eors	r2, r3
10001de4:	68fb      	ldr	r3, [r7, #12]
10001de6:	3302      	adds	r3, #2
10001de8:	781b      	ldrb	r3, [r3, #0]
10001dea:	021b      	lsls	r3, r3, #8
10001dec:	4053      	eors	r3, r2
10001dee:	68fa      	ldr	r2, [r7, #12]
10001df0:	3203      	adds	r2, #3
10001df2:	7812      	ldrb	r2, [r2, #0]
10001df4:	405a      	eors	r2, r3
10001df6:	69fb      	ldr	r3, [r7, #28]
10001df8:	601a      	str	r2, [r3, #0]
    rk[1] = GETU32(userKey +  4);
10001dfa:	68fb      	ldr	r3, [r7, #12]
10001dfc:	3304      	adds	r3, #4
10001dfe:	781b      	ldrb	r3, [r3, #0]
10001e00:	061a      	lsls	r2, r3, #24
10001e02:	68fb      	ldr	r3, [r7, #12]
10001e04:	3305      	adds	r3, #5
10001e06:	781b      	ldrb	r3, [r3, #0]
10001e08:	041b      	lsls	r3, r3, #16
10001e0a:	405a      	eors	r2, r3
10001e0c:	68fb      	ldr	r3, [r7, #12]
10001e0e:	3306      	adds	r3, #6
10001e10:	781b      	ldrb	r3, [r3, #0]
10001e12:	021b      	lsls	r3, r3, #8
10001e14:	405a      	eors	r2, r3
10001e16:	68fb      	ldr	r3, [r7, #12]
10001e18:	3307      	adds	r3, #7
10001e1a:	781b      	ldrb	r3, [r3, #0]
10001e1c:	4619      	mov	r1, r3
10001e1e:	69fb      	ldr	r3, [r7, #28]
10001e20:	3304      	adds	r3, #4
10001e22:	404a      	eors	r2, r1
10001e24:	601a      	str	r2, [r3, #0]
    rk[2] = GETU32(userKey +  8);
10001e26:	68fb      	ldr	r3, [r7, #12]
10001e28:	3308      	adds	r3, #8
10001e2a:	781b      	ldrb	r3, [r3, #0]
10001e2c:	061a      	lsls	r2, r3, #24
10001e2e:	68fb      	ldr	r3, [r7, #12]
10001e30:	3309      	adds	r3, #9
10001e32:	781b      	ldrb	r3, [r3, #0]
10001e34:	041b      	lsls	r3, r3, #16
10001e36:	405a      	eors	r2, r3
10001e38:	68fb      	ldr	r3, [r7, #12]
10001e3a:	330a      	adds	r3, #10
10001e3c:	781b      	ldrb	r3, [r3, #0]
10001e3e:	021b      	lsls	r3, r3, #8
10001e40:	405a      	eors	r2, r3
10001e42:	68fb      	ldr	r3, [r7, #12]
10001e44:	330b      	adds	r3, #11
10001e46:	781b      	ldrb	r3, [r3, #0]
10001e48:	4619      	mov	r1, r3
10001e4a:	69fb      	ldr	r3, [r7, #28]
10001e4c:	3308      	adds	r3, #8
10001e4e:	404a      	eors	r2, r1
10001e50:	601a      	str	r2, [r3, #0]
    rk[3] = GETU32(userKey + 12);
10001e52:	68fb      	ldr	r3, [r7, #12]
10001e54:	330c      	adds	r3, #12
10001e56:	781b      	ldrb	r3, [r3, #0]
10001e58:	061a      	lsls	r2, r3, #24
10001e5a:	68fb      	ldr	r3, [r7, #12]
10001e5c:	330d      	adds	r3, #13
10001e5e:	781b      	ldrb	r3, [r3, #0]
10001e60:	041b      	lsls	r3, r3, #16
10001e62:	405a      	eors	r2, r3
10001e64:	68fb      	ldr	r3, [r7, #12]
10001e66:	330e      	adds	r3, #14
10001e68:	781b      	ldrb	r3, [r3, #0]
10001e6a:	021b      	lsls	r3, r3, #8
10001e6c:	405a      	eors	r2, r3
10001e6e:	68fb      	ldr	r3, [r7, #12]
10001e70:	330f      	adds	r3, #15
10001e72:	781b      	ldrb	r3, [r3, #0]
10001e74:	4619      	mov	r1, r3
10001e76:	69fb      	ldr	r3, [r7, #28]
10001e78:	330c      	adds	r3, #12
10001e7a:	404a      	eors	r2, r1
10001e7c:	601a      	str	r2, [r3, #0]
    if (bits == 128) {
10001e7e:	68bb      	ldr	r3, [r7, #8]
10001e80:	2b80      	cmp	r3, #128	; 0x80
10001e82:	d158      	bne.n	10001f36 <AES_set_encrypt_key+0x1ca>
        while (1) {
            temp  = rk[3];
10001e84:	69fb      	ldr	r3, [r7, #28]
10001e86:	68db      	ldr	r3, [r3, #12]
10001e88:	617b      	str	r3, [r7, #20]
            rk[4] = rk[0] ^
10001e8a:	69fb      	ldr	r3, [r7, #28]
10001e8c:	681a      	ldr	r2, [r3, #0]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
10001e8e:	697b      	ldr	r3, [r7, #20]
10001e90:	0c1b      	lsrs	r3, r3, #16
10001e92:	b2db      	uxtb	r3, r3
10001e94:	4976      	ldr	r1, [pc, #472]	; (10002070 <AES_set_encrypt_key+0x304>)
10001e96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001e9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[4] = rk[0] ^
10001e9e:	405a      	eors	r2, r3
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10001ea0:	697b      	ldr	r3, [r7, #20]
10001ea2:	0a1b      	lsrs	r3, r3, #8
10001ea4:	b2db      	uxtb	r3, r3
10001ea6:	4973      	ldr	r1, [pc, #460]	; (10002074 <AES_set_encrypt_key+0x308>)
10001ea8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001eac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
10001eb0:	405a      	eors	r2, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10001eb2:	697b      	ldr	r3, [r7, #20]
10001eb4:	b2db      	uxtb	r3, r3
10001eb6:	4970      	ldr	r1, [pc, #448]	; (10002078 <AES_set_encrypt_key+0x30c>)
10001eb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001ebc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10001ec0:	405a      	eors	r2, r3
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10001ec2:	697b      	ldr	r3, [r7, #20]
10001ec4:	0e1b      	lsrs	r3, r3, #24
10001ec6:	496d      	ldr	r1, [pc, #436]	; (1000207c <AES_set_encrypt_key+0x310>)
10001ec8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001ecc:	b2db      	uxtb	r3, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10001ece:	ea82 0103 	eor.w	r1, r2, r3
                rcon[i];
10001ed2:	4a6b      	ldr	r2, [pc, #428]	; (10002080 <AES_set_encrypt_key+0x314>)
10001ed4:	69bb      	ldr	r3, [r7, #24]
10001ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[4] = rk[0] ^
10001eda:	69fb      	ldr	r3, [r7, #28]
10001edc:	3310      	adds	r3, #16
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10001ede:	404a      	eors	r2, r1
            rk[4] = rk[0] ^
10001ee0:	601a      	str	r2, [r3, #0]
            rk[5] = rk[1] ^ rk[4];
10001ee2:	69fb      	ldr	r3, [r7, #28]
10001ee4:	3304      	adds	r3, #4
10001ee6:	6819      	ldr	r1, [r3, #0]
10001ee8:	69fb      	ldr	r3, [r7, #28]
10001eea:	3310      	adds	r3, #16
10001eec:	681a      	ldr	r2, [r3, #0]
10001eee:	69fb      	ldr	r3, [r7, #28]
10001ef0:	3314      	adds	r3, #20
10001ef2:	404a      	eors	r2, r1
10001ef4:	601a      	str	r2, [r3, #0]
            rk[6] = rk[2] ^ rk[5];
10001ef6:	69fb      	ldr	r3, [r7, #28]
10001ef8:	3308      	adds	r3, #8
10001efa:	6819      	ldr	r1, [r3, #0]
10001efc:	69fb      	ldr	r3, [r7, #28]
10001efe:	3314      	adds	r3, #20
10001f00:	681a      	ldr	r2, [r3, #0]
10001f02:	69fb      	ldr	r3, [r7, #28]
10001f04:	3318      	adds	r3, #24
10001f06:	404a      	eors	r2, r1
10001f08:	601a      	str	r2, [r3, #0]
            rk[7] = rk[3] ^ rk[6];
10001f0a:	69fb      	ldr	r3, [r7, #28]
10001f0c:	330c      	adds	r3, #12
10001f0e:	6819      	ldr	r1, [r3, #0]
10001f10:	69fb      	ldr	r3, [r7, #28]
10001f12:	3318      	adds	r3, #24
10001f14:	681a      	ldr	r2, [r3, #0]
10001f16:	69fb      	ldr	r3, [r7, #28]
10001f18:	331c      	adds	r3, #28
10001f1a:	404a      	eors	r2, r1
10001f1c:	601a      	str	r2, [r3, #0]
            if (++i == 10) {
10001f1e:	69bb      	ldr	r3, [r7, #24]
10001f20:	3301      	adds	r3, #1
10001f22:	61bb      	str	r3, [r7, #24]
10001f24:	69bb      	ldr	r3, [r7, #24]
10001f26:	2b0a      	cmp	r3, #10
10001f28:	d101      	bne.n	10001f2e <AES_set_encrypt_key+0x1c2>
                return 0;
10001f2a:	2300      	movs	r3, #0
10001f2c:	e17e      	b.n	1000222c <AES_set_encrypt_key+0x4c0>
            }
            rk += 4;
10001f2e:	69fb      	ldr	r3, [r7, #28]
10001f30:	3310      	adds	r3, #16
10001f32:	61fb      	str	r3, [r7, #28]
            temp  = rk[3];
10001f34:	e7a6      	b.n	10001e84 <AES_set_encrypt_key+0x118>
        }
    }
    rk[4] = GETU32(userKey + 16);
10001f36:	68fb      	ldr	r3, [r7, #12]
10001f38:	3310      	adds	r3, #16
10001f3a:	781b      	ldrb	r3, [r3, #0]
10001f3c:	061a      	lsls	r2, r3, #24
10001f3e:	68fb      	ldr	r3, [r7, #12]
10001f40:	3311      	adds	r3, #17
10001f42:	781b      	ldrb	r3, [r3, #0]
10001f44:	041b      	lsls	r3, r3, #16
10001f46:	405a      	eors	r2, r3
10001f48:	68fb      	ldr	r3, [r7, #12]
10001f4a:	3312      	adds	r3, #18
10001f4c:	781b      	ldrb	r3, [r3, #0]
10001f4e:	021b      	lsls	r3, r3, #8
10001f50:	405a      	eors	r2, r3
10001f52:	68fb      	ldr	r3, [r7, #12]
10001f54:	3313      	adds	r3, #19
10001f56:	781b      	ldrb	r3, [r3, #0]
10001f58:	4619      	mov	r1, r3
10001f5a:	69fb      	ldr	r3, [r7, #28]
10001f5c:	3310      	adds	r3, #16
10001f5e:	404a      	eors	r2, r1
10001f60:	601a      	str	r2, [r3, #0]
    rk[5] = GETU32(userKey + 20);
10001f62:	68fb      	ldr	r3, [r7, #12]
10001f64:	3314      	adds	r3, #20
10001f66:	781b      	ldrb	r3, [r3, #0]
10001f68:	061a      	lsls	r2, r3, #24
10001f6a:	68fb      	ldr	r3, [r7, #12]
10001f6c:	3315      	adds	r3, #21
10001f6e:	781b      	ldrb	r3, [r3, #0]
10001f70:	041b      	lsls	r3, r3, #16
10001f72:	405a      	eors	r2, r3
10001f74:	68fb      	ldr	r3, [r7, #12]
10001f76:	3316      	adds	r3, #22
10001f78:	781b      	ldrb	r3, [r3, #0]
10001f7a:	021b      	lsls	r3, r3, #8
10001f7c:	405a      	eors	r2, r3
10001f7e:	68fb      	ldr	r3, [r7, #12]
10001f80:	3317      	adds	r3, #23
10001f82:	781b      	ldrb	r3, [r3, #0]
10001f84:	4619      	mov	r1, r3
10001f86:	69fb      	ldr	r3, [r7, #28]
10001f88:	3314      	adds	r3, #20
10001f8a:	404a      	eors	r2, r1
10001f8c:	601a      	str	r2, [r3, #0]
    if (bits == 192) {
10001f8e:	68bb      	ldr	r3, [r7, #8]
10001f90:	2bc0      	cmp	r3, #192	; 0xc0
10001f92:	d177      	bne.n	10002084 <AES_set_encrypt_key+0x318>
        while (1) {
            temp = rk[ 5];
10001f94:	69fb      	ldr	r3, [r7, #28]
10001f96:	695b      	ldr	r3, [r3, #20]
10001f98:	617b      	str	r3, [r7, #20]
            rk[ 6] = rk[ 0] ^
10001f9a:	69fb      	ldr	r3, [r7, #28]
10001f9c:	681a      	ldr	r2, [r3, #0]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
10001f9e:	697b      	ldr	r3, [r7, #20]
10001fa0:	0c1b      	lsrs	r3, r3, #16
10001fa2:	b2db      	uxtb	r3, r3
10001fa4:	4932      	ldr	r1, [pc, #200]	; (10002070 <AES_set_encrypt_key+0x304>)
10001fa6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001faa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[ 6] = rk[ 0] ^
10001fae:	405a      	eors	r2, r3
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10001fb0:	697b      	ldr	r3, [r7, #20]
10001fb2:	0a1b      	lsrs	r3, r3, #8
10001fb4:	b2db      	uxtb	r3, r3
10001fb6:	492f      	ldr	r1, [pc, #188]	; (10002074 <AES_set_encrypt_key+0x308>)
10001fb8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001fbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
10001fc0:	405a      	eors	r2, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10001fc2:	697b      	ldr	r3, [r7, #20]
10001fc4:	b2db      	uxtb	r3, r3
10001fc6:	492c      	ldr	r1, [pc, #176]	; (10002078 <AES_set_encrypt_key+0x30c>)
10001fc8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001fcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10001fd0:	405a      	eors	r2, r3
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10001fd2:	697b      	ldr	r3, [r7, #20]
10001fd4:	0e1b      	lsrs	r3, r3, #24
10001fd6:	4929      	ldr	r1, [pc, #164]	; (1000207c <AES_set_encrypt_key+0x310>)
10001fd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10001fdc:	b2db      	uxtb	r3, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10001fde:	ea82 0103 	eor.w	r1, r2, r3
                rcon[i];
10001fe2:	4a27      	ldr	r2, [pc, #156]	; (10002080 <AES_set_encrypt_key+0x314>)
10001fe4:	69bb      	ldr	r3, [r7, #24]
10001fe6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[ 6] = rk[ 0] ^
10001fea:	69fb      	ldr	r3, [r7, #28]
10001fec:	3318      	adds	r3, #24
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10001fee:	404a      	eors	r2, r1
            rk[ 6] = rk[ 0] ^
10001ff0:	601a      	str	r2, [r3, #0]
            rk[ 7] = rk[ 1] ^ rk[ 6];
10001ff2:	69fb      	ldr	r3, [r7, #28]
10001ff4:	3304      	adds	r3, #4
10001ff6:	6819      	ldr	r1, [r3, #0]
10001ff8:	69fb      	ldr	r3, [r7, #28]
10001ffa:	3318      	adds	r3, #24
10001ffc:	681a      	ldr	r2, [r3, #0]
10001ffe:	69fb      	ldr	r3, [r7, #28]
10002000:	331c      	adds	r3, #28
10002002:	404a      	eors	r2, r1
10002004:	601a      	str	r2, [r3, #0]
            rk[ 8] = rk[ 2] ^ rk[ 7];
10002006:	69fb      	ldr	r3, [r7, #28]
10002008:	3308      	adds	r3, #8
1000200a:	6819      	ldr	r1, [r3, #0]
1000200c:	69fb      	ldr	r3, [r7, #28]
1000200e:	331c      	adds	r3, #28
10002010:	681a      	ldr	r2, [r3, #0]
10002012:	69fb      	ldr	r3, [r7, #28]
10002014:	3320      	adds	r3, #32
10002016:	404a      	eors	r2, r1
10002018:	601a      	str	r2, [r3, #0]
            rk[ 9] = rk[ 3] ^ rk[ 8];
1000201a:	69fb      	ldr	r3, [r7, #28]
1000201c:	330c      	adds	r3, #12
1000201e:	6819      	ldr	r1, [r3, #0]
10002020:	69fb      	ldr	r3, [r7, #28]
10002022:	3320      	adds	r3, #32
10002024:	681a      	ldr	r2, [r3, #0]
10002026:	69fb      	ldr	r3, [r7, #28]
10002028:	3324      	adds	r3, #36	; 0x24
1000202a:	404a      	eors	r2, r1
1000202c:	601a      	str	r2, [r3, #0]
            if (++i == 8) {
1000202e:	69bb      	ldr	r3, [r7, #24]
10002030:	3301      	adds	r3, #1
10002032:	61bb      	str	r3, [r7, #24]
10002034:	69bb      	ldr	r3, [r7, #24]
10002036:	2b08      	cmp	r3, #8
10002038:	d101      	bne.n	1000203e <AES_set_encrypt_key+0x2d2>
                return 0;
1000203a:	2300      	movs	r3, #0
1000203c:	e0f6      	b.n	1000222c <AES_set_encrypt_key+0x4c0>
            }
            rk[10] = rk[ 4] ^ rk[ 9];
1000203e:	69fb      	ldr	r3, [r7, #28]
10002040:	3310      	adds	r3, #16
10002042:	6819      	ldr	r1, [r3, #0]
10002044:	69fb      	ldr	r3, [r7, #28]
10002046:	3324      	adds	r3, #36	; 0x24
10002048:	681a      	ldr	r2, [r3, #0]
1000204a:	69fb      	ldr	r3, [r7, #28]
1000204c:	3328      	adds	r3, #40	; 0x28
1000204e:	404a      	eors	r2, r1
10002050:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 5] ^ rk[10];
10002052:	69fb      	ldr	r3, [r7, #28]
10002054:	3314      	adds	r3, #20
10002056:	6819      	ldr	r1, [r3, #0]
10002058:	69fb      	ldr	r3, [r7, #28]
1000205a:	3328      	adds	r3, #40	; 0x28
1000205c:	681a      	ldr	r2, [r3, #0]
1000205e:	69fb      	ldr	r3, [r7, #28]
10002060:	332c      	adds	r3, #44	; 0x2c
10002062:	404a      	eors	r2, r1
10002064:	601a      	str	r2, [r3, #0]
            rk += 6;
10002066:	69fb      	ldr	r3, [r7, #28]
10002068:	3318      	adds	r3, #24
1000206a:	61fb      	str	r3, [r7, #28]
            temp = rk[ 5];
1000206c:	e792      	b.n	10001f94 <AES_set_encrypt_key+0x228>
1000206e:	bf00      	nop
10002070:	10003624 	.word	0x10003624
10002074:	10003a24 	.word	0x10003a24
10002078:	10002e24 	.word	0x10002e24
1000207c:	10003224 	.word	0x10003224
10002080:	10003e24 	.word	0x10003e24
        }
    }
    rk[6] = GETU32(userKey + 24);
10002084:	68fb      	ldr	r3, [r7, #12]
10002086:	3318      	adds	r3, #24
10002088:	781b      	ldrb	r3, [r3, #0]
1000208a:	061a      	lsls	r2, r3, #24
1000208c:	68fb      	ldr	r3, [r7, #12]
1000208e:	3319      	adds	r3, #25
10002090:	781b      	ldrb	r3, [r3, #0]
10002092:	041b      	lsls	r3, r3, #16
10002094:	405a      	eors	r2, r3
10002096:	68fb      	ldr	r3, [r7, #12]
10002098:	331a      	adds	r3, #26
1000209a:	781b      	ldrb	r3, [r3, #0]
1000209c:	021b      	lsls	r3, r3, #8
1000209e:	405a      	eors	r2, r3
100020a0:	68fb      	ldr	r3, [r7, #12]
100020a2:	331b      	adds	r3, #27
100020a4:	781b      	ldrb	r3, [r3, #0]
100020a6:	4619      	mov	r1, r3
100020a8:	69fb      	ldr	r3, [r7, #28]
100020aa:	3318      	adds	r3, #24
100020ac:	404a      	eors	r2, r1
100020ae:	601a      	str	r2, [r3, #0]
    rk[7] = GETU32(userKey + 28);
100020b0:	68fb      	ldr	r3, [r7, #12]
100020b2:	331c      	adds	r3, #28
100020b4:	781b      	ldrb	r3, [r3, #0]
100020b6:	061a      	lsls	r2, r3, #24
100020b8:	68fb      	ldr	r3, [r7, #12]
100020ba:	331d      	adds	r3, #29
100020bc:	781b      	ldrb	r3, [r3, #0]
100020be:	041b      	lsls	r3, r3, #16
100020c0:	405a      	eors	r2, r3
100020c2:	68fb      	ldr	r3, [r7, #12]
100020c4:	331e      	adds	r3, #30
100020c6:	781b      	ldrb	r3, [r3, #0]
100020c8:	021b      	lsls	r3, r3, #8
100020ca:	405a      	eors	r2, r3
100020cc:	68fb      	ldr	r3, [r7, #12]
100020ce:	331f      	adds	r3, #31
100020d0:	781b      	ldrb	r3, [r3, #0]
100020d2:	4619      	mov	r1, r3
100020d4:	69fb      	ldr	r3, [r7, #28]
100020d6:	331c      	adds	r3, #28
100020d8:	404a      	eors	r2, r1
100020da:	601a      	str	r2, [r3, #0]
    if (bits == 256) {
100020dc:	68bb      	ldr	r3, [r7, #8]
100020de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
100020e2:	f040 80a2 	bne.w	1000222a <AES_set_encrypt_key+0x4be>
        while (1) {
            temp = rk[ 7];
100020e6:	69fb      	ldr	r3, [r7, #28]
100020e8:	69db      	ldr	r3, [r3, #28]
100020ea:	617b      	str	r3, [r7, #20]
            rk[ 8] = rk[ 0] ^
100020ec:	69fb      	ldr	r3, [r7, #28]
100020ee:	681a      	ldr	r2, [r3, #0]
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
100020f0:	697b      	ldr	r3, [r7, #20]
100020f2:	0c1b      	lsrs	r3, r3, #16
100020f4:	b2db      	uxtb	r3, r3
100020f6:	4950      	ldr	r1, [pc, #320]	; (10002238 <AES_set_encrypt_key+0x4cc>)
100020f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100020fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[ 8] = rk[ 0] ^
10002100:	405a      	eors	r2, r3
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10002102:	697b      	ldr	r3, [r7, #20]
10002104:	0a1b      	lsrs	r3, r3, #8
10002106:	b2db      	uxtb	r3, r3
10002108:	494c      	ldr	r1, [pc, #304]	; (1000223c <AES_set_encrypt_key+0x4d0>)
1000210a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000210e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                (Te2[(temp >> 16) & 0xff] & 0xff000000) ^
10002112:	405a      	eors	r2, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10002114:	697b      	ldr	r3, [r7, #20]
10002116:	b2db      	uxtb	r3, r3
10002118:	4949      	ldr	r1, [pc, #292]	; (10002240 <AES_set_encrypt_key+0x4d4>)
1000211a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000211e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                (Te3[(temp >>  8) & 0xff] & 0x00ff0000) ^
10002122:	405a      	eors	r2, r3
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10002124:	697b      	ldr	r3, [r7, #20]
10002126:	0e1b      	lsrs	r3, r3, #24
10002128:	4946      	ldr	r1, [pc, #280]	; (10002244 <AES_set_encrypt_key+0x4d8>)
1000212a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000212e:	b2db      	uxtb	r3, r3
                (Te0[(temp      ) & 0xff] & 0x0000ff00) ^
10002130:	ea82 0103 	eor.w	r1, r2, r3
                rcon[i];
10002134:	4a44      	ldr	r2, [pc, #272]	; (10002248 <AES_set_encrypt_key+0x4dc>)
10002136:	69bb      	ldr	r3, [r7, #24]
10002138:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[ 8] = rk[ 0] ^
1000213c:	69fb      	ldr	r3, [r7, #28]
1000213e:	3320      	adds	r3, #32
                (Te1[(temp >> 24)       ] & 0x000000ff) ^
10002140:	404a      	eors	r2, r1
            rk[ 8] = rk[ 0] ^
10002142:	601a      	str	r2, [r3, #0]
            rk[ 9] = rk[ 1] ^ rk[ 8];
10002144:	69fb      	ldr	r3, [r7, #28]
10002146:	3304      	adds	r3, #4
10002148:	6819      	ldr	r1, [r3, #0]
1000214a:	69fb      	ldr	r3, [r7, #28]
1000214c:	3320      	adds	r3, #32
1000214e:	681a      	ldr	r2, [r3, #0]
10002150:	69fb      	ldr	r3, [r7, #28]
10002152:	3324      	adds	r3, #36	; 0x24
10002154:	404a      	eors	r2, r1
10002156:	601a      	str	r2, [r3, #0]
            rk[10] = rk[ 2] ^ rk[ 9];
10002158:	69fb      	ldr	r3, [r7, #28]
1000215a:	3308      	adds	r3, #8
1000215c:	6819      	ldr	r1, [r3, #0]
1000215e:	69fb      	ldr	r3, [r7, #28]
10002160:	3324      	adds	r3, #36	; 0x24
10002162:	681a      	ldr	r2, [r3, #0]
10002164:	69fb      	ldr	r3, [r7, #28]
10002166:	3328      	adds	r3, #40	; 0x28
10002168:	404a      	eors	r2, r1
1000216a:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 3] ^ rk[10];
1000216c:	69fb      	ldr	r3, [r7, #28]
1000216e:	330c      	adds	r3, #12
10002170:	6819      	ldr	r1, [r3, #0]
10002172:	69fb      	ldr	r3, [r7, #28]
10002174:	3328      	adds	r3, #40	; 0x28
10002176:	681a      	ldr	r2, [r3, #0]
10002178:	69fb      	ldr	r3, [r7, #28]
1000217a:	332c      	adds	r3, #44	; 0x2c
1000217c:	404a      	eors	r2, r1
1000217e:	601a      	str	r2, [r3, #0]
            if (++i == 7) {
10002180:	69bb      	ldr	r3, [r7, #24]
10002182:	3301      	adds	r3, #1
10002184:	61bb      	str	r3, [r7, #24]
10002186:	69bb      	ldr	r3, [r7, #24]
10002188:	2b07      	cmp	r3, #7
1000218a:	d101      	bne.n	10002190 <AES_set_encrypt_key+0x424>
                return 0;
1000218c:	2300      	movs	r3, #0
1000218e:	e04d      	b.n	1000222c <AES_set_encrypt_key+0x4c0>
            }
            temp = rk[11];
10002190:	69fb      	ldr	r3, [r7, #28]
10002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
10002194:	617b      	str	r3, [r7, #20]
            rk[12] = rk[ 4] ^
10002196:	69fb      	ldr	r3, [r7, #28]
10002198:	3310      	adds	r3, #16
1000219a:	681a      	ldr	r2, [r3, #0]
                (Te2[(temp >> 24)       ] & 0xff000000) ^
1000219c:	697b      	ldr	r3, [r7, #20]
1000219e:	0e1b      	lsrs	r3, r3, #24
100021a0:	4925      	ldr	r1, [pc, #148]	; (10002238 <AES_set_encrypt_key+0x4cc>)
100021a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100021a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
            rk[12] = rk[ 4] ^
100021aa:	405a      	eors	r2, r3
                (Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
100021ac:	697b      	ldr	r3, [r7, #20]
100021ae:	0c1b      	lsrs	r3, r3, #16
100021b0:	b2db      	uxtb	r3, r3
100021b2:	4922      	ldr	r1, [pc, #136]	; (1000223c <AES_set_encrypt_key+0x4d0>)
100021b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100021b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                (Te2[(temp >> 24)       ] & 0xff000000) ^
100021bc:	405a      	eors	r2, r3
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
100021be:	697b      	ldr	r3, [r7, #20]
100021c0:	0a1b      	lsrs	r3, r3, #8
100021c2:	b2db      	uxtb	r3, r3
100021c4:	491e      	ldr	r1, [pc, #120]	; (10002240 <AES_set_encrypt_key+0x4d4>)
100021c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100021ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
                (Te3[(temp >> 16) & 0xff] & 0x00ff0000) ^
100021ce:	ea82 0103 	eor.w	r1, r2, r3
                (Te1[(temp      ) & 0xff] & 0x000000ff);
100021d2:	697b      	ldr	r3, [r7, #20]
100021d4:	b2db      	uxtb	r3, r3
100021d6:	4a1b      	ldr	r2, [pc, #108]	; (10002244 <AES_set_encrypt_key+0x4d8>)
100021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
100021dc:	b2da      	uxtb	r2, r3
            rk[12] = rk[ 4] ^
100021de:	69fb      	ldr	r3, [r7, #28]
100021e0:	3330      	adds	r3, #48	; 0x30
                (Te0[(temp >>  8) & 0xff] & 0x0000ff00) ^
100021e2:	404a      	eors	r2, r1
            rk[12] = rk[ 4] ^
100021e4:	601a      	str	r2, [r3, #0]
            rk[13] = rk[ 5] ^ rk[12];
100021e6:	69fb      	ldr	r3, [r7, #28]
100021e8:	3314      	adds	r3, #20
100021ea:	6819      	ldr	r1, [r3, #0]
100021ec:	69fb      	ldr	r3, [r7, #28]
100021ee:	3330      	adds	r3, #48	; 0x30
100021f0:	681a      	ldr	r2, [r3, #0]
100021f2:	69fb      	ldr	r3, [r7, #28]
100021f4:	3334      	adds	r3, #52	; 0x34
100021f6:	404a      	eors	r2, r1
100021f8:	601a      	str	r2, [r3, #0]
            rk[14] = rk[ 6] ^ rk[13];
100021fa:	69fb      	ldr	r3, [r7, #28]
100021fc:	3318      	adds	r3, #24
100021fe:	6819      	ldr	r1, [r3, #0]
10002200:	69fb      	ldr	r3, [r7, #28]
10002202:	3334      	adds	r3, #52	; 0x34
10002204:	681a      	ldr	r2, [r3, #0]
10002206:	69fb      	ldr	r3, [r7, #28]
10002208:	3338      	adds	r3, #56	; 0x38
1000220a:	404a      	eors	r2, r1
1000220c:	601a      	str	r2, [r3, #0]
            rk[15] = rk[ 7] ^ rk[14];
1000220e:	69fb      	ldr	r3, [r7, #28]
10002210:	331c      	adds	r3, #28
10002212:	6819      	ldr	r1, [r3, #0]
10002214:	69fb      	ldr	r3, [r7, #28]
10002216:	3338      	adds	r3, #56	; 0x38
10002218:	681a      	ldr	r2, [r3, #0]
1000221a:	69fb      	ldr	r3, [r7, #28]
1000221c:	333c      	adds	r3, #60	; 0x3c
1000221e:	404a      	eors	r2, r1
10002220:	601a      	str	r2, [r3, #0]

            rk += 8;
10002222:	69fb      	ldr	r3, [r7, #28]
10002224:	3320      	adds	r3, #32
10002226:	61fb      	str	r3, [r7, #28]
            temp = rk[ 7];
10002228:	e75d      	b.n	100020e6 <AES_set_encrypt_key+0x37a>
            }
    }
    return 0;
1000222a:	2300      	movs	r3, #0
}
1000222c:	4618      	mov	r0, r3
1000222e:	3724      	adds	r7, #36	; 0x24
10002230:	46bd      	mov	sp, r7
10002232:	f85d 7b04 	ldr.w	r7, [sp], #4
10002236:	4770      	bx	lr
10002238:	10003624 	.word	0x10003624
1000223c:	10003a24 	.word	0x10003a24
10002240:	10002e24 	.word	0x10002e24
10002244:	10003224 	.word	0x10003224
10002248:	10003e24 	.word	0x10003e24

1000224c <AES_encrypt>:
/*
 * Encrypt a single block
 * in and out can overlap
 */
void AES_encrypt(const unsigned char *in, unsigned char *out,
                 const AES_KEY_OSSL *key) {
1000224c:	b480      	push	{r7}
1000224e:	b08f      	sub	sp, #60	; 0x3c
10002250:	af00      	add	r7, sp, #0
10002252:	60f8      	str	r0, [r7, #12]
10002254:	60b9      	str	r1, [r7, #8]
10002256:	607a      	str	r2, [r7, #4]
#ifndef FULL_UNROLL
    int r;
#endif /* ?FULL_UNROLL */

    //assert(in && out && key);
    rk = key->rd_key;
10002258:	687b      	ldr	r3, [r7, #4]
1000225a:	637b      	str	r3, [r7, #52]	; 0x34

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    s0 = GETU32(in     ) ^ rk[0];
1000225c:	68fb      	ldr	r3, [r7, #12]
1000225e:	781b      	ldrb	r3, [r3, #0]
10002260:	061a      	lsls	r2, r3, #24
10002262:	68fb      	ldr	r3, [r7, #12]
10002264:	3301      	adds	r3, #1
10002266:	781b      	ldrb	r3, [r3, #0]
10002268:	041b      	lsls	r3, r3, #16
1000226a:	405a      	eors	r2, r3
1000226c:	68fb      	ldr	r3, [r7, #12]
1000226e:	3302      	adds	r3, #2
10002270:	781b      	ldrb	r3, [r3, #0]
10002272:	021b      	lsls	r3, r3, #8
10002274:	4053      	eors	r3, r2
10002276:	68fa      	ldr	r2, [r7, #12]
10002278:	3203      	adds	r2, #3
1000227a:	7812      	ldrb	r2, [r2, #0]
1000227c:	405a      	eors	r2, r3
1000227e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002280:	681b      	ldr	r3, [r3, #0]
10002282:	4053      	eors	r3, r2
10002284:	633b      	str	r3, [r7, #48]	; 0x30
    s1 = GETU32(in +  4) ^ rk[1];
10002286:	68fb      	ldr	r3, [r7, #12]
10002288:	3304      	adds	r3, #4
1000228a:	781b      	ldrb	r3, [r3, #0]
1000228c:	061a      	lsls	r2, r3, #24
1000228e:	68fb      	ldr	r3, [r7, #12]
10002290:	3305      	adds	r3, #5
10002292:	781b      	ldrb	r3, [r3, #0]
10002294:	041b      	lsls	r3, r3, #16
10002296:	405a      	eors	r2, r3
10002298:	68fb      	ldr	r3, [r7, #12]
1000229a:	3306      	adds	r3, #6
1000229c:	781b      	ldrb	r3, [r3, #0]
1000229e:	021b      	lsls	r3, r3, #8
100022a0:	4053      	eors	r3, r2
100022a2:	68fa      	ldr	r2, [r7, #12]
100022a4:	3207      	adds	r2, #7
100022a6:	7812      	ldrb	r2, [r2, #0]
100022a8:	405a      	eors	r2, r3
100022aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100022ac:	3304      	adds	r3, #4
100022ae:	681b      	ldr	r3, [r3, #0]
100022b0:	4053      	eors	r3, r2
100022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    s2 = GETU32(in +  8) ^ rk[2];
100022b4:	68fb      	ldr	r3, [r7, #12]
100022b6:	3308      	adds	r3, #8
100022b8:	781b      	ldrb	r3, [r3, #0]
100022ba:	061a      	lsls	r2, r3, #24
100022bc:	68fb      	ldr	r3, [r7, #12]
100022be:	3309      	adds	r3, #9
100022c0:	781b      	ldrb	r3, [r3, #0]
100022c2:	041b      	lsls	r3, r3, #16
100022c4:	405a      	eors	r2, r3
100022c6:	68fb      	ldr	r3, [r7, #12]
100022c8:	330a      	adds	r3, #10
100022ca:	781b      	ldrb	r3, [r3, #0]
100022cc:	021b      	lsls	r3, r3, #8
100022ce:	4053      	eors	r3, r2
100022d0:	68fa      	ldr	r2, [r7, #12]
100022d2:	320b      	adds	r2, #11
100022d4:	7812      	ldrb	r2, [r2, #0]
100022d6:	405a      	eors	r2, r3
100022d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100022da:	3308      	adds	r3, #8
100022dc:	681b      	ldr	r3, [r3, #0]
100022de:	4053      	eors	r3, r2
100022e0:	62bb      	str	r3, [r7, #40]	; 0x28
    s3 = GETU32(in + 12) ^ rk[3];
100022e2:	68fb      	ldr	r3, [r7, #12]
100022e4:	330c      	adds	r3, #12
100022e6:	781b      	ldrb	r3, [r3, #0]
100022e8:	061a      	lsls	r2, r3, #24
100022ea:	68fb      	ldr	r3, [r7, #12]
100022ec:	330d      	adds	r3, #13
100022ee:	781b      	ldrb	r3, [r3, #0]
100022f0:	041b      	lsls	r3, r3, #16
100022f2:	405a      	eors	r2, r3
100022f4:	68fb      	ldr	r3, [r7, #12]
100022f6:	330e      	adds	r3, #14
100022f8:	781b      	ldrb	r3, [r3, #0]
100022fa:	021b      	lsls	r3, r3, #8
100022fc:	4053      	eors	r3, r2
100022fe:	68fa      	ldr	r2, [r7, #12]
10002300:	320f      	adds	r2, #15
10002302:	7812      	ldrb	r2, [r2, #0]
10002304:	405a      	eors	r2, r3
10002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002308:	330c      	adds	r3, #12
1000230a:	681b      	ldr	r3, [r3, #0]
1000230c:	4053      	eors	r3, r2
1000230e:	627b      	str	r3, [r7, #36]	; 0x24
    rk += key->rounds << 2;
#else  /* !FULL_UNROLL */
    /*
     * Nr - 1 full rounds:
     */
    r = key->rounds >> 1;
10002310:	687b      	ldr	r3, [r7, #4]
10002312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
10002316:	105b      	asrs	r3, r3, #1
10002318:	623b      	str	r3, [r7, #32]

    for (;;) {
        t0 =
            Te0[(s0 >> 24)       ] ^
1000231a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000231c:	0e1b      	lsrs	r3, r3, #24
1000231e:	4a7b      	ldr	r2, [pc, #492]	; (1000250c <AES_encrypt+0x2c0>)
10002320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(s1 >> 16) & 0xff] ^
10002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002326:	0c1b      	lsrs	r3, r3, #16
10002328:	b2db      	uxtb	r3, r3
1000232a:	4979      	ldr	r1, [pc, #484]	; (10002510 <AES_encrypt+0x2c4>)
1000232c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(s0 >> 24)       ] ^
10002330:	405a      	eors	r2, r3
            Te2[(s2 >>  8) & 0xff] ^
10002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002334:	0a1b      	lsrs	r3, r3, #8
10002336:	b2db      	uxtb	r3, r3
10002338:	4976      	ldr	r1, [pc, #472]	; (10002514 <AES_encrypt+0x2c8>)
1000233a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(s1 >> 16) & 0xff] ^
1000233e:	405a      	eors	r2, r3
            Te3[(s3      ) & 0xff] ^
10002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002342:	b2db      	uxtb	r3, r3
10002344:	4974      	ldr	r1, [pc, #464]	; (10002518 <AES_encrypt+0x2cc>)
10002346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(s2 >>  8) & 0xff] ^
1000234a:	405a      	eors	r2, r3
            rk[4];
1000234c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000234e:	3310      	adds	r3, #16
10002350:	681b      	ldr	r3, [r3, #0]
        t0 =
10002352:	4053      	eors	r3, r2
10002354:	61fb      	str	r3, [r7, #28]
        t1 =
            Te0[(s1 >> 24)       ] ^
10002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
10002358:	0e1b      	lsrs	r3, r3, #24
1000235a:	4a6c      	ldr	r2, [pc, #432]	; (1000250c <AES_encrypt+0x2c0>)
1000235c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(s2 >> 16) & 0xff] ^
10002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002362:	0c1b      	lsrs	r3, r3, #16
10002364:	b2db      	uxtb	r3, r3
10002366:	496a      	ldr	r1, [pc, #424]	; (10002510 <AES_encrypt+0x2c4>)
10002368:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(s1 >> 24)       ] ^
1000236c:	405a      	eors	r2, r3
            Te2[(s3 >>  8) & 0xff] ^
1000236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
10002370:	0a1b      	lsrs	r3, r3, #8
10002372:	b2db      	uxtb	r3, r3
10002374:	4967      	ldr	r1, [pc, #412]	; (10002514 <AES_encrypt+0x2c8>)
10002376:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(s2 >> 16) & 0xff] ^
1000237a:	405a      	eors	r2, r3
            Te3[(s0      ) & 0xff] ^
1000237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000237e:	b2db      	uxtb	r3, r3
10002380:	4965      	ldr	r1, [pc, #404]	; (10002518 <AES_encrypt+0x2cc>)
10002382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(s3 >>  8) & 0xff] ^
10002386:	405a      	eors	r2, r3
            rk[5];
10002388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000238a:	3314      	adds	r3, #20
1000238c:	681b      	ldr	r3, [r3, #0]
        t1 =
1000238e:	4053      	eors	r3, r2
10002390:	61bb      	str	r3, [r7, #24]
        t2 =
            Te0[(s2 >> 24)       ] ^
10002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002394:	0e1b      	lsrs	r3, r3, #24
10002396:	4a5d      	ldr	r2, [pc, #372]	; (1000250c <AES_encrypt+0x2c0>)
10002398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(s3 >> 16) & 0xff] ^
1000239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1000239e:	0c1b      	lsrs	r3, r3, #16
100023a0:	b2db      	uxtb	r3, r3
100023a2:	495b      	ldr	r1, [pc, #364]	; (10002510 <AES_encrypt+0x2c4>)
100023a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(s2 >> 24)       ] ^
100023a8:	405a      	eors	r2, r3
            Te2[(s0 >>  8) & 0xff] ^
100023aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100023ac:	0a1b      	lsrs	r3, r3, #8
100023ae:	b2db      	uxtb	r3, r3
100023b0:	4958      	ldr	r1, [pc, #352]	; (10002514 <AES_encrypt+0x2c8>)
100023b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(s3 >> 16) & 0xff] ^
100023b6:	405a      	eors	r2, r3
            Te3[(s1      ) & 0xff] ^
100023b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100023ba:	b2db      	uxtb	r3, r3
100023bc:	4956      	ldr	r1, [pc, #344]	; (10002518 <AES_encrypt+0x2cc>)
100023be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(s0 >>  8) & 0xff] ^
100023c2:	405a      	eors	r2, r3
            rk[6];
100023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100023c6:	3318      	adds	r3, #24
100023c8:	681b      	ldr	r3, [r3, #0]
        t2 =
100023ca:	4053      	eors	r3, r2
100023cc:	617b      	str	r3, [r7, #20]
        t3 =
            Te0[(s3 >> 24)       ] ^
100023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100023d0:	0e1b      	lsrs	r3, r3, #24
100023d2:	4a4e      	ldr	r2, [pc, #312]	; (1000250c <AES_encrypt+0x2c0>)
100023d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
100023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
100023da:	0c1b      	lsrs	r3, r3, #16
100023dc:	b2db      	uxtb	r3, r3
100023de:	494c      	ldr	r1, [pc, #304]	; (10002510 <AES_encrypt+0x2c4>)
100023e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(s3 >> 24)       ] ^
100023e4:	405a      	eors	r2, r3
            Te2[(s1 >>  8) & 0xff] ^
100023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100023e8:	0a1b      	lsrs	r3, r3, #8
100023ea:	b2db      	uxtb	r3, r3
100023ec:	4949      	ldr	r1, [pc, #292]	; (10002514 <AES_encrypt+0x2c8>)
100023ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(s0 >> 16) & 0xff] ^
100023f2:	405a      	eors	r2, r3
            Te3[(s2      ) & 0xff] ^
100023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
100023f6:	b2db      	uxtb	r3, r3
100023f8:	4947      	ldr	r1, [pc, #284]	; (10002518 <AES_encrypt+0x2cc>)
100023fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(s1 >>  8) & 0xff] ^
100023fe:	405a      	eors	r2, r3
            rk[7];
10002400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002402:	331c      	adds	r3, #28
10002404:	681b      	ldr	r3, [r3, #0]
        t3 =
10002406:	4053      	eors	r3, r2
10002408:	613b      	str	r3, [r7, #16]


        rk += 8;
1000240a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000240c:	3320      	adds	r3, #32
1000240e:	637b      	str	r3, [r7, #52]	; 0x34
        if (--r == 0) {
10002410:	6a3b      	ldr	r3, [r7, #32]
10002412:	3b01      	subs	r3, #1
10002414:	623b      	str	r3, [r7, #32]
10002416:	6a3b      	ldr	r3, [r7, #32]
10002418:	2b00      	cmp	r3, #0
1000241a:	d07f      	beq.n	1000251c <AES_encrypt+0x2d0>
            break;
        }

        s0 =
            Te0[(t0 >> 24)       ] ^
1000241c:	69fb      	ldr	r3, [r7, #28]
1000241e:	0e1b      	lsrs	r3, r3, #24
10002420:	4a3a      	ldr	r2, [pc, #232]	; (1000250c <AES_encrypt+0x2c0>)
10002422:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(t1 >> 16) & 0xff] ^
10002426:	69bb      	ldr	r3, [r7, #24]
10002428:	0c1b      	lsrs	r3, r3, #16
1000242a:	b2db      	uxtb	r3, r3
1000242c:	4938      	ldr	r1, [pc, #224]	; (10002510 <AES_encrypt+0x2c4>)
1000242e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(t0 >> 24)       ] ^
10002432:	405a      	eors	r2, r3
            Te2[(t2 >>  8) & 0xff] ^
10002434:	697b      	ldr	r3, [r7, #20]
10002436:	0a1b      	lsrs	r3, r3, #8
10002438:	b2db      	uxtb	r3, r3
1000243a:	4936      	ldr	r1, [pc, #216]	; (10002514 <AES_encrypt+0x2c8>)
1000243c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(t1 >> 16) & 0xff] ^
10002440:	405a      	eors	r2, r3
            Te3[(t3      ) & 0xff] ^
10002442:	693b      	ldr	r3, [r7, #16]
10002444:	b2db      	uxtb	r3, r3
10002446:	4934      	ldr	r1, [pc, #208]	; (10002518 <AES_encrypt+0x2cc>)
10002448:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(t2 >>  8) & 0xff] ^
1000244c:	405a      	eors	r2, r3
            rk[0];
1000244e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002450:	681b      	ldr	r3, [r3, #0]
        s0 =
10002452:	4053      	eors	r3, r2
10002454:	633b      	str	r3, [r7, #48]	; 0x30
        s1 =
            Te0[(t1 >> 24)       ] ^
10002456:	69bb      	ldr	r3, [r7, #24]
10002458:	0e1b      	lsrs	r3, r3, #24
1000245a:	4a2c      	ldr	r2, [pc, #176]	; (1000250c <AES_encrypt+0x2c0>)
1000245c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(t2 >> 16) & 0xff] ^
10002460:	697b      	ldr	r3, [r7, #20]
10002462:	0c1b      	lsrs	r3, r3, #16
10002464:	b2db      	uxtb	r3, r3
10002466:	492a      	ldr	r1, [pc, #168]	; (10002510 <AES_encrypt+0x2c4>)
10002468:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(t1 >> 24)       ] ^
1000246c:	405a      	eors	r2, r3
            Te2[(t3 >>  8) & 0xff] ^
1000246e:	693b      	ldr	r3, [r7, #16]
10002470:	0a1b      	lsrs	r3, r3, #8
10002472:	b2db      	uxtb	r3, r3
10002474:	4927      	ldr	r1, [pc, #156]	; (10002514 <AES_encrypt+0x2c8>)
10002476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(t2 >> 16) & 0xff] ^
1000247a:	405a      	eors	r2, r3
            Te3[(t0      ) & 0xff] ^
1000247c:	69fb      	ldr	r3, [r7, #28]
1000247e:	b2db      	uxtb	r3, r3
10002480:	4925      	ldr	r1, [pc, #148]	; (10002518 <AES_encrypt+0x2cc>)
10002482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(t3 >>  8) & 0xff] ^
10002486:	405a      	eors	r2, r3
            rk[1];
10002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000248a:	3304      	adds	r3, #4
1000248c:	681b      	ldr	r3, [r3, #0]
        s1 =
1000248e:	4053      	eors	r3, r2
10002490:	62fb      	str	r3, [r7, #44]	; 0x2c
        s2 =
            Te0[(t2 >> 24)       ] ^
10002492:	697b      	ldr	r3, [r7, #20]
10002494:	0e1b      	lsrs	r3, r3, #24
10002496:	4a1d      	ldr	r2, [pc, #116]	; (1000250c <AES_encrypt+0x2c0>)
10002498:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(t3 >> 16) & 0xff] ^
1000249c:	693b      	ldr	r3, [r7, #16]
1000249e:	0c1b      	lsrs	r3, r3, #16
100024a0:	b2db      	uxtb	r3, r3
100024a2:	491b      	ldr	r1, [pc, #108]	; (10002510 <AES_encrypt+0x2c4>)
100024a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(t2 >> 24)       ] ^
100024a8:	405a      	eors	r2, r3
            Te2[(t0 >>  8) & 0xff] ^
100024aa:	69fb      	ldr	r3, [r7, #28]
100024ac:	0a1b      	lsrs	r3, r3, #8
100024ae:	b2db      	uxtb	r3, r3
100024b0:	4918      	ldr	r1, [pc, #96]	; (10002514 <AES_encrypt+0x2c8>)
100024b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(t3 >> 16) & 0xff] ^
100024b6:	405a      	eors	r2, r3
            Te3[(t1      ) & 0xff] ^
100024b8:	69bb      	ldr	r3, [r7, #24]
100024ba:	b2db      	uxtb	r3, r3
100024bc:	4916      	ldr	r1, [pc, #88]	; (10002518 <AES_encrypt+0x2cc>)
100024be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(t0 >>  8) & 0xff] ^
100024c2:	405a      	eors	r2, r3
            rk[2];
100024c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100024c6:	3308      	adds	r3, #8
100024c8:	681b      	ldr	r3, [r3, #0]
        s2 =
100024ca:	4053      	eors	r3, r2
100024cc:	62bb      	str	r3, [r7, #40]	; 0x28
        s3 =
            Te0[(t3 >> 24)       ] ^
100024ce:	693b      	ldr	r3, [r7, #16]
100024d0:	0e1b      	lsrs	r3, r3, #24
100024d2:	4a0e      	ldr	r2, [pc, #56]	; (1000250c <AES_encrypt+0x2c0>)
100024d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            Te1[(t0 >> 16) & 0xff] ^
100024d8:	69fb      	ldr	r3, [r7, #28]
100024da:	0c1b      	lsrs	r3, r3, #16
100024dc:	b2db      	uxtb	r3, r3
100024de:	490c      	ldr	r1, [pc, #48]	; (10002510 <AES_encrypt+0x2c4>)
100024e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te0[(t3 >> 24)       ] ^
100024e4:	405a      	eors	r2, r3
            Te2[(t1 >>  8) & 0xff] ^
100024e6:	69bb      	ldr	r3, [r7, #24]
100024e8:	0a1b      	lsrs	r3, r3, #8
100024ea:	b2db      	uxtb	r3, r3
100024ec:	4909      	ldr	r1, [pc, #36]	; (10002514 <AES_encrypt+0x2c8>)
100024ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te1[(t0 >> 16) & 0xff] ^
100024f2:	405a      	eors	r2, r3
            Te3[(t2      ) & 0xff] ^
100024f4:	697b      	ldr	r3, [r7, #20]
100024f6:	b2db      	uxtb	r3, r3
100024f8:	4907      	ldr	r1, [pc, #28]	; (10002518 <AES_encrypt+0x2cc>)
100024fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
            Te2[(t1 >>  8) & 0xff] ^
100024fe:	405a      	eors	r2, r3
            rk[3];
10002500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002502:	330c      	adds	r3, #12
10002504:	681b      	ldr	r3, [r3, #0]
        s3 =
10002506:	4053      	eors	r3, r2
10002508:	627b      	str	r3, [r7, #36]	; 0x24
        t0 =
1000250a:	e706      	b.n	1000231a <AES_encrypt+0xce>
1000250c:	10002e24 	.word	0x10002e24
10002510:	10003224 	.word	0x10003224
10002514:	10003624 	.word	0x10003624
10002518:	10003a24 	.word	0x10003a24
            break;
1000251c:	bf00      	nop
    /*
     * apply last round and
     * map cipher state to byte array block:
     */
    s0 =
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
1000251e:	69fb      	ldr	r3, [r7, #28]
10002520:	0e1b      	lsrs	r3, r3, #24
10002522:	4a79      	ldr	r2, [pc, #484]	; (10002708 <AES_encrypt+0x4bc>)
10002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002528:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
        (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
1000252c:	69bb      	ldr	r3, [r7, #24]
1000252e:	0c1b      	lsrs	r3, r3, #16
10002530:	b2db      	uxtb	r3, r3
10002532:	4976      	ldr	r1, [pc, #472]	; (1000270c <AES_encrypt+0x4c0>)
10002534:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10002538:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te2[(t0 >> 24)       ] & 0xff000000) ^
1000253c:	431a      	orrs	r2, r3
        (Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
1000253e:	697b      	ldr	r3, [r7, #20]
10002540:	0a1b      	lsrs	r3, r3, #8
10002542:	b2db      	uxtb	r3, r3
10002544:	4972      	ldr	r1, [pc, #456]	; (10002710 <AES_encrypt+0x4c4>)
10002546:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000254a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te3[(t1 >> 16) & 0xff] & 0x00ff0000) ^
1000254e:	405a      	eors	r2, r3
        (Te1[(t3      ) & 0xff] & 0x000000ff) ^
10002550:	693b      	ldr	r3, [r7, #16]
10002552:	b2db      	uxtb	r3, r3
10002554:	496f      	ldr	r1, [pc, #444]	; (10002714 <AES_encrypt+0x4c8>)
10002556:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000255a:	b2db      	uxtb	r3, r3
        (Te0[(t2 >>  8) & 0xff] & 0x0000ff00) ^
1000255c:	405a      	eors	r2, r3
        rk[0];
1000255e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
10002560:	681b      	ldr	r3, [r3, #0]
    s0 =
10002562:	4053      	eors	r3, r2
10002564:	633b      	str	r3, [r7, #48]	; 0x30
    PUTU32(out     , s0);
10002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002568:	0e1b      	lsrs	r3, r3, #24
1000256a:	b2da      	uxtb	r2, r3
1000256c:	68bb      	ldr	r3, [r7, #8]
1000256e:	701a      	strb	r2, [r3, #0]
10002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
10002572:	0c1a      	lsrs	r2, r3, #16
10002574:	68bb      	ldr	r3, [r7, #8]
10002576:	3301      	adds	r3, #1
10002578:	b2d2      	uxtb	r2, r2
1000257a:	701a      	strb	r2, [r3, #0]
1000257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
1000257e:	0a1a      	lsrs	r2, r3, #8
10002580:	68bb      	ldr	r3, [r7, #8]
10002582:	3302      	adds	r3, #2
10002584:	b2d2      	uxtb	r2, r2
10002586:	701a      	strb	r2, [r3, #0]
10002588:	68bb      	ldr	r3, [r7, #8]
1000258a:	3303      	adds	r3, #3
1000258c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
1000258e:	b2d2      	uxtb	r2, r2
10002590:	701a      	strb	r2, [r3, #0]
    s1 =
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
10002592:	69bb      	ldr	r3, [r7, #24]
10002594:	0e1b      	lsrs	r3, r3, #24
10002596:	4a5c      	ldr	r2, [pc, #368]	; (10002708 <AES_encrypt+0x4bc>)
10002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000259c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
100025a0:	697b      	ldr	r3, [r7, #20]
100025a2:	0c1b      	lsrs	r3, r3, #16
100025a4:	b2db      	uxtb	r3, r3
100025a6:	4959      	ldr	r1, [pc, #356]	; (1000270c <AES_encrypt+0x4c0>)
100025a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100025ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te2[(t1 >> 24)       ] & 0xff000000) ^
100025b0:	431a      	orrs	r2, r3
        (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
100025b2:	693b      	ldr	r3, [r7, #16]
100025b4:	0a1b      	lsrs	r3, r3, #8
100025b6:	b2db      	uxtb	r3, r3
100025b8:	4955      	ldr	r1, [pc, #340]	; (10002710 <AES_encrypt+0x4c4>)
100025ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100025be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te3[(t2 >> 16) & 0xff] & 0x00ff0000) ^
100025c2:	405a      	eors	r2, r3
        (Te1[(t0      ) & 0xff] & 0x000000ff) ^
100025c4:	69fb      	ldr	r3, [r7, #28]
100025c6:	b2db      	uxtb	r3, r3
100025c8:	4952      	ldr	r1, [pc, #328]	; (10002714 <AES_encrypt+0x4c8>)
100025ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100025ce:	b2db      	uxtb	r3, r3
        (Te0[(t3 >>  8) & 0xff] & 0x0000ff00) ^
100025d0:	405a      	eors	r2, r3
        rk[1];
100025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100025d4:	3304      	adds	r3, #4
100025d6:	681b      	ldr	r3, [r3, #0]
    s1 =
100025d8:	4053      	eors	r3, r2
100025da:	62fb      	str	r3, [r7, #44]	; 0x2c
    PUTU32(out +  4, s1);
100025dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100025de:	0e1a      	lsrs	r2, r3, #24
100025e0:	68bb      	ldr	r3, [r7, #8]
100025e2:	3304      	adds	r3, #4
100025e4:	b2d2      	uxtb	r2, r2
100025e6:	701a      	strb	r2, [r3, #0]
100025e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100025ea:	0c1a      	lsrs	r2, r3, #16
100025ec:	68bb      	ldr	r3, [r7, #8]
100025ee:	3305      	adds	r3, #5
100025f0:	b2d2      	uxtb	r2, r2
100025f2:	701a      	strb	r2, [r3, #0]
100025f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
100025f6:	0a1a      	lsrs	r2, r3, #8
100025f8:	68bb      	ldr	r3, [r7, #8]
100025fa:	3306      	adds	r3, #6
100025fc:	b2d2      	uxtb	r2, r2
100025fe:	701a      	strb	r2, [r3, #0]
10002600:	68bb      	ldr	r3, [r7, #8]
10002602:	3307      	adds	r3, #7
10002604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
10002606:	b2d2      	uxtb	r2, r2
10002608:	701a      	strb	r2, [r3, #0]
    s2 =
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
1000260a:	697b      	ldr	r3, [r7, #20]
1000260c:	0e1b      	lsrs	r3, r3, #24
1000260e:	4a3e      	ldr	r2, [pc, #248]	; (10002708 <AES_encrypt+0x4bc>)
10002610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
10002614:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
10002618:	693b      	ldr	r3, [r7, #16]
1000261a:	0c1b      	lsrs	r3, r3, #16
1000261c:	b2db      	uxtb	r3, r3
1000261e:	493b      	ldr	r1, [pc, #236]	; (1000270c <AES_encrypt+0x4c0>)
10002620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10002624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te2[(t2 >> 24)       ] & 0xff000000) ^
10002628:	431a      	orrs	r2, r3
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
1000262a:	69fb      	ldr	r3, [r7, #28]
1000262c:	0a1b      	lsrs	r3, r3, #8
1000262e:	b2db      	uxtb	r3, r3
10002630:	4937      	ldr	r1, [pc, #220]	; (10002710 <AES_encrypt+0x4c4>)
10002632:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10002636:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te3[(t3 >> 16) & 0xff] & 0x00ff0000) ^
1000263a:	405a      	eors	r2, r3
        (Te1[(t1      ) & 0xff] & 0x000000ff) ^
1000263c:	69bb      	ldr	r3, [r7, #24]
1000263e:	b2db      	uxtb	r3, r3
10002640:	4934      	ldr	r1, [pc, #208]	; (10002714 <AES_encrypt+0x4c8>)
10002642:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
10002646:	b2db      	uxtb	r3, r3
        (Te0[(t0 >>  8) & 0xff] & 0x0000ff00) ^
10002648:	405a      	eors	r2, r3
        rk[2];
1000264a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
1000264c:	3308      	adds	r3, #8
1000264e:	681b      	ldr	r3, [r3, #0]
    s2 =
10002650:	4053      	eors	r3, r2
10002652:	62bb      	str	r3, [r7, #40]	; 0x28
    PUTU32(out +  8, s2);
10002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002656:	0e1a      	lsrs	r2, r3, #24
10002658:	68bb      	ldr	r3, [r7, #8]
1000265a:	3308      	adds	r3, #8
1000265c:	b2d2      	uxtb	r2, r2
1000265e:	701a      	strb	r2, [r3, #0]
10002660:	6abb      	ldr	r3, [r7, #40]	; 0x28
10002662:	0c1a      	lsrs	r2, r3, #16
10002664:	68bb      	ldr	r3, [r7, #8]
10002666:	3309      	adds	r3, #9
10002668:	b2d2      	uxtb	r2, r2
1000266a:	701a      	strb	r2, [r3, #0]
1000266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
1000266e:	0a1a      	lsrs	r2, r3, #8
10002670:	68bb      	ldr	r3, [r7, #8]
10002672:	330a      	adds	r3, #10
10002674:	b2d2      	uxtb	r2, r2
10002676:	701a      	strb	r2, [r3, #0]
10002678:	68bb      	ldr	r3, [r7, #8]
1000267a:	330b      	adds	r3, #11
1000267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
1000267e:	b2d2      	uxtb	r2, r2
10002680:	701a      	strb	r2, [r3, #0]
    s3 =
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
10002682:	693b      	ldr	r3, [r7, #16]
10002684:	0e1b      	lsrs	r3, r3, #24
10002686:	4a20      	ldr	r2, [pc, #128]	; (10002708 <AES_encrypt+0x4bc>)
10002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1000268c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
10002690:	69fb      	ldr	r3, [r7, #28]
10002692:	0c1b      	lsrs	r3, r3, #16
10002694:	b2db      	uxtb	r3, r3
10002696:	491d      	ldr	r1, [pc, #116]	; (1000270c <AES_encrypt+0x4c0>)
10002698:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
1000269c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
        (Te2[(t3 >> 24)       ] & 0xff000000) ^
100026a0:	431a      	orrs	r2, r3
        (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
100026a2:	69bb      	ldr	r3, [r7, #24]
100026a4:	0a1b      	lsrs	r3, r3, #8
100026a6:	b2db      	uxtb	r3, r3
100026a8:	4919      	ldr	r1, [pc, #100]	; (10002710 <AES_encrypt+0x4c4>)
100026aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100026ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
        (Te3[(t0 >> 16) & 0xff] & 0x00ff0000) ^
100026b2:	405a      	eors	r2, r3
        (Te1[(t2      ) & 0xff] & 0x000000ff) ^
100026b4:	697b      	ldr	r3, [r7, #20]
100026b6:	b2db      	uxtb	r3, r3
100026b8:	4916      	ldr	r1, [pc, #88]	; (10002714 <AES_encrypt+0x4c8>)
100026ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
100026be:	b2db      	uxtb	r3, r3
        (Te0[(t1 >>  8) & 0xff] & 0x0000ff00) ^
100026c0:	405a      	eors	r2, r3
        rk[3];
100026c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
100026c4:	330c      	adds	r3, #12
100026c6:	681b      	ldr	r3, [r3, #0]
    s3 =
100026c8:	4053      	eors	r3, r2
100026ca:	627b      	str	r3, [r7, #36]	; 0x24
    PUTU32(out + 12, s3);
100026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026ce:	0e1a      	lsrs	r2, r3, #24
100026d0:	68bb      	ldr	r3, [r7, #8]
100026d2:	330c      	adds	r3, #12
100026d4:	b2d2      	uxtb	r2, r2
100026d6:	701a      	strb	r2, [r3, #0]
100026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026da:	0c1a      	lsrs	r2, r3, #16
100026dc:	68bb      	ldr	r3, [r7, #8]
100026de:	330d      	adds	r3, #13
100026e0:	b2d2      	uxtb	r2, r2
100026e2:	701a      	strb	r2, [r3, #0]
100026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
100026e6:	0a1a      	lsrs	r2, r3, #8
100026e8:	68bb      	ldr	r3, [r7, #8]
100026ea:	330e      	adds	r3, #14
100026ec:	b2d2      	uxtb	r2, r2
100026ee:	701a      	strb	r2, [r3, #0]
100026f0:	68bb      	ldr	r3, [r7, #8]
100026f2:	330f      	adds	r3, #15
100026f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
100026f6:	b2d2      	uxtb	r2, r2
100026f8:	701a      	strb	r2, [r3, #0]
}
100026fa:	bf00      	nop
100026fc:	373c      	adds	r7, #60	; 0x3c
100026fe:	46bd      	mov	sp, r7
10002700:	f85d 7b04 	ldr.w	r7, [sp], #4
10002704:	4770      	bx	lr
10002706:	bf00      	nop
10002708:	10003624 	.word	0x10003624
1000270c:	10003a24 	.word	0x10003a24
10002710:	10002e24 	.word	0x10002e24
10002714:	10003224 	.word	0x10003224

10002718 <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
10002718:	b480      	push	{r7}
1000271a:	b089      	sub	sp, #36	; 0x24
1000271c:	af00      	add	r7, sp, #0
1000271e:	6078      	str	r0, [r7, #4]
10002720:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
10002722:	2300      	movs	r3, #0
10002724:	61fb      	str	r3, [r7, #28]
10002726:	e030      	b.n	1000278a <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
10002728:	69fb      	ldr	r3, [r7, #28]
1000272a:	009b      	lsls	r3, r3, #2
1000272c:	683a      	ldr	r2, [r7, #0]
1000272e:	441a      	add	r2, r3
10002730:	69fb      	ldr	r3, [r7, #28]
10002732:	009b      	lsls	r3, r3, #2
10002734:	6879      	ldr	r1, [r7, #4]
10002736:	440b      	add	r3, r1
10002738:	7812      	ldrb	r2, [r2, #0]
1000273a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
1000273c:	69fb      	ldr	r3, [r7, #28]
1000273e:	009b      	lsls	r3, r3, #2
10002740:	3301      	adds	r3, #1
10002742:	683a      	ldr	r2, [r7, #0]
10002744:	441a      	add	r2, r3
10002746:	69fb      	ldr	r3, [r7, #28]
10002748:	009b      	lsls	r3, r3, #2
1000274a:	3301      	adds	r3, #1
1000274c:	6879      	ldr	r1, [r7, #4]
1000274e:	440b      	add	r3, r1
10002750:	7812      	ldrb	r2, [r2, #0]
10002752:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
10002754:	69fb      	ldr	r3, [r7, #28]
10002756:	009b      	lsls	r3, r3, #2
10002758:	3302      	adds	r3, #2
1000275a:	683a      	ldr	r2, [r7, #0]
1000275c:	441a      	add	r2, r3
1000275e:	69fb      	ldr	r3, [r7, #28]
10002760:	009b      	lsls	r3, r3, #2
10002762:	3302      	adds	r3, #2
10002764:	6879      	ldr	r1, [r7, #4]
10002766:	440b      	add	r3, r1
10002768:	7812      	ldrb	r2, [r2, #0]
1000276a:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
1000276c:	69fb      	ldr	r3, [r7, #28]
1000276e:	009b      	lsls	r3, r3, #2
10002770:	3303      	adds	r3, #3
10002772:	683a      	ldr	r2, [r7, #0]
10002774:	441a      	add	r2, r3
10002776:	69fb      	ldr	r3, [r7, #28]
10002778:	009b      	lsls	r3, r3, #2
1000277a:	3303      	adds	r3, #3
1000277c:	6879      	ldr	r1, [r7, #4]
1000277e:	440b      	add	r3, r1
10002780:	7812      	ldrb	r2, [r2, #0]
10002782:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
10002784:	69fb      	ldr	r3, [r7, #28]
10002786:	3301      	adds	r3, #1
10002788:	61fb      	str	r3, [r7, #28]
1000278a:	69fb      	ldr	r3, [r7, #28]
1000278c:	2b03      	cmp	r3, #3
1000278e:	d9cb      	bls.n	10002728 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
10002790:	2304      	movs	r3, #4
10002792:	61fb      	str	r3, [r7, #28]
10002794:	e085      	b.n	100028a2 <KeyExpansion+0x18a>
  {
    {
      k = (i - 1) * 4;
10002796:	69fb      	ldr	r3, [r7, #28]
10002798:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1000279c:	3b01      	subs	r3, #1
1000279e:	009b      	lsls	r3, r3, #2
100027a0:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
100027a2:	687a      	ldr	r2, [r7, #4]
100027a4:	69bb      	ldr	r3, [r7, #24]
100027a6:	4413      	add	r3, r2
100027a8:	781b      	ldrb	r3, [r3, #0]
100027aa:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
100027ac:	69bb      	ldr	r3, [r7, #24]
100027ae:	3301      	adds	r3, #1
100027b0:	687a      	ldr	r2, [r7, #4]
100027b2:	4413      	add	r3, r2
100027b4:	781b      	ldrb	r3, [r3, #0]
100027b6:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
100027b8:	69bb      	ldr	r3, [r7, #24]
100027ba:	3302      	adds	r3, #2
100027bc:	687a      	ldr	r2, [r7, #4]
100027be:	4413      	add	r3, r2
100027c0:	781b      	ldrb	r3, [r3, #0]
100027c2:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
100027c4:	69bb      	ldr	r3, [r7, #24]
100027c6:	3303      	adds	r3, #3
100027c8:	687a      	ldr	r2, [r7, #4]
100027ca:	4413      	add	r3, r2
100027cc:	781b      	ldrb	r3, [r3, #0]
100027ce:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
100027d0:	69fb      	ldr	r3, [r7, #28]
100027d2:	f003 0303 	and.w	r3, r3, #3
100027d6:	2b00      	cmp	r3, #0
100027d8:	d125      	bne.n	10002826 <KeyExpansion+0x10e>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
100027da:	7b3b      	ldrb	r3, [r7, #12]
100027dc:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
100027de:	7b7b      	ldrb	r3, [r7, #13]
100027e0:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
100027e2:	7bbb      	ldrb	r3, [r7, #14]
100027e4:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
100027e6:	7bfb      	ldrb	r3, [r7, #15]
100027e8:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
100027ea:	7dfb      	ldrb	r3, [r7, #23]
100027ec:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
100027ee:	7b3b      	ldrb	r3, [r7, #12]
100027f0:	461a      	mov	r2, r3
100027f2:	4b31      	ldr	r3, [pc, #196]	; (100028b8 <KeyExpansion+0x1a0>)
100027f4:	5c9b      	ldrb	r3, [r3, r2]
100027f6:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
100027f8:	7b7b      	ldrb	r3, [r7, #13]
100027fa:	461a      	mov	r2, r3
100027fc:	4b2e      	ldr	r3, [pc, #184]	; (100028b8 <KeyExpansion+0x1a0>)
100027fe:	5c9b      	ldrb	r3, [r3, r2]
10002800:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
10002802:	7bbb      	ldrb	r3, [r7, #14]
10002804:	461a      	mov	r2, r3
10002806:	4b2c      	ldr	r3, [pc, #176]	; (100028b8 <KeyExpansion+0x1a0>)
10002808:	5c9b      	ldrb	r3, [r3, r2]
1000280a:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
1000280c:	7bfb      	ldrb	r3, [r7, #15]
1000280e:	461a      	mov	r2, r3
10002810:	4b29      	ldr	r3, [pc, #164]	; (100028b8 <KeyExpansion+0x1a0>)
10002812:	5c9b      	ldrb	r3, [r3, r2]
10002814:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
10002816:	7b3a      	ldrb	r2, [r7, #12]
10002818:	69fb      	ldr	r3, [r7, #28]
1000281a:	089b      	lsrs	r3, r3, #2
1000281c:	4927      	ldr	r1, [pc, #156]	; (100028bc <KeyExpansion+0x1a4>)
1000281e:	5ccb      	ldrb	r3, [r1, r3]
10002820:	4053      	eors	r3, r2
10002822:	b2db      	uxtb	r3, r3
10002824:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
10002826:	69fb      	ldr	r3, [r7, #28]
10002828:	009b      	lsls	r3, r3, #2
1000282a:	613b      	str	r3, [r7, #16]
1000282c:	69fb      	ldr	r3, [r7, #28]
1000282e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
10002832:	3b04      	subs	r3, #4
10002834:	009b      	lsls	r3, r3, #2
10002836:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
10002838:	687a      	ldr	r2, [r7, #4]
1000283a:	69bb      	ldr	r3, [r7, #24]
1000283c:	4413      	add	r3, r2
1000283e:	7819      	ldrb	r1, [r3, #0]
10002840:	7b3a      	ldrb	r2, [r7, #12]
10002842:	6878      	ldr	r0, [r7, #4]
10002844:	693b      	ldr	r3, [r7, #16]
10002846:	4403      	add	r3, r0
10002848:	404a      	eors	r2, r1
1000284a:	b2d2      	uxtb	r2, r2
1000284c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
1000284e:	69bb      	ldr	r3, [r7, #24]
10002850:	3301      	adds	r3, #1
10002852:	687a      	ldr	r2, [r7, #4]
10002854:	4413      	add	r3, r2
10002856:	7819      	ldrb	r1, [r3, #0]
10002858:	7b7a      	ldrb	r2, [r7, #13]
1000285a:	693b      	ldr	r3, [r7, #16]
1000285c:	3301      	adds	r3, #1
1000285e:	6878      	ldr	r0, [r7, #4]
10002860:	4403      	add	r3, r0
10002862:	404a      	eors	r2, r1
10002864:	b2d2      	uxtb	r2, r2
10002866:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
10002868:	69bb      	ldr	r3, [r7, #24]
1000286a:	3302      	adds	r3, #2
1000286c:	687a      	ldr	r2, [r7, #4]
1000286e:	4413      	add	r3, r2
10002870:	7819      	ldrb	r1, [r3, #0]
10002872:	7bba      	ldrb	r2, [r7, #14]
10002874:	693b      	ldr	r3, [r7, #16]
10002876:	3302      	adds	r3, #2
10002878:	6878      	ldr	r0, [r7, #4]
1000287a:	4403      	add	r3, r0
1000287c:	404a      	eors	r2, r1
1000287e:	b2d2      	uxtb	r2, r2
10002880:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
10002882:	69bb      	ldr	r3, [r7, #24]
10002884:	3303      	adds	r3, #3
10002886:	687a      	ldr	r2, [r7, #4]
10002888:	4413      	add	r3, r2
1000288a:	7819      	ldrb	r1, [r3, #0]
1000288c:	7bfa      	ldrb	r2, [r7, #15]
1000288e:	693b      	ldr	r3, [r7, #16]
10002890:	3303      	adds	r3, #3
10002892:	6878      	ldr	r0, [r7, #4]
10002894:	4403      	add	r3, r0
10002896:	404a      	eors	r2, r1
10002898:	b2d2      	uxtb	r2, r2
1000289a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
1000289c:	69fb      	ldr	r3, [r7, #28]
1000289e:	3301      	adds	r3, #1
100028a0:	61fb      	str	r3, [r7, #28]
100028a2:	69fb      	ldr	r3, [r7, #28]
100028a4:	2b2b      	cmp	r3, #43	; 0x2b
100028a6:	f67f af76 	bls.w	10002796 <KeyExpansion+0x7e>
  }
}
100028aa:	bf00      	nop
100028ac:	3724      	adds	r7, #36	; 0x24
100028ae:	46bd      	mov	sp, r7
100028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
100028b4:	4770      	bx	lr
100028b6:	bf00      	nop
100028b8:	10003e4c 	.word	0x10003e4c
100028bc:	10003f4c 	.word	0x10003f4c

100028c0 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
100028c0:	b580      	push	{r7, lr}
100028c2:	b082      	sub	sp, #8
100028c4:	af00      	add	r7, sp, #0
100028c6:	6078      	str	r0, [r7, #4]
100028c8:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
100028ca:	687b      	ldr	r3, [r7, #4]
100028cc:	6839      	ldr	r1, [r7, #0]
100028ce:	4618      	mov	r0, r3
100028d0:	f7ff ff22 	bl	10002718 <KeyExpansion>
}
100028d4:	bf00      	nop
100028d6:	3708      	adds	r7, #8
100028d8:	46bd      	mov	sp, r7
100028da:	bd80      	pop	{r7, pc}

100028dc <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
100028dc:	b480      	push	{r7}
100028de:	b087      	sub	sp, #28
100028e0:	af00      	add	r7, sp, #0
100028e2:	4603      	mov	r3, r0
100028e4:	60b9      	str	r1, [r7, #8]
100028e6:	607a      	str	r2, [r7, #4]
100028e8:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
100028ea:	2300      	movs	r3, #0
100028ec:	75fb      	strb	r3, [r7, #23]
100028ee:	e027      	b.n	10002940 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
100028f0:	2300      	movs	r3, #0
100028f2:	75bb      	strb	r3, [r7, #22]
100028f4:	e01e      	b.n	10002934 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
100028f6:	7dfa      	ldrb	r2, [r7, #23]
100028f8:	7dbb      	ldrb	r3, [r7, #22]
100028fa:	68b9      	ldr	r1, [r7, #8]
100028fc:	0092      	lsls	r2, r2, #2
100028fe:	440a      	add	r2, r1
10002900:	4413      	add	r3, r2
10002902:	7818      	ldrb	r0, [r3, #0]
10002904:	7bfb      	ldrb	r3, [r7, #15]
10002906:	009a      	lsls	r2, r3, #2
10002908:	7dfb      	ldrb	r3, [r7, #23]
1000290a:	4413      	add	r3, r2
1000290c:	009a      	lsls	r2, r3, #2
1000290e:	7dbb      	ldrb	r3, [r7, #22]
10002910:	4413      	add	r3, r2
10002912:	461a      	mov	r2, r3
10002914:	687b      	ldr	r3, [r7, #4]
10002916:	4413      	add	r3, r2
10002918:	7819      	ldrb	r1, [r3, #0]
1000291a:	7dfa      	ldrb	r2, [r7, #23]
1000291c:	7dbb      	ldrb	r3, [r7, #22]
1000291e:	4041      	eors	r1, r0
10002920:	b2c8      	uxtb	r0, r1
10002922:	68b9      	ldr	r1, [r7, #8]
10002924:	0092      	lsls	r2, r2, #2
10002926:	440a      	add	r2, r1
10002928:	4413      	add	r3, r2
1000292a:	4602      	mov	r2, r0
1000292c:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
1000292e:	7dbb      	ldrb	r3, [r7, #22]
10002930:	3301      	adds	r3, #1
10002932:	75bb      	strb	r3, [r7, #22]
10002934:	7dbb      	ldrb	r3, [r7, #22]
10002936:	2b03      	cmp	r3, #3
10002938:	d9dd      	bls.n	100028f6 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
1000293a:	7dfb      	ldrb	r3, [r7, #23]
1000293c:	3301      	adds	r3, #1
1000293e:	75fb      	strb	r3, [r7, #23]
10002940:	7dfb      	ldrb	r3, [r7, #23]
10002942:	2b03      	cmp	r3, #3
10002944:	d9d4      	bls.n	100028f0 <AddRoundKey+0x14>
    }
  }
}
10002946:	bf00      	nop
10002948:	371c      	adds	r7, #28
1000294a:	46bd      	mov	sp, r7
1000294c:	f85d 7b04 	ldr.w	r7, [sp], #4
10002950:	4770      	bx	lr
	...

10002954 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
10002954:	b480      	push	{r7}
10002956:	b085      	sub	sp, #20
10002958:	af00      	add	r7, sp, #0
1000295a:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
1000295c:	2300      	movs	r3, #0
1000295e:	73fb      	strb	r3, [r7, #15]
10002960:	e01d      	b.n	1000299e <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
10002962:	2300      	movs	r3, #0
10002964:	73bb      	strb	r3, [r7, #14]
10002966:	e014      	b.n	10002992 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
10002968:	7bba      	ldrb	r2, [r7, #14]
1000296a:	7bfb      	ldrb	r3, [r7, #15]
1000296c:	6879      	ldr	r1, [r7, #4]
1000296e:	0092      	lsls	r2, r2, #2
10002970:	440a      	add	r2, r1
10002972:	4413      	add	r3, r2
10002974:	781b      	ldrb	r3, [r3, #0]
10002976:	4618      	mov	r0, r3
10002978:	7bba      	ldrb	r2, [r7, #14]
1000297a:	7bfb      	ldrb	r3, [r7, #15]
1000297c:	490c      	ldr	r1, [pc, #48]	; (100029b0 <SubBytes+0x5c>)
1000297e:	5c08      	ldrb	r0, [r1, r0]
10002980:	6879      	ldr	r1, [r7, #4]
10002982:	0092      	lsls	r2, r2, #2
10002984:	440a      	add	r2, r1
10002986:	4413      	add	r3, r2
10002988:	4602      	mov	r2, r0
1000298a:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
1000298c:	7bbb      	ldrb	r3, [r7, #14]
1000298e:	3301      	adds	r3, #1
10002990:	73bb      	strb	r3, [r7, #14]
10002992:	7bbb      	ldrb	r3, [r7, #14]
10002994:	2b03      	cmp	r3, #3
10002996:	d9e7      	bls.n	10002968 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
10002998:	7bfb      	ldrb	r3, [r7, #15]
1000299a:	3301      	adds	r3, #1
1000299c:	73fb      	strb	r3, [r7, #15]
1000299e:	7bfb      	ldrb	r3, [r7, #15]
100029a0:	2b03      	cmp	r3, #3
100029a2:	d9de      	bls.n	10002962 <SubBytes+0xe>
    }
  }
}
100029a4:	bf00      	nop
100029a6:	3714      	adds	r7, #20
100029a8:	46bd      	mov	sp, r7
100029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
100029ae:	4770      	bx	lr
100029b0:	10003e4c 	.word	0x10003e4c

100029b4 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
100029b4:	b480      	push	{r7}
100029b6:	b085      	sub	sp, #20
100029b8:	af00      	add	r7, sp, #0
100029ba:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
100029bc:	687b      	ldr	r3, [r7, #4]
100029be:	785b      	ldrb	r3, [r3, #1]
100029c0:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
100029c2:	687b      	ldr	r3, [r7, #4]
100029c4:	795a      	ldrb	r2, [r3, #5]
100029c6:	687b      	ldr	r3, [r7, #4]
100029c8:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
100029ca:	687b      	ldr	r3, [r7, #4]
100029cc:	7a5a      	ldrb	r2, [r3, #9]
100029ce:	687b      	ldr	r3, [r7, #4]
100029d0:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
100029d2:	687b      	ldr	r3, [r7, #4]
100029d4:	7b5a      	ldrb	r2, [r3, #13]
100029d6:	687b      	ldr	r3, [r7, #4]
100029d8:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
100029da:	687b      	ldr	r3, [r7, #4]
100029dc:	7bfa      	ldrb	r2, [r7, #15]
100029de:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
100029e0:	687b      	ldr	r3, [r7, #4]
100029e2:	789b      	ldrb	r3, [r3, #2]
100029e4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
100029e6:	687b      	ldr	r3, [r7, #4]
100029e8:	7a9a      	ldrb	r2, [r3, #10]
100029ea:	687b      	ldr	r3, [r7, #4]
100029ec:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
100029ee:	687b      	ldr	r3, [r7, #4]
100029f0:	7bfa      	ldrb	r2, [r7, #15]
100029f2:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
100029f4:	687b      	ldr	r3, [r7, #4]
100029f6:	799b      	ldrb	r3, [r3, #6]
100029f8:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
100029fa:	687b      	ldr	r3, [r7, #4]
100029fc:	7b9a      	ldrb	r2, [r3, #14]
100029fe:	687b      	ldr	r3, [r7, #4]
10002a00:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
10002a02:	687b      	ldr	r3, [r7, #4]
10002a04:	7bfa      	ldrb	r2, [r7, #15]
10002a06:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
10002a08:	687b      	ldr	r3, [r7, #4]
10002a0a:	78db      	ldrb	r3, [r3, #3]
10002a0c:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
10002a0e:	687b      	ldr	r3, [r7, #4]
10002a10:	7bda      	ldrb	r2, [r3, #15]
10002a12:	687b      	ldr	r3, [r7, #4]
10002a14:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
10002a16:	687b      	ldr	r3, [r7, #4]
10002a18:	7ada      	ldrb	r2, [r3, #11]
10002a1a:	687b      	ldr	r3, [r7, #4]
10002a1c:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
10002a1e:	687b      	ldr	r3, [r7, #4]
10002a20:	79da      	ldrb	r2, [r3, #7]
10002a22:	687b      	ldr	r3, [r7, #4]
10002a24:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
10002a26:	687b      	ldr	r3, [r7, #4]
10002a28:	7bfa      	ldrb	r2, [r7, #15]
10002a2a:	71da      	strb	r2, [r3, #7]
}
10002a2c:	bf00      	nop
10002a2e:	3714      	adds	r7, #20
10002a30:	46bd      	mov	sp, r7
10002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
10002a36:	4770      	bx	lr

10002a38 <xtime>:

static uint8_t xtime(uint8_t x)
{
10002a38:	b480      	push	{r7}
10002a3a:	b083      	sub	sp, #12
10002a3c:	af00      	add	r7, sp, #0
10002a3e:	4603      	mov	r3, r0
10002a40:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
10002a42:	79fb      	ldrb	r3, [r7, #7]
10002a44:	005b      	lsls	r3, r3, #1
10002a46:	b25a      	sxtb	r2, r3
10002a48:	79fb      	ldrb	r3, [r7, #7]
10002a4a:	09db      	lsrs	r3, r3, #7
10002a4c:	b2db      	uxtb	r3, r3
10002a4e:	4619      	mov	r1, r3
10002a50:	0049      	lsls	r1, r1, #1
10002a52:	440b      	add	r3, r1
10002a54:	4619      	mov	r1, r3
10002a56:	00c8      	lsls	r0, r1, #3
10002a58:	4619      	mov	r1, r3
10002a5a:	4603      	mov	r3, r0
10002a5c:	440b      	add	r3, r1
10002a5e:	b2db      	uxtb	r3, r3
10002a60:	b25b      	sxtb	r3, r3
10002a62:	4053      	eors	r3, r2
10002a64:	b25b      	sxtb	r3, r3
10002a66:	b2db      	uxtb	r3, r3
}
10002a68:	4618      	mov	r0, r3
10002a6a:	370c      	adds	r7, #12
10002a6c:	46bd      	mov	sp, r7
10002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
10002a72:	4770      	bx	lr

10002a74 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
10002a74:	b580      	push	{r7, lr}
10002a76:	b084      	sub	sp, #16
10002a78:	af00      	add	r7, sp, #0
10002a7a:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
10002a7c:	2300      	movs	r3, #0
10002a7e:	73fb      	strb	r3, [r7, #15]
10002a80:	e0a4      	b.n	10002bcc <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
10002a82:	7bfa      	ldrb	r2, [r7, #15]
10002a84:	687b      	ldr	r3, [r7, #4]
10002a86:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
10002a8a:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
10002a8c:	7bfa      	ldrb	r2, [r7, #15]
10002a8e:	687b      	ldr	r3, [r7, #4]
10002a90:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
10002a94:	7bfb      	ldrb	r3, [r7, #15]
10002a96:	6879      	ldr	r1, [r7, #4]
10002a98:	009b      	lsls	r3, r3, #2
10002a9a:	440b      	add	r3, r1
10002a9c:	785b      	ldrb	r3, [r3, #1]
10002a9e:	4053      	eors	r3, r2
10002aa0:	b2da      	uxtb	r2, r3
10002aa2:	7bfb      	ldrb	r3, [r7, #15]
10002aa4:	6879      	ldr	r1, [r7, #4]
10002aa6:	009b      	lsls	r3, r3, #2
10002aa8:	440b      	add	r3, r1
10002aaa:	789b      	ldrb	r3, [r3, #2]
10002aac:	4053      	eors	r3, r2
10002aae:	b2da      	uxtb	r2, r3
10002ab0:	7bfb      	ldrb	r3, [r7, #15]
10002ab2:	6879      	ldr	r1, [r7, #4]
10002ab4:	009b      	lsls	r3, r3, #2
10002ab6:	440b      	add	r3, r1
10002ab8:	78db      	ldrb	r3, [r3, #3]
10002aba:	4053      	eors	r3, r2
10002abc:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
10002abe:	7bfa      	ldrb	r2, [r7, #15]
10002ac0:	687b      	ldr	r3, [r7, #4]
10002ac2:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
10002ac6:	7bfb      	ldrb	r3, [r7, #15]
10002ac8:	6879      	ldr	r1, [r7, #4]
10002aca:	009b      	lsls	r3, r3, #2
10002acc:	440b      	add	r3, r1
10002ace:	785b      	ldrb	r3, [r3, #1]
10002ad0:	4053      	eors	r3, r2
10002ad2:	733b      	strb	r3, [r7, #12]
10002ad4:	7b3b      	ldrb	r3, [r7, #12]
10002ad6:	4618      	mov	r0, r3
10002ad8:	f7ff ffae 	bl	10002a38 <xtime>
10002adc:	4603      	mov	r3, r0
10002ade:	733b      	strb	r3, [r7, #12]
10002ae0:	7bfa      	ldrb	r2, [r7, #15]
10002ae2:	687b      	ldr	r3, [r7, #4]
10002ae4:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
10002ae8:	7b3a      	ldrb	r2, [r7, #12]
10002aea:	7b7b      	ldrb	r3, [r7, #13]
10002aec:	4053      	eors	r3, r2
10002aee:	b2db      	uxtb	r3, r3
10002af0:	7bfa      	ldrb	r2, [r7, #15]
10002af2:	404b      	eors	r3, r1
10002af4:	b2d9      	uxtb	r1, r3
10002af6:	687b      	ldr	r3, [r7, #4]
10002af8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
10002afc:	7bfb      	ldrb	r3, [r7, #15]
10002afe:	687a      	ldr	r2, [r7, #4]
10002b00:	009b      	lsls	r3, r3, #2
10002b02:	4413      	add	r3, r2
10002b04:	785a      	ldrb	r2, [r3, #1]
10002b06:	7bfb      	ldrb	r3, [r7, #15]
10002b08:	6879      	ldr	r1, [r7, #4]
10002b0a:	009b      	lsls	r3, r3, #2
10002b0c:	440b      	add	r3, r1
10002b0e:	789b      	ldrb	r3, [r3, #2]
10002b10:	4053      	eors	r3, r2
10002b12:	733b      	strb	r3, [r7, #12]
10002b14:	7b3b      	ldrb	r3, [r7, #12]
10002b16:	4618      	mov	r0, r3
10002b18:	f7ff ff8e 	bl	10002a38 <xtime>
10002b1c:	4603      	mov	r3, r0
10002b1e:	733b      	strb	r3, [r7, #12]
10002b20:	7bfb      	ldrb	r3, [r7, #15]
10002b22:	687a      	ldr	r2, [r7, #4]
10002b24:	009b      	lsls	r3, r3, #2
10002b26:	4413      	add	r3, r2
10002b28:	7859      	ldrb	r1, [r3, #1]
10002b2a:	7b3a      	ldrb	r2, [r7, #12]
10002b2c:	7b7b      	ldrb	r3, [r7, #13]
10002b2e:	4053      	eors	r3, r2
10002b30:	b2da      	uxtb	r2, r3
10002b32:	7bfb      	ldrb	r3, [r7, #15]
10002b34:	404a      	eors	r2, r1
10002b36:	b2d1      	uxtb	r1, r2
10002b38:	687a      	ldr	r2, [r7, #4]
10002b3a:	009b      	lsls	r3, r3, #2
10002b3c:	4413      	add	r3, r2
10002b3e:	460a      	mov	r2, r1
10002b40:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
10002b42:	7bfb      	ldrb	r3, [r7, #15]
10002b44:	687a      	ldr	r2, [r7, #4]
10002b46:	009b      	lsls	r3, r3, #2
10002b48:	4413      	add	r3, r2
10002b4a:	789a      	ldrb	r2, [r3, #2]
10002b4c:	7bfb      	ldrb	r3, [r7, #15]
10002b4e:	6879      	ldr	r1, [r7, #4]
10002b50:	009b      	lsls	r3, r3, #2
10002b52:	440b      	add	r3, r1
10002b54:	78db      	ldrb	r3, [r3, #3]
10002b56:	4053      	eors	r3, r2
10002b58:	733b      	strb	r3, [r7, #12]
10002b5a:	7b3b      	ldrb	r3, [r7, #12]
10002b5c:	4618      	mov	r0, r3
10002b5e:	f7ff ff6b 	bl	10002a38 <xtime>
10002b62:	4603      	mov	r3, r0
10002b64:	733b      	strb	r3, [r7, #12]
10002b66:	7bfb      	ldrb	r3, [r7, #15]
10002b68:	687a      	ldr	r2, [r7, #4]
10002b6a:	009b      	lsls	r3, r3, #2
10002b6c:	4413      	add	r3, r2
10002b6e:	7899      	ldrb	r1, [r3, #2]
10002b70:	7b3a      	ldrb	r2, [r7, #12]
10002b72:	7b7b      	ldrb	r3, [r7, #13]
10002b74:	4053      	eors	r3, r2
10002b76:	b2da      	uxtb	r2, r3
10002b78:	7bfb      	ldrb	r3, [r7, #15]
10002b7a:	404a      	eors	r2, r1
10002b7c:	b2d1      	uxtb	r1, r2
10002b7e:	687a      	ldr	r2, [r7, #4]
10002b80:	009b      	lsls	r3, r3, #2
10002b82:	4413      	add	r3, r2
10002b84:	460a      	mov	r2, r1
10002b86:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
10002b88:	7bfb      	ldrb	r3, [r7, #15]
10002b8a:	687a      	ldr	r2, [r7, #4]
10002b8c:	009b      	lsls	r3, r3, #2
10002b8e:	4413      	add	r3, r2
10002b90:	78da      	ldrb	r2, [r3, #3]
10002b92:	7bbb      	ldrb	r3, [r7, #14]
10002b94:	4053      	eors	r3, r2
10002b96:	733b      	strb	r3, [r7, #12]
10002b98:	7b3b      	ldrb	r3, [r7, #12]
10002b9a:	4618      	mov	r0, r3
10002b9c:	f7ff ff4c 	bl	10002a38 <xtime>
10002ba0:	4603      	mov	r3, r0
10002ba2:	733b      	strb	r3, [r7, #12]
10002ba4:	7bfb      	ldrb	r3, [r7, #15]
10002ba6:	687a      	ldr	r2, [r7, #4]
10002ba8:	009b      	lsls	r3, r3, #2
10002baa:	4413      	add	r3, r2
10002bac:	78d9      	ldrb	r1, [r3, #3]
10002bae:	7b3a      	ldrb	r2, [r7, #12]
10002bb0:	7b7b      	ldrb	r3, [r7, #13]
10002bb2:	4053      	eors	r3, r2
10002bb4:	b2da      	uxtb	r2, r3
10002bb6:	7bfb      	ldrb	r3, [r7, #15]
10002bb8:	404a      	eors	r2, r1
10002bba:	b2d1      	uxtb	r1, r2
10002bbc:	687a      	ldr	r2, [r7, #4]
10002bbe:	009b      	lsls	r3, r3, #2
10002bc0:	4413      	add	r3, r2
10002bc2:	460a      	mov	r2, r1
10002bc4:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
10002bc6:	7bfb      	ldrb	r3, [r7, #15]
10002bc8:	3301      	adds	r3, #1
10002bca:	73fb      	strb	r3, [r7, #15]
10002bcc:	7bfb      	ldrb	r3, [r7, #15]
10002bce:	2b03      	cmp	r3, #3
10002bd0:	f67f af57 	bls.w	10002a82 <MixColumns+0xe>
  }
}
10002bd4:	bf00      	nop
10002bd6:	3710      	adds	r7, #16
10002bd8:	46bd      	mov	sp, r7
10002bda:	bd80      	pop	{r7, pc}

10002bdc <Cipher>:
}
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
10002bdc:	b580      	push	{r7, lr}
10002bde:	b084      	sub	sp, #16
10002be0:	af00      	add	r7, sp, #0
10002be2:	6078      	str	r0, [r7, #4]
10002be4:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
10002be6:	2300      	movs	r3, #0
10002be8:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
10002bea:	683a      	ldr	r2, [r7, #0]
10002bec:	6879      	ldr	r1, [r7, #4]
10002bee:	2000      	movs	r0, #0
10002bf0:	f7ff fe74 	bl	100028dc <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
10002bf4:	2301      	movs	r3, #1
10002bf6:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
10002bf8:	6878      	ldr	r0, [r7, #4]
10002bfa:	f7ff feab 	bl	10002954 <SubBytes>
    ShiftRows(state);
10002bfe:	6878      	ldr	r0, [r7, #4]
10002c00:	f7ff fed8 	bl	100029b4 <ShiftRows>
    if (round == Nr) {
10002c04:	7bfb      	ldrb	r3, [r7, #15]
10002c06:	2b0a      	cmp	r3, #10
10002c08:	d00c      	beq.n	10002c24 <Cipher+0x48>
      break;
    }
    MixColumns(state);
10002c0a:	6878      	ldr	r0, [r7, #4]
10002c0c:	f7ff ff32 	bl	10002a74 <MixColumns>
    AddRoundKey(round, state, RoundKey);
10002c10:	7bfb      	ldrb	r3, [r7, #15]
10002c12:	683a      	ldr	r2, [r7, #0]
10002c14:	6879      	ldr	r1, [r7, #4]
10002c16:	4618      	mov	r0, r3
10002c18:	f7ff fe60 	bl	100028dc <AddRoundKey>
  for (round = 1; ; ++round)
10002c1c:	7bfb      	ldrb	r3, [r7, #15]
10002c1e:	3301      	adds	r3, #1
10002c20:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
10002c22:	e7e9      	b.n	10002bf8 <Cipher+0x1c>
      break;
10002c24:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
10002c26:	683a      	ldr	r2, [r7, #0]
10002c28:	6879      	ldr	r1, [r7, #4]
10002c2a:	200a      	movs	r0, #10
10002c2c:	f7ff fe56 	bl	100028dc <AddRoundKey>
}
10002c30:	bf00      	nop
10002c32:	3710      	adds	r7, #16
10002c34:	46bd      	mov	sp, r7
10002c36:	bd80      	pop	{r7, pc}

10002c38 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
10002c38:	b580      	push	{r7, lr}
10002c3a:	b082      	sub	sp, #8
10002c3c:	af00      	add	r7, sp, #0
10002c3e:	6078      	str	r0, [r7, #4]
10002c40:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
10002c42:	687b      	ldr	r3, [r7, #4]
10002c44:	4619      	mov	r1, r3
10002c46:	6838      	ldr	r0, [r7, #0]
10002c48:	f7ff ffc8 	bl	10002bdc <Cipher>
}
10002c4c:	bf00      	nop
10002c4e:	3708      	adds	r7, #8
10002c50:	46bd      	mov	sp, r7
10002c52:	bd80      	pop	{r7, pc}

10002c54 <__libc_init_array>:
10002c54:	b570      	push	{r4, r5, r6, lr}
10002c56:	4e0d      	ldr	r6, [pc, #52]	; (10002c8c <__libc_init_array+0x38>)
10002c58:	4c0d      	ldr	r4, [pc, #52]	; (10002c90 <__libc_init_array+0x3c>)
10002c5a:	1ba4      	subs	r4, r4, r6
10002c5c:	10a4      	asrs	r4, r4, #2
10002c5e:	2500      	movs	r5, #0
10002c60:	42a5      	cmp	r5, r4
10002c62:	d109      	bne.n	10002c78 <__libc_init_array+0x24>
10002c64:	4e0b      	ldr	r6, [pc, #44]	; (10002c94 <__libc_init_array+0x40>)
10002c66:	4c0c      	ldr	r4, [pc, #48]	; (10002c98 <__libc_init_array+0x44>)
10002c68:	f000 f894 	bl	10002d94 <_init>
10002c6c:	1ba4      	subs	r4, r4, r6
10002c6e:	10a4      	asrs	r4, r4, #2
10002c70:	2500      	movs	r5, #0
10002c72:	42a5      	cmp	r5, r4
10002c74:	d105      	bne.n	10002c82 <__libc_init_array+0x2e>
10002c76:	bd70      	pop	{r4, r5, r6, pc}
10002c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
10002c7c:	4798      	blx	r3
10002c7e:	3501      	adds	r5, #1
10002c80:	e7ee      	b.n	10002c60 <__libc_init_array+0xc>
10002c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
10002c86:	4798      	blx	r3
10002c88:	3501      	adds	r5, #1
10002c8a:	e7f2      	b.n	10002c72 <__libc_init_array+0x1e>
10002c8c:	10003f5c 	.word	0x10003f5c
10002c90:	10003f5c 	.word	0x10003f5c
10002c94:	10003f5c 	.word	0x10003f5c
10002c98:	10003f64 	.word	0x10003f64

10002c9c <register_fini>:
10002c9c:	4b02      	ldr	r3, [pc, #8]	; (10002ca8 <register_fini+0xc>)
10002c9e:	b113      	cbz	r3, 10002ca6 <register_fini+0xa>
10002ca0:	4802      	ldr	r0, [pc, #8]	; (10002cac <register_fini+0x10>)
10002ca2:	f000 b805 	b.w	10002cb0 <atexit>
10002ca6:	4770      	bx	lr
10002ca8:	00000000 	.word	0x00000000
10002cac:	10002cbd 	.word	0x10002cbd

10002cb0 <atexit>:
10002cb0:	2300      	movs	r3, #0
10002cb2:	4601      	mov	r1, r0
10002cb4:	461a      	mov	r2, r3
10002cb6:	4618      	mov	r0, r3
10002cb8:	f000 b816 	b.w	10002ce8 <__register_exitproc>

10002cbc <__libc_fini_array>:
10002cbc:	b538      	push	{r3, r4, r5, lr}
10002cbe:	4d07      	ldr	r5, [pc, #28]	; (10002cdc <__libc_fini_array+0x20>)
10002cc0:	4c07      	ldr	r4, [pc, #28]	; (10002ce0 <__libc_fini_array+0x24>)
10002cc2:	1b64      	subs	r4, r4, r5
10002cc4:	10a4      	asrs	r4, r4, #2
10002cc6:	b91c      	cbnz	r4, 10002cd0 <__libc_fini_array+0x14>
10002cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
10002ccc:	f000 b868 	b.w	10002da0 <_fini>
10002cd0:	3c01      	subs	r4, #1
10002cd2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
10002cd6:	4798      	blx	r3
10002cd8:	e7f5      	b.n	10002cc6 <__libc_fini_array+0xa>
10002cda:	bf00      	nop
10002cdc:	10003f64 	.word	0x10003f64
10002ce0:	10003f68 	.word	0x10003f68

10002ce4 <__retarget_lock_acquire_recursive>:
10002ce4:	4770      	bx	lr

10002ce6 <__retarget_lock_release_recursive>:
10002ce6:	4770      	bx	lr

10002ce8 <__register_exitproc>:
10002ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
10002cec:	4c26      	ldr	r4, [pc, #152]	; (10002d88 <__register_exitproc+0xa0>)
10002cee:	4606      	mov	r6, r0
10002cf0:	6820      	ldr	r0, [r4, #0]
10002cf2:	4698      	mov	r8, r3
10002cf4:	460f      	mov	r7, r1
10002cf6:	4691      	mov	r9, r2
10002cf8:	f7ff fff4 	bl	10002ce4 <__retarget_lock_acquire_recursive>
10002cfc:	4b23      	ldr	r3, [pc, #140]	; (10002d8c <__register_exitproc+0xa4>)
10002cfe:	681d      	ldr	r5, [r3, #0]
10002d00:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
10002d04:	b918      	cbnz	r0, 10002d0e <__register_exitproc+0x26>
10002d06:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
10002d0a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
10002d0e:	6843      	ldr	r3, [r0, #4]
10002d10:	2b1f      	cmp	r3, #31
10002d12:	dd19      	ble.n	10002d48 <__register_exitproc+0x60>
10002d14:	4b1e      	ldr	r3, [pc, #120]	; (10002d90 <__register_exitproc+0xa8>)
10002d16:	b933      	cbnz	r3, 10002d26 <__register_exitproc+0x3e>
10002d18:	6820      	ldr	r0, [r4, #0]
10002d1a:	f7ff ffe4 	bl	10002ce6 <__retarget_lock_release_recursive>
10002d1e:	f04f 30ff 	mov.w	r0, #4294967295
10002d22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
10002d26:	f44f 70c8 	mov.w	r0, #400	; 0x190
10002d2a:	f3af 8000 	nop.w
10002d2e:	2800      	cmp	r0, #0
10002d30:	d0f2      	beq.n	10002d18 <__register_exitproc+0x30>
10002d32:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
10002d36:	6003      	str	r3, [r0, #0]
10002d38:	2200      	movs	r2, #0
10002d3a:	6042      	str	r2, [r0, #4]
10002d3c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
10002d40:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
10002d44:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
10002d48:	6843      	ldr	r3, [r0, #4]
10002d4a:	b19e      	cbz	r6, 10002d74 <__register_exitproc+0x8c>
10002d4c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
10002d50:	2201      	movs	r2, #1
10002d52:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
10002d56:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
10002d5a:	409a      	lsls	r2, r3
10002d5c:	4311      	orrs	r1, r2
10002d5e:	2e02      	cmp	r6, #2
10002d60:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
10002d64:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
10002d68:	bf02      	ittt	eq
10002d6a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
10002d6e:	430a      	orreq	r2, r1
10002d70:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
10002d74:	1c5a      	adds	r2, r3, #1
10002d76:	3302      	adds	r3, #2
10002d78:	6042      	str	r2, [r0, #4]
10002d7a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
10002d7e:	6820      	ldr	r0, [r4, #0]
10002d80:	f7ff ffb1 	bl	10002ce6 <__retarget_lock_release_recursive>
10002d84:	2000      	movs	r0, #0
10002d86:	e7cc      	b.n	10002d22 <__register_exitproc+0x3a>
10002d88:	10020448 	.word	0x10020448
10002d8c:	10003f58 	.word	0x10003f58
10002d90:	00000000 	.word	0x00000000

10002d94 <_init>:
10002d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002d96:	bf00      	nop
10002d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002d9a:	bc08      	pop	{r3}
10002d9c:	469e      	mov	lr, r3
10002d9e:	4770      	bx	lr

10002da0 <_fini>:
10002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10002da2:	bf00      	nop
10002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10002da6:	bc08      	pop	{r3}
10002da8:	469e      	mov	lr, r3
10002daa:	4770      	bx	lr

Disassembly of section .startup_copro_fw.Reset_Handler:

10002dac <Reset_Handler>:
  ldr   sp, =_estack      /* set stack pointer */
10002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 10002de4 <LoopForever+0x2>
  movs  r1, #0
10002db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
10002db2:	e003      	b.n	10002dbc <LoopCopyDataInit>

10002db4 <CopyDataInit>:
  ldr  r3, =_sidata
10002db4:	4b0c      	ldr	r3, [pc, #48]	; (10002de8 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
10002db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
10002db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
10002dba:	3104      	adds	r1, #4

10002dbc <LoopCopyDataInit>:
  ldr  r0, =_sdata
10002dbc:	480b      	ldr	r0, [pc, #44]	; (10002dec <LoopForever+0xa>)
  ldr  r3, =_edata
10002dbe:	4b0c      	ldr	r3, [pc, #48]	; (10002df0 <LoopForever+0xe>)
  adds  r2, r0, r1
10002dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
10002dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
10002dc4:	d3f6      	bcc.n	10002db4 <CopyDataInit>
  ldr  r2, =_sbss
10002dc6:	4a0b      	ldr	r2, [pc, #44]	; (10002df4 <LoopForever+0x12>)
  b  LoopFillZerobss
10002dc8:	e002      	b.n	10002dd0 <LoopFillZerobss>

10002dca <FillZerobss>:
  movs  r3, #0
10002dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
10002dcc:	f842 3b04 	str.w	r3, [r2], #4

10002dd0 <LoopFillZerobss>:
  ldr  r3, = _ebss
10002dd0:	4b09      	ldr	r3, [pc, #36]	; (10002df8 <LoopForever+0x16>)
  cmp  r2, r3
10002dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
10002dd4:	d3f9      	bcc.n	10002dca <FillZerobss>
  bl  SystemInit
10002dd6:	f7fd fdbf 	bl	10000958 <SystemInit>
 bl __libc_init_array
10002dda:	f7ff ff3b 	bl	10002c54 <__libc_init_array>
  bl main
10002dde:	f7fd fa31 	bl	10000244 <main>

10002de2 <LoopForever>:
    b LoopForever
10002de2:	e7fe      	b.n	10002de2 <LoopForever>
  ldr   sp, =_estack      /* set stack pointer */
10002de4:	10040000 	.word	0x10040000
  ldr  r3, =_sidata
10002de8:	10003f68 	.word	0x10003f68
  ldr  r0, =_sdata
10002dec:	10020000 	.word	0x10020000
  ldr  r3, =_edata
10002df0:	1002044c 	.word	0x1002044c
  ldr  r2, =_sbss
10002df4:	1002044c 	.word	0x1002044c
  ldr  r3, = _ebss
10002df8:	1002437c 	.word	0x1002437c
